A OOP associated
An object mostly made data behavior form interface object present outside world
Data represented object behavior method
For example object would method state whether opened closed would property
In method defined object instance given class
One important capability method provides method overriding
The name used multiple different kind class
This allows sending object invoke behavior delegate implementation behavior receiving object
A method Java programming set behavior class object
For example object send message another object appropriate formula invoked whether receiving object etc
Methods also provide interface class use access modify data object
This known encapsulation
Encapsulation overriding two primary distinguishing feature method procedure call
overloading two significant way method differs conventional procedure function call
Overriding refers subclass redefining implementation method superclass
For example may method defined shape class
The various subclass etc
would define appropriate formula calculate area
The idea look object black box change internals object made minimal impact object use
This known encapsulation meant make code easier maintain
Method overloading hand refers differentiating code used handle message based parameter method
If one view receiving object first parameter method overriding special case overloading selection based first argument
The following simple example illustrates difference Accessor method used read data value object
Mutator method used modify data object
Manager method used initialize destroy object class
constructor destructors
These method provide facilitates
For example class provides accessor method retrieve current rather directly accessing balance data field later code implement complex mechanism balance retrieval fetch without dependent code needing changed
The concept encapsulation modularity unique programming
Indeed many way approach simply logical extension previous paradigm
A method called beginning object lifetime create initialize object process called
Initialization may include acquisition resource
Constructors may parameter usually return value language
See following example Java A method called automatically end object lifetime process called
Destruction language allow destructor method argument return value
Destruction implemented perform cleanup chore task object destruction
In language destructors known
They similar purpose function destructors difference language utilize language manual memory management sequence called different
An one
It often used specify subclass must provide implementation method
Abstract method used specify computer language
The following code show abstract class need extended The following subclass extends main class Class method method called rather instance
They typically used part object
class defined instance class object created
allow class created deleted
In sense provide functionality constructor destructors described
But language allows developer dynamically alter object model run time create new class redefine class hierarchy modify property etc
Special method language may support none special method defined
A language compiler may automatically generate default special method programmer may allowed optionally define special method
Most special method directly called rather compiler generates code call appropriate time
Static method meant relevant instance class rather specific instance
They similar static variable sense
An example would static method sum value variable every instance class
For example class might static method compute average price product
In Java commonly used static method This static method owning object run instance
It receives information argument
A static method invoked even instance class exist yet
Static method called static resolved compile time based class called dynamically case instance method resolved polymorphically based runtime type object
operator define action performed compiler class object assigned class object type
Operator method define operation performed symbol associated method parameter
Example Some procedural language extended capability leverage large skill set legacy code language still provide benefit development
Perhaps example extension programming language
Due design requirement add paradigm existing procedural language message passing unique capability terminology
For example method known
also concept member function allow
mean class achieve polymorphic behavior
participate
Example

µµµµ obj endobj obj endobj obj R R R R R R R R endobj obj stream ì OÀxÃy bÃB A I ÝwÖ Oæp ud S ü endstream endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj stream T KQ ø Áa é B ü ûúWæÉæÀ Tì ð hÈC Å êÈj endstream endobj obj stream pÛ Z ùÉÓO ã TL ÖÔ deI Z ZêµgÏM À Â õ Ð aE æþÜ wêµlöbÕáþÔ öí atðØää
u ê ÖÔ cÔwG Ô
HØ V Ô öVËÍZí ß jý ARô

obj stream r ú oûóä Õc ûð hè mð ÆlI á D Ðß ËÒ ïûcu É ÿ
NT Ç A ÿ îú QË K KN ãT
Þ æD Ù ÜF
L Q X ècÝ à Y ÓXân ùº
ÅWû Öþ ÖÏ æ
b Jb ª v L oº Ä EIþï jnúO jy ýgx oaMçÃ Â endobj obj endobj obj stream Q TªJ
æ çà XN ÚÒ Î ÏSò æ Ñe â víg AëH l q YÉÊÍø þñfßf dÌøøîJ ÎªTÔÌÙ Ö ÿéw ÞrÝõ þDY NÏh q NØbr E õ ÌjéÏb
ÛqC
üö Èì P Íèv GÑ ºË ÿGtY GlÈ çÝ W ïémÌ YJÏ àËNº Å j ÍRÏK ÜT Y ÇBrrlÝl Ò
Èª á X
w r ù endobj obj endobj obj stream l

É ÙbôãS cÏwè î ÌW lw ÔTÉ ÏÛ
ÀIôÉ ä ôLCU PuãË L À I R ÕF E ÈUÛÏÍ ê vêÚ v Æ úþ e
ê çð qóï ýAÕduP ÕÙRð Kuðd Gä MQ K V XÒïa B Ã ºMpÍû xW W ç b L ýÂ Ó Q ÐÌøëqY ÝY ÙªYºóú â xg ãÝW Ý ñ j
endobj obj endobj obj stream gVÚ ã é v á onq
ETrAv ïhMÞiOO Ø aiÀ ê Á M è ÉÝ æqèºæø ri Z à E Y KÀÄí úêqÉ

hÏO
Q Ã ÜcVöc Ç Ífæ O Ç nèiëNõÃÃØ v ö xMÆ kpË P oy z Ú çRtª Q nÝ Å endobj obj endobj obj stream Éï IÎûåY A
u JOo ÜÇzú ú qª é ÅØ Ýk ÆµÅTÀ tZ Ý nõc v Ñ E È Rm DáB ß Â Äð
Rá Ñ ç Ç ÍhÞ
dà b ÕP

The last decade I supervised significant amount PhD student served numerous PhD committee reviewed countless number paper
During occasion I always best give constructive remark lot young someteimes even young researcher acknowledged indeed help becoming better researcher
However year I got nagging feeling I often repeating sometimes wondering whether I sounding like old grumpy grandfather instead active enthusiastic researcher
Worse I often giving tidbit advice noticed overall picture speak lacking
My advice sometimes misunderstood neglected otherwise ignored I often wondered I could nail
During sabbatacil leave University Zürich August January research group I finally presented opportunity develop reference framework
I awfull lot reading several brainstorm end created tutorial entitled Research method Computer Science
This collect material related resource regarding tutorial
Below find recent copy slide used tutorial
This version presented Conference
This tutorial explores role research method computer science drawing upon practical example empirical approach software engineering
After tutorial participant able
This tutorial aimed PhD student want improve research skill
In particular concerned The tutorial Research Methods Computer Science concrete result sabbatical leave University Züurich research group SEAL
Below short chronological overview tutorial evolved current incarnation
After incarnation tutorial I hold little questionnaire among participant
Below analysis response


ÐÔÅØ obj stream º Y n
ÕåNfÁ tãa GRÄ ëD px þe Th Rt CÕ
Í Á
çTûï hHÝÛ µÓµýÏ gÛîÌ lÀ CÇ Erk
á ÓÖ RG ÅY aêùî ÄiîSü ÛÈ ÚGÑ RÊ PÉÿZéÅk º
îÊW
q æp vt Æ Ë ñ uB Ó ÑÁþ ãØtN
Ù kò ök ë U
ê ºÝ Qy ún

Glasgow Interactive Systems Group GIST Department Computer Science Glasgow University Glasgow
Tel Fax EMail This paper argues expanding scope science make difficult sustain traditional scientific engineering model research
In particular recent work formal method abandoned traditional empirical method
Similarly research requirement engineering human computer interaction challenged proponent formal method
These tension stem fact Science misnoma
Topics currently considered part discipline computing science technology rather theory driven
This creates problem academic department impose scientific criterion assessment PhDs
It therefore important people ask Research Computing Science starting higher degree
This paper intended high level introduction first year research student student advanced MSc course
It read conjunction research skill computing science
Good research practice suggests begin defining term
The Oxford Concise dictionary defines research However many reason approach unsatisfactory model research
The main objection carry high risk
For example artefact may fail long learn anything conclusion seeking support
Indeed often case approach ignores formation clear hypothesis conclusion artefact built
This may lead artefact become important researcher idea intended establish
The lack clear hypothesis need barrier might seem
The proof demonstration approach much common current engineering practice
Iterative refinement used move implementation gradually towards desired solution
The evidence elicited previous failed attempt used better define goal research work progress
The key problem iterative development artefact turn requires method structure
Engineers need carefully plan way fault found one iteration fed back subsequent development
This typically done testing technique based upon model scientific argument
This close relationship engineering scientific method surprising There many problem standard approach scientific empiricism applied computing science
The principle objection many aspect computing defy use probabilistic measure analysing result empirical test
For example many statistical measure rely upon independence test hypothesis
Such technique clearly used attempting measure performance system attempt optimise performance time rule load balancing algorithm etc
Secondly difficult impose standard experimental condition upon product computer science
For example program behaves one way one set operating condition guarantee behave way another set condition
These condition might go level alpha particle hitting memory chip
Thirdly difficult generalise result tightly controlled empirical experiment
For example user find system easy use evaluation guarantee another user able use product amidst distraction everyday working environment
Finally difficult determine sufficient number trial conducted support many hypothesis
For example attempt prove program always satisfies property almost certainly doomed failure using standard experimental technique The number potential execution path even simple code make impossible test property every possible execution path
The field mathematical reasoning research area right
It however possible identify two different approach use formal proof research technique computing science The first incredible care need made interpretation result mathematical proof
Formal method nothing system argumentation mistake expected
Problems arise mistake difficult detect given complex nature mathematics often used
Recall central feature empirical approach open peer review used check method correct
The second problem formal reasoning scope limited
Interactive time critical system pose specially challenge application mathematics
These issue addressed many problem remain
The third problem relates cost applying formal technique
It take long time acquire necessary skill
Similarly take several month conduct relatively simple proof medium large scale application
Finally argued inadequate discussion failure formal method
Again important recall failure prove hypothesis valuable result empirical technique
Exaggerated claim made formal reasoning typically researcher many claim falsified
As result error application mathematical reasoning seen source shame rather learning opportunity one colleague peer

âãÏÓ obj endobj xref n n n n n n n n n n n n n n n n n n n n n n n trailer ã WëÃf ß Ö wuu hñÂy Ñ ýÖÖis ÏK endstream endobj obj stream r ð Ú
B Æ ËId Åº Ôqa endstream endobj obj endobj obj endobj obj stream

Preparation research computer science
Technical communication skill
Design evaluation experiment
The research process

Virginia Polytechnic Institute State University

