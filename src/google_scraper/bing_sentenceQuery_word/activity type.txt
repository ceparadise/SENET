In simply classification data tell programmer intends use data
Most programming language support various type data example
A data type provides set value
variable function may take value
The type defines operation done data meaning data way value type type value expression may take value Data type used within type system offer various way defining implementing using
Different type system ensure varying degree
Almost programming language explicitly include notion data type though different language may use different terminology
Common data type include For example type represents set ranging value well operation performed integer addition subtraction multiplication
Colors hand represented three denoting amount red green blue one string representing color name allowable operation include addition subtraction multiplication
Most programming language also allow programmer define additional data type usually combining multiple element type defining valid operation new data type
For example programmer might create new data type named would include real imaginary part
A data type also represents constraint placed upon interpretation data describing representation interpretation structure stored computer memory
The type system us data type information check access manipulate data
Most data type statistic comparable type computer programming vice versa shown following table identified five definition type literature
Types including behavior align closely model whereas model would tend include code called
The five type The definition term representation often done imperative language definition term value space behaviour used language
typically type basic language implementation
All data computer based digital electronics represented alternative lowest level
The smallest addressable unit data usually group bit called usually bit
The unit processed instruction called typically bit
Most instruction interpret word word represent unsigned integer value signed integer value
Because machine language machine need distinguish unsigned signed data type part
There specific set arithmetic instruction use different interpretation bit word number
Machine data type need made available allowing control hardware
The instance supply integer type various width
If corresponding native type exist target platform compiler break code using type exist
For instance integer requested bit platform compiler tacitly treat array two bit integer
Several language allow convenient manipulation machine data
In higher level programming machine data type often hidden implementation detail would render code le portable exposed
For instance generic type might supplied instead integer specific
The represents value
Although two value possible rarely implemented single binary digit efficiency reason
Many programming language explicit Boolean type instead interpreting instance false value true
Boolean data simply refers logical structure language interpreted machine language
In case Boolean refers logic False
True always non zero especially one known Boolean
Such derived one primitive type
This done number way
The way combined called
Composing primitive type compound type generally result new type
different type
Many others possible tend variation compound
The distinct value compared assigned necessarily particular concrete representation computer memory compiler interpreter represent arbitrarily
For example four suit deck playing card may four enumerator named belonging enumerated type named
If variable declared data type one assign four value
Some implementation allow programmer assign integer value enumeration value even treat integer
Such Character string type store sequence character character set
Since character set include possible numeric string
However many language treat belonging different type numeric value
Character string type different subtypes according required character width
The original wide ASCII found limited superseded set encode wide variety alphabet symbol
Strings may either fixed size even programming language
They may also subtyped maximum size
Note string primitive language instance C may composed array character
Types based derived basic type explained
In language C type derived type
The main derived type data type whose value refers directly point another value stored elsewhere using
It primitive kind
In everyday term page number book could considered piece data refers another one
Pointers often stored format similar integer however attempting dereference look pointer whose value never valid memory address would cause program crash
To ameliorate potential problem pointer considered separate type type data point even underlying representation
Any type specify implementation
For instance abstract type implemented array contiguous block memory containing multiple value set memory block linked
Abstract type handled code know care underlying type contained
Programming agnostic concrete data type called
Arrays record also contain underlying type considered concrete specify content element laid memory
Examples include For convenience language may supply real world data type instance even language allows built primitive type
A associate type computed value
By examining flow value type system attempt prove occur
The type system question determines constitutes type error type system generally seek guarantee operation expecting certain kind value used value operation make sense
A may use static type value optimize storage need choice algorithm operation value
In many compiler data type example represented accord
They thus use value addition multiplication etc
The depth type constraint manner evaluation affect language
A may associate operation varying concrete algorithm type case
study type system although concrete type system programming language originate practical issue computer architecture compiler implementation language design
Type system may variously forth

Your browser old version Safari fully supported Quizlet
Please download newer web browser improve experience

Each Unplugged activity available download PDF format full instruction worksheet
Background section explain significance activity computer science answer provided problem
All need activity curiosity enthusiasm
There photo video showing activity action collected link useful resource
The activity primarily aimed five twelve age group mean restricted age range used teach older child adult little modification
We currently updating CS Unplugged content website The new website designed teacher includes unit plan lesson plan teaching video curriculum integration activity programming exercise plug Computer Science concept learnt unplugged
CS Unplugged project aka Department Fun Stuff
Looking something high school
Check
The CS Unplugged material shared

If using assistive technology need help accessing PDF another format please contact u via email address
Program specific task command online robot simulation Engage exercise understand object communicate one another Understand core aspect computer science use create solution understandable adaptable appropriate reusable
The design implementation computer program solve problem involve skill fundamental study computer science
This includes development analysis algorithm fundamental data structure use logic formal method
PDF PDF Ask counselor teacher See question ask

If help find course best fit
Talk counselor taking course online approved provider

âãÏÓ obj endobj obj stream hÞbbd endstream endobj startxref EOF obj stream hÞb B c I Ï ak ÏÁÄ ÒS ú endstream endobj obj endobj obj endobj obj stream v ò Oê


S K SÂZHõ ßö õÐÿëô
WÀgµ z Iàæ ü ó UÄÝ îñÿß ö Ø uýÂe À endstream endobj obj stream H B Ëã I u å Å ÔW f x ôn ï
endstream endobj obj stream jÚ oÀäåb ð Y è åÑ endstream endobj obj stream MÕ W


Learn without computer programming language
Includes exercise
As begin writing real code one first thing must familiarize variable close cousin constant
A variable according name something allows value vary
In programming use variable store data run program
A variable contrasted constant whose value allowed change
In programming use constant store information know never going change
Even though variable constant may sound different semantically reality quite similar
We start studying constant look variable variable easier understand understood constant
My name Erik I think fair say constant never ever change
The absolute zero temperature also constant never change either
The number second one hour constant well never change always second hour
A constant purpose computer programming consists two thing name value
The name clearly illustrate constant le
The value actual value constant example absolute zero number second hour
In programming book name constant uppercase letter
This allows u clearly identify constant soon run code thus able distinguish variable written using lower case letter
A constant created using const reserved word followed constant data type followed constant name finally followed sign value
Let create constant see look like
What would appropriate name constant example
Names variable constant always programmer suggestion For worry meaning int uint
They data type explain later
When picking name constant variable want expressive order reduce risk ambiguity also absolutely fine use abbreviation long name take whole screen
For example NBR nbr common abbreviation number one see lot
There another rule pick name name must consist alphanumerical character
well underscore
You use underscore separate word become legible
In programming term initialize two constant
When initialize constant variable two thing Constants useful want set value repeat many location inside program
If use constant rather wrote several different location program wherever wanted refer absolute zero ever wanted change different number would change multiple location rather one
According Murphy law saying anything go wrong go wrong
This usually recipe disaster often even forgot change one value could lead strange error run program
By declaring constant allows u easily change value constant time run program change code one location opposed many reduces risk introducing error code
Variables similar constant main difference constant change assigned value variable oftentimes
We define variable similar fashion define constant instead using reserved word const use var
Let introduce concept called declaration
Declaration thought initialization without giving variable value
When declare variable simply inform computer intention use variable program computer allocate memory
Sometimes may prefer give variable value immediately language typically older language actually forced declare variable beginning code regardless code intend use
In modern language best practice indicate preferable declare initialize variable close possible first use concept declaration significant anymore used
Still educational purpose let declare variable designed store current temperature That variable available use code change value many time like
In fact variable value often changed many time program sometimes even million time
Let say programming teacher asked write program simulates rolling dice time end sum roll present number screen
Your teacher instructed keep track progress using variable
How many variable might need
In case would need one variable keep track sum one keep track many time rolled dice
We might therefore start initializing variable start program yet rolled dice hence sum Remember initialize variable declare give type name well give value
We would also initialize variable yet rolled dice
Each time program roll dice would add number displayed dice variable
After first dice roll might second might third might etc
The point always keep track total sum roll name indicates
Also time rolled dice would increment stop running program reached
It noted program stop running variable constant respective value lost
That typically program print information screen otherwise output save result run program preserve result
Just like may able describe word English certain type personal name number etc variable constant computer programming language
For example English might classified number whereas Steve Elon Larry Mark might classified name
Computers use similar type require bit granularity
We therefore familiarize two common data type programming integer string
Integers simply number without decimal
Integer variable take negative positive value referred signed integer
Signed refers fact minus sign front
Integer variable take positive value referred unsigned integer
When initialized wrote We picked unsigned integer type written uint know dice roll sum never negative
The reason picking unsigned integer choose roll dice many many time unsigned integer contain twice large number signed integer
The explanation simple signed integer unsigned integer allocated space memory signed integer however half capacity minus sign half unsigned integer capacity minus sign
Whether declare integer variable signed unsigned depend circumstance although time probably end using signed integer give flexibility
When learning programming theory however dealing large number worth noting difference signed unsigned integer
In example must use signed integer written int since must allow negative cash flow
We initialize signed integer variable following way The bit smallest unit information stored computer memory
A bit take one two value
An integer variable stored memory using one bit typically bit modern computer
The bit allocated integer higher largest value
The general formula many value integer take n equal number bit
This mean integer take two different value integer take four different value integer take value etc
The string second data type get know
Strings programming basically said equal text plain English
Here example string note use keyword string indicate declaring string All variable string variable set equal text surrounded quote
The quote fact one requirement string
Without quote would string
Whether use double quote single quote considered equivalent purpose book Pete equivalent Pete
We know properly refer left sign learned called either variable constant
This begs obvious question far right sign
The answer literal
In example say Pete string literal integer literal
A literal anything written directly code example text number
Literals show many location code right sign
Both integer string would somewhat uninteresting perform operation
By operation point referring arithmetic integer
adding subtracting dividing multiplying string concatenation string
joining two string together
A example operation performed integer follow We start initializing two unsigned integer data type uint number minus sign front
We purchase ice cream reduce accordingly
Note simply applying basic algebra
Our variable value
Let say get lucky find street proceed donate half wallet charity Our variable value
Let turn attention string operation
In section discus concatenation
Concatenation act combining two string
For example concatenated two string Programming class would end Programming class
Here concatenate two string value Erik Linde
As see simply use sign want concatenate string
Observe empty space inserted two string

Explain plain English variable

Explain plain English constant

Declare integer variable named designed hold large strictly positive number please pick appropriate data type one type possible

Declare integer variable named designed hold negative positive number

Initialize constant named

Initialize four variable respectively
Then create new variable set equal sum variable
In end please also write value

Write ending value x

Write ending value z

Write ending value z

ADVANCED What mistake find code

Explain plain English string concatenation

Please write ending value variable result
ADVANCED Please initialize new string variable named set value equal without using number anywhere code
A variable stored value whose data might vary based upon used computer program

A constant stored value whose data vary regardless used computer program

Declare integer variable named designed hold large strictly positive number please pick appropriate data type one type possible
The uint data type appropriate number roll never negative
Because value always positive data type unsigned
If recall int data type include value negative sign signed positive unsigned

Declare integer variable named designed hold negative positive number

Initialize constant named

Initialize four variable respectively
Then create new variable set equal sum variable
In end please also write value
When substitute number variable equal

Write ending value x
When substitute number variable final value x x x

Write ending value z
When substitute number variable final value z z

Write ending value z
When substitute number variable final value z
The data type int store decimal data
We need calculate final value x asked find value variable z x
Paying attention critical skill programmer

ADVANCED What mistake find code
The following thing wrong code In fourth line var int x z x variable x already initialized first line
Variables initialized
In fifth line var int q q x declare variable use variable assignment value variable

String concatenation joining data string type order specified code

Please write ending value variable result When substitute assigned string data variable answer The fantastic
Note integer quote mark signaling string integer
Please initialize new string variable named set value equal without using number anywhere code var string It important include blank space ensure code print exactly example
former quant analyst entrepreneur invented world first used real recording programmed year dozen programming language
Erik learned programming
The history font reason people hate Comic Sans great way learn typography
Learn typography online practice basic typography skill
Design basic developer designer around say comic sans
Librarian Mary Glendening describes created library makerspace
Learn two people created fun online game teach HTML CSS
Apple new Swift programming language interesting language study learn plus opportunity watch new language evolve
A real life case study explore online security privacy law
How create secure password manage email account securely backup data
Interesting story computer science software programming technology
Learn without computer programming language
Includes exercise
Links bottom April article collected one place print share bookmark
Problems software programmer practice skill beginner advanced
How programmer use design pattern develop software
This website let anyone practice coding design skill
A magazine published time year magazine explores computer science software programming
It kid parent teacher adult want learn fun technology
Online access website content
A print subscription available US includes full online access value
Subscribers support independent research writing computer science programming
Subscribe price includes online access price includes online access price includes online access You past print issue magazine based availability
Community school library
Or
Arrives every two month new issue published
Owl Hill Media LLC ISSN online ISSN print

Computer Science Fundamentals Acccelerated hour course designed year old student
It taught week school club integrated unit longer technology class used intro computer science class
Students learn create computer program help learn collaborate others develop skill persist difficult task
They study programming concept computational thinking digital citizenship develop interactive game story share
The course teach foundational concept programming using drag drop block rather programming language JavaScript Python
Blocks easier way get started many top Universities today begin class block based programming
The Accelerated Course combine concept taught accelerated fashion designed older student
All lesson align relevant computer science standard well
They additionally reinforce concept skill taught subject area integrating national standard
Read
No worry
Most teacher never taught computer science
Try one course learn ahead student
Sign teacher see lesson plan join teacher forum get access resource need
We also offer We take blended learning approach teaching computer science mean student learn mix online activity listed unplugged activity traditional activity use computer listed Our online activity use Blockly visual programming language drag drop block together write code
Print send home
You teach course computer science unit one day per week throughout semester
Lesson time flexible
Running time
Students finish online lesson homework
Offline lesson hour built adjustment adding subtracting minute
Introduce computer science make exciting creative everyone
Show student feature Microsoft founder Bill Gates Facebook founder Mark Zuckerberg Black Eyed Peas founder NBA star Chris Bosh talking importance programming
Make use
Students help relying le teacher actually retain knowledge
Pair programming allows student see computer science social collaborative
In addition allows teach course even enough computer every student
The three rule pair programming school setting Your classroom likely wide range skill confidence level
Use flexibility course engage every student
Ask student finish tutorial early partner group still working
Encourage student explore solution think problem asking question
Teachers figure problem use good learning lesson class technology always work way want
Together community learner
When student come across technical difficulty public produce tutorial free service greater good spreading computer science education
Are ready try
Give whirl free

Rochester Institute Technology Department Computer Science give look different type problem challenge opportunity computer scientist face ever increasing technological world

The philosophy computer science concerned ontological methodological ethical issue arise within academic discipline computer science well practice software development
Thus philosophy computer science share philosophical goal philosophy mathematics many subfields philosophy science philosophy biology philosophy social science
The philosophy computer science also considers analysis computational computing system focus method involved design specification programming verification implementation testing system
The abstract nature computer program resulting complexity implemented artifact coupled technological ambition computer science ensures many conceptual question philosophy computer science analogue philosophy empirical science
Other issue characterize philosophy computer science
We shall concentrate three tightly related group topic form spine subject
First discus topic related ontological analysis computational artifact Sections
Second discus topic involved methodology epistemology software development Sections
Third discus ethical issue arising computer science practice Section
Applications computer science briefly considered section
Computational artifact underpin Facebook page control air traffic around world ensure surprised snow
They applied algebra car manufacturing laser surgery banking gastronomy astronomy astrology
Indeed hard find area life fundamentally changed enhanced application
But applied
What thing give substance application
The trite answer entity computer scientist construct artifact computer science
Much philosophy computer science concerned nature specification design construction
Folklore computational artifact fall two camp hardware software
Presumably software includes compiler natural language understanding system whereas laptop tablet hardware
But distinction drawn How delineate take software take hardware
A standard way identifies distinction one see entry hardware taken physical software abstract
Unfortunately seem quite right
As Moor point program normally seen software therefore characterization abstract may also physical device
In particular program identified sequence physical lever pull push
There different reaction observation
Some suggested distinction
In particular Suber argues hardware special case software Moor argues distinction ontologically insignificant
On hand Duncan insists important difference one made within ontological framework support finer distinction simple one Smith
Irmak also think software hardware different software abstract artifact apparently standard one temporal property
Whether distinction made substantial writer agree although program taken abstract thing may also cashed sequence physical operation
Consequently Colburn Moor insist program dual nature abstract guise physical one
Indeed conceded would seem apply majority computational artifact
On one hand seem abstract guise enables u reflect reason independently physical manifestation
This certainly applies abstract data type Cardelli Wegner
For example list abstract data type consists carrier type together operation support formation manipulation list
Even made explicit determined several axiom fix property one add element head list form new list remove head old list returned
Similarly abstract stack determined axiom govern operation
Using property one may reason list stack mathematical way independently concrete implementation
And one need
One design program without reasoning one construct correct program without reasoning program intended
If right computational artifact abstract guise separable physical realization implementation
Indeed requirement entertain abstract device support reasoning physical one unique computer science
On hand must physical implementation enables used thing physical world
This obviously true machine equally program Programmers write program control physical device
A program abstract machine physical realization little use practical device performing humanly intractable computation
For instance program monitor heart rate must underpinned physical device actually performs task
The computer scientist Dijkstra put follows
A programmer design algorithm intended mechanical execution intended control existing conceivable computer equipment
Dijkstra On duality view computer science abstract mathematical discipline independent physical world
To used thing must physical substance
And observation made clear link central notion philosophy technology Kroes Franssen et al
turn
Technical artifact include common object everyday life toilet paper clip tablet dog collar
They intentionally produced thing
This essential part
For example physical object accidentally carry arithmetic calculator
This teleological aspect distinguishes physical object led philosopher argue technical artifact dual nature fixed two set property Kroes Meijers Thomasson Vermaas Houkes functional property structural property
Functional property say artifact
For example kettle boiling water car transportation
On hand structural property pertain physical makeup
They include weight color size shape chemical constitution etc
For example might say car red white seat
The notion technical artifact help conceptualize organize central question issue philosophy computer science
We begin concept underpins much activity subject
Indeed initial expression functional property
In computer science artifact initially laid functional specification Sommerville Vliet
Indeed way final device whole series pair varying degree abstractness come existence
The activity specification implementation correctness raise collection overlapping conceptual question problem
Smith Turner Franssen et al

Specifications expressed variety way including ordinary vernacular
But trend computer science towards formal precise form expression
Indeed specialized language developed range designed primarily program specification VDM Jones Z Woodcock Davies B Abrial wide spectrum language UML Fowler specialized one aimed architectural description Rapide Luckham Darwin Distributed Software Engineering Wright Allen
They differ respect underlying ontology mean articulating requirement
Z based upon predicate logic set theory
It largely employed specification suite individual program module simple device
UML Fowler rich ontology wide variety expression mechanism
For example class language allows specification software pattern Gamma et al

In general architectural description language used precisely specify architecture software system Bass et al

Typically language employ ontology includes notion
In particular architectural description written Rapide Darwin Wright precise expression formalism defined using underlying mathematical semantics
But logical function expression language
On face expression formal language
However underlying ontology made explicit language reveals formal ontology may naturally cast type theory Turner
Under interpretation expression stipulative definition Gupta
As defines new abstract object within formal ontology system
However taken definition need specification anything may form part mathematical exploration
So definition act specification
Presumably case definition taken point beyond construction artifact
It intentional act giving governance definition property device system turn mere definition specification
The definition determines whether device system built correctly
It provides criterion correctness malfunction
From perspective role specification normative one
If one asks whether device work definition functioning specification tell u whether
Indeed without question would moot
At level abstraction see logical role specification always It provides criterion correctness malfunction
This perspective argued Turner
Indeed normative role taken part general theory function Kroes
It go without saying idealization
A specification fixed throughout design construction process
It may changed client change mind requirement
Furthermore may turn variety reason artifact impossible build
The underlying physical law may prohibit matter
There may also cost limitation prevent construction
Indeed underlying definition may logically absurd
In case current specification given
But central normative role specification remains intact
Unlike functional description specification taken prescribed advance artifact construction guide implementer
This might taken suggest substantive role specification provide method construction artifact
However method arrive artifact separate issue specification
The latter dictate method
There logical difference functional specification functional description logically provide criterion correctness
Software produced series layer decreasing level abstraction early layer specification artifact abstract Brooks Sommerville Irmak
For example specification written logical notation might taken specification linguistic program
In turn linguistic program associated semantics might taken specification physical device
In word admit abstract entity artifact
This characteristic feature software development Vliet
It distinguishes technology general
The introduction abstract intermediate artifact essential Brooks Sommerville
Without logically complex computational artifact would impossible construct
So happens duality thesis
It still hold good structural description necessarily provide physical property another abstract device
For example abstract stack act specification concrete one given structural description programming language array
But array physical thing abstract one
Its structural description use physical property abstract one axiom
Of course eventually array get implemented physical store
However perspective implementer attempting implement stack programming language array data type artifact abstract array programming language
Consequently duality thesis must generalized allow abstract artifact
Exactly physical intentional conceptualization world related remains vexing problem long history problem philosophy testifies
This situation also affect understanding technical artifact conceptual framework combine physical intentional functional aspect technical artifact still lacking
Kroes Meijers The literature technical artifact Kroes Meijers Thomasson Vermaas Houkes contains two main theory two conceptualization related theory intentional one
theory insist actual physical capacity determine function
Cummins theory functional analysis Cummins influential example theory
The underlying intuition without physical thing actual property artifact
The main criticism theory concern location correctness criterion
If physical device independent measure correctness Kroes The function fixed device actually
Causal role tendency let function coincide actual physical capacity structure function become almost identical
The main drawback approach account malfunctioning technical artifact artifact lack actual capacity performing intended function definition function
The intention associated artifact become irrelevant attributing function
Kroes This criticism flavor made Kripke discussion rule following
Intentional theory insist agent ascribe function artifact
Objects component posse function insofar contribute realization goal
Good example approach McLaughlin Searle
But exactly function get fixed desire agent
One interpretation function determined mental state agent designer user technical artifact
In crude form theory difficulty accounting impose constraint upon actual thing artifact
If function seen primarily pattern mental state hand exist speak head designer user artifact becomes somewhat mysterious function relates physical substrate particular artifact
Kroes For example mental state agent fix function device intended perform addition
This question posed rather different context Kripke
Given everything mental history compatible conclusion I meant plus conclusion I meant quus clear skeptical challenge really epistemological one
It purport show nothing mental history past even omniscient God would establish whether I meant plus quus
But appears follow fact constituted meant plus rather quus
Kripke Of course one might also insist artifact actually accord specification help expression function located mental state agent
This version intentional theory really special case causal theory physical device function located
However alternative interpretation intentional approach
On commentary Wittgenstein notion acting intentionally Wittgenstein David Pears suggests anyone act intentionally must know two thing
Firstly must know activity engaged
Secondly must know succeeded Pears
According perspective establishing correctness externally observable activity
The relation definition artifact manifest using definition canon correctness device
I must able justify reason thinking work If I asked work I must able justify reference abstract definition
The content function laid abstract definition intention take specification manifest using one
Broadly speaking implementation realization specification
Examples includes implementation UML specification Java implementation abstract algorithm program C implementation abstract data type Miranda implementation whole programming language
Moreover implementation often indirect process involves many stage physical bedrock involves pairing notion implementation
But implementation
Is one notion many
The detailed philosophical study implementation given Rapaport
He argues implementation involves two domain syntactic one abstraction semantic one implementation
Indeed suggests full explication notion requires third hidden term medium implementation implementation medium
Here semantic component abstraction medium implementation
He allows target medium abstract physical
This line claim artifact may abstract concrete
Superficially seems right
In example cited medium implementation actual thing implementation carved
Perhaps clearest example implementation programming language
Here syntactic domain actual language semantic one interpretation abstract machine medium interpretation
He suggests implement algorithm express computer programming language implement abstract data type express concrete one
Examples mention might include UML definition design pattern implemented Java Gamma et al

He argues intrinsic difference domain semantic syntactic
This determined asymmetry implementation mapping
For example physical computer process implement program play role semantics linguistic program linguistic program play role semantic domain algorithm
This asymmetry parallel connection
On face little cause dissension
It straightforward description actual use term implementation
However additional conceptual claim le clear
Apparently semantic domain name suggests always taken syntactic one close gap abstraction implementation implementation fill detail
This referential view semantics syntactic domain refers another domain provides meaning
Indeed strong tradition computer science take referential denotational semantics fundamental Stoy Milne Strachey Gordon
We shall examine claim later consider semantics programming language detail
For moment concerned central role kind semantics
One view semantics insists must normative
Although exact form normative constraint Glüer Wikforss Miller Wright debated good deal agreement minimal requirement semantic account must fix use expression correctly
The fact expression mean something implies whole set normative truth behavior expression namely use correct application certain object application
The normativity meaning turn word simply new name familiar fact regardless whether one think meaning term meaningful expression posse condition correct use
Kripke insight realize observation may converted condition adequacy theory determination meaning proposed candidate property virtue expression meaning must ground normativity ought possible read alleged meaning constituting property word correct use word
Boghossian On assumption minimal requirement satisfied adequate semantic theory implementation always even ever semantic interpretation
Are two notion odds
One standard instance implementation concern interpretation one language another
Here abstraction semantic domain language
Unfortunately provide criterion correctness unless already fixed semantics target language
While translating language taken implementation indeed paradigm case present criterion semantic interpretation
It satisfies correctness criterion target language independently given notion correctness
This may achieved informal mathematical way
But must end another uninterpreted language
So paradigm case implementation appear satisfy normative constraint required semantic interpretation
On hand Rapaport argues providing recursive definition implementation requires base case process must end uninterpreted language
However language interpreted mapping symbol either different symbol language
Next consider case abstraction language semantic medium set theory
This would case denotational semantics Stoy
This provide notion correctness
Our shared agreed understanding set theory provides
Unfortunately would normally taken implementation
Certainly would implementation something eventually physically realizable
Now consider case syntactic component abstract stack semantic one array
Here must ask mean say implementation correct
Does medium array fix correct use stack
It would seem The array provide criterion deciding whether correct axiom stack whether used correctly particular application
Rather stack providing correctness criterion implementation array
Instead axiom provide fundamental meaning construct
While array implementation stack provide notion correctness The cart horse interchanged
Finally suppose semantic domain physical machine syntactic one abstract one
The suggestion physical machine provides semantic interpretation abstract one
But semantic interpretation must provide u notion correctness malfunction compelling argument closely related causal theory function
This issue carefully examined section consider programming language semantics
Given semantic account language must supply correctness criterion term semantics bite serious obstacle view implementation semantic interpretation
There several phenomenon rolled one
If objection along right line relationship source target semantic interpretation
Of course one may counter arguing correctness requirement semantic theory
An alternative analysis implementation implicit Turner
Consider case data type finite set implemented data type list
Each structure governed simple axiom
The implementation represents finite set list union operation set list concatenation equality set extensional equality list etc
This mathematical relationship axiom set act specification artifact case implemented medium list
It would appear logical connection two specification artifact
The mapping direct simple correspondence list property implemented operation must satisfy given set axiom
In standard mathematical term list medium must provide mathematical model sense model theory Hodges set axiom
The case one language implemented another similar fleshed semantic definition two language
Finally consider case medium implementation physical device abstract stack implemented physical one
Once abstract stack must provide correctness criterion physical device
This happens practice
We check physical operation satisfy abstract demand given axiom stack
There issue adequacy notion correctness
We shall discus carefully consider computer science notion correctness
If analysis along right line implementation best described relation specification artifact
Implementation semantic interpretation indeed requires independent semantic account order formulate notion implementation correctness
So taken semantic interpretation computer science
How semantic account programming language given
What main conceptual issue surround semantic enterprise
There many different semantic candidate literature Gordon Gunter Fernández Milne Strachey
One important distinction center upon difference operational denotational semantics Turner White
Operational semantics began life Landin
In logical guise Fernández provides mechanism evaluation simplest form evaluation relation represented follows
P This express idea program converges given
The classical case reduction process occurs lambda calculus reduction given reduction rule calculus canonical form none reduction rule apply
The following simple example z This usually called semantics
It normally given term rule provide evaluation complex program term evaluation part
For example simple rule sequencing would take form These canonical normal form term programming language reduced given rule
But term language
For reason operational approach often said unsatisfactory
According criticism point interpretation process semantics formal language must mathematical
We apparently get quite long way expounding property language purely syntactic rule One language Lambda Calculus shall see presented solely formal system syntactic conversion rule But must remember working like manipulating idea talking
To solve real problem must give semantic interpretation
We must say example symbol represent integer
Stoy In contrast operational semantics taken
In particular even one canonical form relation relates syntactic object
This get talking
Unless constant language independently given mathematical meaning point process reach semantic bedrock reducing one syntactic object another yield normative semantics
This lead demand mathematical approach
Apparently programming language refer notation abstract mathematical object syntactic one Strachey McGettrick Stoy
In particular denotational semantics provides syntactic object one
Moreover generally compositional way Complex program denotation fixed term denotation syntactic part
These mathematical object might set theoretic category theoretic type theoretic
But whichever method chosen program taken refer abstract mathematical thing
However position relies clear distinction syntactic mathematical object
Mathematical theory set theory category theory axiomatic theory
And make mathematical
This implicit modern axiomatic treatment mathematics encouraged Bourbaki championed Hilbert
It worth pointing axiomatic account long precise support mathematical reasoning need formal
If one accepts necessary condition mathematical status rule operational account
would seem
Apparently program reduced canonical constant axiomatic definition
But Turner argues look wrong place axiomatization latter resides interpreting constant rule evaluation theory reduction given axiomatic relation
Given denotational operational semantics define matter axiomatically matter take define language formal mathematical theory
Unfortunately always agree The notion equality provided operational account although preserved denotational one often fine grained
This led special form denotational semantics based upon game Abramsky McCusker Abramsky et al

However clear practitioner take operational account fundamental witnessed fact seek devise denotational account agreement operational one
Not metaphysical difference set theoretic account operational one latter taken definitive one
This view programming language perspective theoretical computer science Programming language via operational definition mathematical theory computation
However programming language combinatorial nature
They working tool elegant mathematical theory hard explore mathematically
Does prevent mathematical theory
There little discussion issue literature Turner Strachey exception
On face Strachey see mathematical object pure simple
Turner little cautious argues actual programming language often complex explored mathematical theory contain core theory computation may conservatively extended full language
However Turner argues programming language even core mathematical object
He argues best conceptualized technical artifact
While axiomatic definition provides function also require implementation
In language technical artifact structural description language must say achieved It must spell construct language implemented
To illustrate simplest case consider assignment instruction
x A physical implementation might take following form
This description assignment physically realized
It physical description process evaluation
Of course complete description spell presumably actual machine made one assumes would part structural description underlying computer medium implementation
The task structural description describe process implementation family similarly structured physical machine
Building stipulate complex construct language implemented
For example execute command sequence could add physical stack arranges processing sequence
Of course matter seldom straightforward
Constructs iteration recursion require sophisticated treatment
Indeed interpretation compilation may involve many layer process
However end must interpretation medium physical machine
Turner concludes programming language complex package syntax semantics function together implementation structure
Some suggested physical implementation actually defines semantics language
Indeed common perspective philosophy computer science literature
We already seen Rapaport see implementation semantic interpretation
Fetzer observes program different semantic significance theorem
In particular asserts supposed posse semantic significance theorem seem lack
For sequence line compose program intended stand operation procedure performed machine whereas sequence line constitute proof
Fetzer This seems say physical property implementation contribute meaning program written language
Colburn explicit writes simple assignment statement A semantically ambiguous something like abstract account given physical one given physical memory location receives value physically computing time
Colburn The phrase physically computing seems imply physical machine actually semantically significant
actually determines contributes meaning assignment
Is taken imply fix assignment mean carry physical computation
However actual physical machine taken contribute way meaning construct language meaning dependent upon contingency physical device
In particular meaning simple assignment statement may well vary physical state device contingency nothing semantics language power cut
Under interpretation multiplication mean multiplication rather physical machine actually simulates multiplication
This criticism parallel causal theory function
The nature program subject good amount philosophical legal reflection
What kind thing
Are abstract perhaps mathematical symbolic object concrete physical thing
Indeed legal literature even contains suggestion program constitute new kind legal entity
The exact nature computer program difficult determine
On one hand related technological matter
On hand hardly compared usual type invention
They involve neither process physical nature physical product rather method organization administration
They thus reminiscent literary work even though addressed machine
Neither industrial property law copyright law traditional role seems appropriate instrument protection program protection designed used protect different type creation
The unique nature computer program led broad support creation sui generis legislation
Loewenheim This highlight curious legal status program
Indeed raise tricky ontological question nature program software appear abstract even mathematical object complex structure yet aimed physical device
In section examine philosophical issue arisen regarding nature program software
What content claim program mathematical object
In legal literature debate seems center notion program symbolic object formally manipulated Groklaw
Indeed branch theoretical computer science called formal language theory treat grammar object mathematical study Hopcroft Ullman
While give substance claim important sense program mathematical
This pertains semantics programming language taken axiomatic theory
This perspective locates program element theory computation Turner
While agreeing program abstract guise much philosophical literature Colburn Moor also posse concrete physical manifestation facilitates use physical machine
For example Moor observes It important remember computer program understood physical level well symbolic level
The programming early digital computer commonly done plugging wire throwing switch
Some analogue computer still programmed way
The resulting program clearly physical much part computer system part
Today digital machine usually store program internally speed execution program
A program form certainly physical part computer system
Moor The following recent origin explicitly articulates duality thesis claim software abstract physical guise
Many philosopher computer scientist share intuition software dual nature Moor Colburn
It appears software algorithm set instruction concrete object physical causal process
Irmak Anyone persuaded duality program obligation say something relationship two form existence
This major philosophical concern parallel question technical artifact general
One immediate suggestion program textual object mechanical process
The idea seems somehow textual object physically cause mechanical process
Colburn denies symbolic text causal effect physical manifestation thing disk effect
For software medium description text abstraction medium execution concrete implementation semiconductor
The duality unpacked way parallel found philosophy mind see entry physical device taken semantic interpretation abstract one
This close perspective Rapaport
However already alluded problem approach
A slightly different account found Fetzer
He suggests abstract program something like scientific theory A program seen theory physical In particular simple assignment statement semantics theory physical store behaves
If right program turn accurate description physical device implementation program must changed If theory enshrined program fit physical device changed
But seem happens practice
While program may changed instigated lack accord physical realization independent abstract semantics assignment
If correct abstract semantics appears theory concrete implementation
The alternative picture abstract program determined semantics provides function artifact physical artifact rather description provides structure
It function program expressed semantics fix physical implementation provides criterion correctness malfunction
Programs computational artifact abstract aspect somehow fix physical aspect enables cause physical thing happen
What difference programming specification
One suggestion specification tell u without actually saying
For instance following specification written VDM Jones
real real This specification square root function precondition input positive
It functional description say must without saying achieved
One way unpack difference term distinction
Programs imperative say achieve goal whereas specification declarative describe behavior intended program
Certainly imperative programming paradigm seems capture substantive difference
But appropriate
For example logic functional programming language Thompson obviously governed
The problem programming language evolved point way describing distinction marked style paradigm programming language
Indeed practice program written Haskell Thompson could act specification program written C Huss
A fundamental difference concern direction governance normative partner relationship submissive one
In case specification square root function artifact linguistic program
When program taken specification artifact next level code concrete implementation
This accord Rapaport notion asymmetry implementation
One crucial part software development process verification After computational artifact specified instantiated programming language implemented hardware developer involved activity evaluating whether artifact correct respect provided program specification
Correctness evaluation method roughly sorted two main group formal verification testing
Formal verification Monin involves mathematical proof correctness software testing Ammann Offutt rather implies running implemented program observing whether performed execution comply comply advanced specification behavior program
In many practical case formal method testing used together verification purpose see instance Callahan et al

Formal verification method include construction piece software verified set program specification
In see Van Leeuwen program represented term axiomatic system set rule inference program transition condition proof correctness provided deriving opportunely formalized specification set axiom
In Baier Katoen program represented term state transition system program property specification represented term temporal logic formula Kröger Merz proof correctness achieved search algorithm check whether temporal logic formula hold state transition system
Axiomatic system state transition system used evaluate whether execution represented computational artifact conform conform behavior prescribed specification understood represented system used predict explain future behavior system
In particular state transition system model checking compared methodological basis scientific model empirical science Angius Tamburrini
For instance Kripke Structures compliance Suppes definition scientific model structure establishing proper mapping relation model data collected mean experiment target empirical system see also entry
A Kripke Structure M R L model composed set state together set initial state total state transition relation R S function L S AP labeling state subset set atomic proposition
Kripke Structures state transition system utilized formal verification method often called system specification
They distinguished common specification also called property specification
The latter specify required behavioral property artifact encoded must instantiate former specify principle potential execution already encoded program thus allowing algorithmic check trace Clarke et al

In order achieve goal system specification considered structure set potential execution target computational artifact basis program code allowed state transition Angius
Indeed temporal logic formula checked hold hold modeled Kripke Structure represented program empirically tested behavioral property corresponding checked formula evaluate whether adequate representation target artifact
Accordingly property specification system specification differ also intentional stance Turner Property specification requirement program encoded system specification hypothetical description encoded program
The descriptive abductive character state transition system model checking additional essential feature putting state transition system par scientific model
The agile method software development make extensive use software testing evaluate dependability implemented computational artifact
Testing empirical process launching program observing execution evaluate whether comply comply supplied property specification
Philosophers computer scientist analyzed software testing technique light traditional methodological approach scientific discovery Snelting Gagliardi Northover et al
Angius questioned whether software test acknowledged evaluating correctness program Schiaffonati Verdicchio Schiaffonati Tedre
Dijkstra dictum Program testing used show presence bug never show absence Dijkstra introduces Popper principle computer science Snelting
Testing program advanced property specification given interval time may exhibit failure failure executed observing running program one conclude program correct
An incorrect execution might observed next system test
The reason tester launch program finite subset potential program input set finite interval time accordingly potential execution artifact tested empirically observed
For reason aim software testing detect program fault assure absence Ammann Offutt
A program falsifiable test reveal Northover et al

Given computational artifact property specification test akin scientific experiment observing system behavior try falsify hypothesis program correct respect interested specification
However one careful note methodological epistemological trait characterizing scientific experiment shared software test
A first methodological distinction recognized falsifying test lead revision artifact hypothesis case testing scientific hypothesis
This due difference intentional stance specification empirical hypothesis science Turner
Specifications requirement whose violation demand program revision program becomes correct instantiation specification
Accordingly notion scientific experiment traditionally examined philosophy empirical science need somehow stretched order applied software testing activity Schiaffonati
experiment characterizing experimental science find counterpart actual computer science practice
Indeed one excludes case wherein testing combined formal method experiment performed software engineer rather An experiment explorative aimed exploring realm possibility pertaining functioning artefact interaction environment absence proper theory theoretical background
Schiaffonati Software tester often theoretical control experiment perform exploration behavior artifact interacting user environment rather provides tester theoretical generalization observed behavior
Explorative experiment computer science also characterized fact program often tested environment wherein tester play role user
However essential feature experiment experimenter take part experiment carried
As result software testing activity closer experimental activity one find empirical science others rather define new typology experiment turn belong software development process
Five typology experiment distinguished process specifying implementing evaluating computing artifact Tedre
performed evaluate whether artifact interest performs function specified user stakeholder specific experiment carried evaluate isolated capability system given set initial condition performed real environment simulated one test similar artifact instantiating different way function evaluate instantiation better performs desired function real environment finally used appraise advanced hypothesis behavior testing artifact
Only controlled experiment par scientific experiment carried basis theoretical hypothesis evaluation
A software test considered successful miscomputations detected assuming computational artifact correct
The successive step find caused execution incorrect rather correct trace back fault familiarly named bug proceeding debugging phase testing system
In word observed miscomputation advanced
Efforts spent analyzing explanation computer science Piccinini Piccinini Craver Piccinini Angius Tamburrini forthcoming relation different model explanation elaborated philosophy science
In particular computational explanation understood specific kind Glennan Machamer et al
Bechtel Abrahamsen insofar computing process analyzed mechanism Piccinini see also entry
A mechanism defined term entity activity organized productive regular change start finish termination condition Machamer et al
word set component functional capability organization enabling bring empirical phenomenon
And mechanistic explanation phenomenon turn description mechanism brings phenomenon description involved component functional organization
A computing mechanism defined mechanism whose functional organization brings computational process
A computational process understood general term manipulation string leading input string output string mean operation intermediate string
Consider processor executing instruction
The involved process understood mechanism whose component state combinatory element processor instantiating function prescribed relevant hardware specification specification register Arithmetic Logic Unit etc
organized way capable carrying observed execution
Accordingly providing description mechanism word describing functional organization hardware component count advancing mechanist explanation observed computation explanation operational malfunction
For every type miscomputation defined corresponding mechanist explanation defined adequate level abstraction respect set specification characterizing level abstraction
Indeed abstract description mechanism still supply one mechanist explanation form mechanism defined truncated abstract description mechanism filled description known component part activity Machamer et al

For instance suppose common case machine miscomputes executing program containing syntax error called slip
The computing machine unable correctly implement functional requirement provided program specification
However explanatory purpose would redundant provide explanation occurred slip hardware level abstraction advancing detailed description hardware component functional organization
In case satisfactory explanation may consist showing program code correct instantiation provided program specification Angius Tamburrini forthcoming
In case order explain mechanistically occurred miscomputation may sufficient provide description incorrect program abstracting rest computing mechanism Piccinini Craver
Abstraction virtue software development specification also explanation computational artifact behavior
One earliest philosophical dispute computer science center upon nature program correctness
The overall dispute set motion two paper De Millo et al
Fetzer carried discussion forum ACM Ashenhurst Technical Correspondence
The pivotal issue derives duality program exactly claimed correct relative
Presumably program taken mathematical thing mathematical property
But seen technical artifact physical one
On face Hoare seems committed shall call correctness mathematical affair establishing program correct relative specification involves mathematical proof
Computer programming exact science property program consequence executing given environment principle found text program mean purely deductive reasoning
Hoare Consider specification square root function
What mean program satisfy
Presumably relative abstract semantics every program P carves relationship input output extension
The correctness condition insists relation satisfies specification This demand abstract program determined semantic interpretation language satisfies specification
The statement C mathematical assertion two abstract object principle correctness maybe established mathematically
A mathematical relationship kind surely Hoare mind term abstract guise program little disagree
However several concern
One complexity modern software challenge nature physical correctness challenge
Programmers always surrounded complexity avoid
Our application complex ambitious use computer ever sophisticated way
Programming complex large number conflicting objective programming project
If basic tool language design code program also complicated language becomes part problem rather part solution
Hoare Within appropriate mathematical framework proving correctness linguistic program relative specification theoretically possible
However real software complex
In case proving correctness might infeasible practically
One might attempt gain ground advocating classical correctness proof carried theorem prover least one employed somewhere process
However latter must proven correct
While may reduce correctness problem single program still mean left correctness problem large program
Moreover completely solve problem
For theoretical practical reason practice human involvement completely eliminated
In case proof constructed hand aid interactive proof system
Even rigorous proof correctness rarely forthcoming
One might require individual correctness proof checked computer rather human
But course need checking
Arkoudas Bringsjord argue since one correctness proof need checked namely proof checker possibility mistake significantly reduced
This much practical issue
However deeper conceptual one
Are proof program correctness genuine mathematical proof proof par standard mathematical one
De Millo et al
claim correctness proof unlike proof mathematics
The latter conceptually interesting compelling attract attention mathematician want study build upon
This argument parallel graspability argument made philosophy mathematics
Proofs long cumbersome uninteresting bearer kind certainty attributed standard mathematical proof
The nature knowledge obtained correctness proof said different knowledge may gleaned standard proof mathematics
In order taken proof must graspable
Indeed Wittgenstein would proof graspable act norm mathematical proof Wittgenstein
Mathematical proof proof Gödel incompleteness theorem also long complicated
But grasped
What render complicated proof transparent interesting graspable involves use modularity technique lemma use abstraction act mathematical creation
The introduction new concept enables proof constructed gradually thereby making proof
Mathematics progress inventing new mathematical concept facilitate construction proof would far complex even impossible without
Mathematics proof also involves abstraction creation new concept notation
In contrast formal correctness proof seem involve creation new concept notation
While computer science involve abstraction quite way
One way addressing complexity problem change nature game
The classical notion correctness link formal specification program formal semantic representation
It one end mathematical spectrum
However chain pairing positioned varying degree abstraction governed different notion correctness
For example approach connection UML specification Java program little type checking
The correctness criterion involve structural similarity identity Gamma et al

Here demand one infinite mathematical relation extensionally governed another
At higher level abstraction may connection structure
These still mathematical relationship
However method involve le work may even automatically verified establish much le
The notion program verification appears trade upon equivocation
Algorithms logical structure appropriate subject deductive verification
Programs causal model structure
The success program verification generally applicable completely reliable method guaranteeing program performance even theoretical possibility
Fetzer In fact issue alluded Hoare text Fetzer employ characterize Hoare mathematical stance correctness
When correctness program compiler hardware computer established mathematical certainty possible place great reliance result program predict property confidence limited reliability electronics
Hoare All seemed agreed computational system bottom physical system unpredictable behavior may arise causal connection
Indeed even theorem provers proof checker used result still yield empirical knowledge
A proof checker program running physical machine
It program implemented result depend upon physical computation
Consequently level shall need show physical machine operation meet specification
Testing verification seem yield empirical evidence
Indeed complexity program proving led programmer take physical testing evidence abstract program meet specification
Here assumption underlying implementation correct
But empirical evidence
In apparent contrast Burge argues knowledge computer proof taken knowledge
According Burge knowledge depend justification sensory experience
However allows knowledge may depend possibility sensory experience knowledge red color may even though knowledge requires sensory experience red order concept required even formulate idea
If correct close gap claim correctness proof redrawing boundary knowledge empirical assertion fall former category
For discussion nature use computer mathematical proof see Hales Harrison Tymoczko
Unfortunately practice often even get far
Generally software engineer construct classical correctness proof hand even automatically
Testing software specification suite test case best normally achieved
Of course never yield correctness mathematical sense
Test case never exhaustive Dijkstra
Furthermore hidden assumption underlying implementation correct best empirical method tell u something whole system
Indeed size state space system may large complex even direct testing infeasible
In practice construction mathematical model approximate behavior complex system best
The whole correctness debate carried forum ACM Ashenhurst Technical Correspondence put perspective program considered technical artifact
But leaf one topic When reached physical structure notion correctness operates
What physical device meet specification
What physical implementation
The starting point much contemporary analysis often referred
According simple mapping account physical system performs correct implementation abstract specification case mapping state ascribed physical description state defined abstract specification ii state transition physical state mirror state transition abstract state
Clause ii requires abstract state transition form system physical state map onto go physical state map onto
To illustrate simple mapping account amount consider example abstract machine employ instance machine two location two possible value
Subsequently four possible state
The computation table update operation may easily computed hand take form table pairing
For example sends state state
The simple mapping account demand physical system mapped onto abstract one way abstract state transition duplicated physical version
Unfortunately device easy come Almost anything enough thing play role physical state satisfy quite weak demand implementation
For example collection colored stone arranged update table taken implement table
The simple mapping account demand extensional agreement
It demand
This lead form pancomputationalism almost physical system implement computation
The danger pancomputationalism driven author
Chalmers Egan Sprevak attempt provide account implementation somehow restricts class possible interpretation
In particular certain author
Chalmers Copeland seek impose causal constraint interpretation
One suggestion replace material conditional counterfactual one
In contrast semantic account insists computation must associated semantic aspect specifies computation achieve Sprevak
For example physical device could interpreted AND gate OR gate
It would seem depend upon take definition device
Without way fixing artifact
The syntactic account demand physical state qualify syntactic may mapped onto computational description thereby qualifying computational state
If state lack syntactic structure computational
Of course remains seen count syntactic state
A good overview found Piccinini see also entry
Turner argues abstract structure physical structure linked agreement also intention take former normative governance latter
On account computation technical artifact whose function fixed abstract specification
This relationship neither theory physical object syntactic thing semantic interpretation
But ambiguity reflected debate argue semantic interpretation Sprevak argue Piccinini
Consider program
What function program
Is fixed semantic interpretation fixed specification
The ambiguity concern function program part programming language role part larger system
As program language fixed semantics language whole
However use program part larger system one need know
The function program part larger system given specification
When computation picked specification exactly program achieves specification irrelevant system designer
The specification act level abstraction employed system designer central
It follows said far correctness implemented program automatically establish computational artifact
Turing already distinguished
The former caused faulty implementation unable execute instruction language program
Errors conclusion characterize correct abstract machine nonetheless fail carry task supposed accomplish
This may happen case specification program correctly instantiating properly express user requirement program
In case machine implementing correct program still said miscompute
Turing distinction error functioning error conclusion expanded complete taxonomy miscomputations Fresco Primiero
The provided classification established basis many different level abstraction one may identify software development process
The functional specification level refers functional requirement computational artifact fulfill advanced user company software architect general stakeholder expressing constraint allowed behavior system realized
At design specification level requirement formally expressed term system design description detailing system state condition allowing transition among state
A design specification level specification turn instantiated proper algorithm usually using programming language algorithm design level
At algorithm implementation level algorithm implemented either software mean assembly language machine code instruction directly hardware latter case many special purpose machine
Finally algorithm execution level refers runtime execution
Errors
Conceptual error violate validity condition requiring consistency specification expressed propositional conjunctive normal form material error violate correctness requirement program respect set specification performable error arise physical constraint breached faulty implementing hardware
Performable error clearly emerge algorithm execution level correspond Turing error functioning also called
Conceptual material error may arise level abstraction functional specification level algorithm implementation level
Conceptual error engender material error induce
For instance mistake functional specification level consists inconsistent set requirement algorithm implementation level may correspond invalid hardware design choice logic gate connective
And failure occurring design specification level may due design deemed incomplete respect set functional requirement expressed functional specification level failure algorithm design level occurs frequent case program found fulfill specification
Beyond mistake failure operational malfunction source miscomputations algorithm implementation level
Slips may conceptual material error due respectively syntactic semantic flaw software implementation algorithm
Conceptual slip appear case syntactical rule programming language violated material slip involve violation semantic rule programming language variable used initialized
Abstract machine incapable error functioning
In sense truly say machine never make mistake
Errors conclusion arise meaning attached output signal machine
Turing On basis Turing remark distinction made technical artifact Floridi Fresco Primiero
Software misfunction ever dysfunction
An artifact token dysfunction able perform task designed artifact token misfunctions case able perform required task prone manifest undesired
Software development characterized level abstraction one find artifact production cycle
Typical artifact production involves functional specification level design specification level design technical artifact physically implemented
As seen software development also characterized algorithm implementation level designed algorithm instantiated language program hardware implementation
An artifact token dysfunction case physical implementation fails satisfy functional specification design specification
Dysfunctions apply single token since token dysfunction behave token type respect implemented function
For reason dysfunction apply functional specification level design specification level
On contrary artifact type token misfunction since misfunctions depend comparison token type able perform implemented function
Misfunction token usually depends dysfunction component misfunction type often due poor design
A software token dysfunction token given type implement function specified functional specification level design specification level way
This due fact function implemented algorithm implementation level performed algorithm execution level case correct implementation token behave correctly algorithm execution level provided operational malfunction occurs
For reason software token misfunction since equal implementation design specification algorithm implementation level
Only software type misfunction case poor design misfunctioning software type able correctly perform function may also produce undesired
Abstraction facilitates computer science
Without would progressed programming numerical algorithm software sophistication air traffic control system interactive proof development framework computer game
It manifested rich type structure contemporary programming specification language underpins design language mechanism abstraction
It driven invention notion polymorphism data abstraction class schema design pattern inheritance
But nature abstraction computer science
Is one form
Is notion find mathematics
Computer science abstraction take many different form
We shall attempt describe systematic way
However Goguen Goguen Burstall describes variety following example instance
One kind involves idea repeated code A program text possibly parameter given name
In Skemp term procedure brings new concept existence similarity structure common code
Formally abstraction lambda calculus see entry
The parameter might even type lead various mechanism polymorphism may formalized mathematical theory second order lambda calculus Hankin
Recursion early example operation mechanism abstraction It abstract away mechanism underlying machine
In turn facilitates solution complex problem without aware operation machine
For example recursion implemented device stack principle user recursion need know
The type structure programming specification language determines ontology language kind entity disposal representation problem solving
To large extent type determine level abstraction language
A rich set type constructor provides expressive system representation
Abstract recursive type common example
In design pattern Gamma et al
abstracted common structure found software system
Here abstraction mean interfacing It dissociates implementation object specification
For example abstract class act interface providing nothing type structure method
In addition mathematics Mitchelmore White computer science philosophy Floridi level abstraction
Abstractions mathematics piled upon search abstract concept
Likewise computer science deal design construction artifact complex process involving sequence artifact decreasing level abstractness one arrives actual physical device
In mathematics abstraction established physical device left behind
On account abstraction An abstract mathematical object take meaning system within defined
The constraint new object related consistent system operated without reference previous meaning
paramount
There leak
Some argue respect least abstraction computer science fundamentally different abstraction mathematics Colburn Shute
They claim computational abstraction must leave behind implementation trace
Information hidden destroyed
Any detail ignored one level abstraction programmer need worry precise location memory associated particular variable must ignored one lower level abstraction virtual machine handle memory allocation
At level computational artifact crucially depend upon existence implementation
For example even though class hide implementation detail method except abstract one must implementation
This keeping view computational artifact function structure Computational abstraction abstract guise implementation
However matter quite clean cut
While true abstraction mathematics generates object whose meaning defined relationship computer science
Abstract notion could normative function unless independent meaning
Moreover certain form resembles computer science implementation trace one must always able recover implementation information proof
Of course case classical mathematics
Moreover many would argue mathematical abstraction completely leave behind physical root
One aspect usefulness mathematics facility calculation made You need exchange coin calculate shopping bill simulate rocket journey without ever firing one
Increasingly powerful mathematical theory mention computer led steady gain efficiency reliability
But calculational facility would useless result predict reality
Predictions successful extent mathematical model appropriate aspect reality whether appropriate validated experience
Mitchelmore White How axiomatic method successful way
The answer large part axiom indeed capture meaningful correct pattern
There nothing prevent anyone writing arbitrary list postulate proceeding prove theorem
But chance theorem practical application slim indeed
Many fundamental mathematical object especially elementary one number operation clearly model reality
Later development combinatorics differential equation built fundamental idea also reflect reality even indirectly
Hence mathematics link back reality
Devlin If would appear difference abstraction computer science abstraction mathematics sharp
However appears important conceptual difference
If Turner right computer science abstract partner dominant one relationship It determines correctness
In case applied mathematics thing reversed The mathematics model world must model accurately
In computer science relationship abstraction source relationship mathematics one hand model theory hand reality
When thing go wrong blame laid different place artifact computer science model mathematics
The problem defining epistemological status computer science arose soon computer science became independent discipline distinct mathematics Tedre
Since clear computer science considered partially mathematical discipline partially scientific discipline partially engineering discipline insofar make use mathematical empirical engineering method Tedre Sutien
Nonetheless debate took place concerning whether computer science considered mathematical discipline branch engineering scientific discipline
Each epistemological characterization computer science based ontological methodological epistemological commitment assumption nature computational artifact method involved software development process kind reasoning thereby involved whether deductive inductive combination Eden
Holders mathematical nature computer science assume program mathematical entity one pursue purely deductive reasoning provided formal method theoretical computer science
As examined Dijkstra Hoare explicit stating program instruction acknowledged mathematical sentence formal semantics programming language given term axiomatic system Hoare
Provided program specification advanced formal language provided program code represented formal language formal semantics provide mean correctness
Accordingly knowledge behavior computational artifact acquired deductive reasoning involved mathematical proof correctness
The reason basis rationalist optimism Eden known computing system artifact system one predict behavior certainty Knuth
The original motivation mathematical analysis computation came mathematical logic
Its origin found Hilbert question concerning decidability predicate calculus Hilbert Ackermann could algorithm procedure deciding arbitrary sentence logic whether provable The
In order address question rigorous model informal concept effective mechanical method logic mathematics required
Providing first foremost mathematical endeavor one develop mathematical analogue informal notion
Although central concern theoretical computer science topic computability complexity covered existing entry
In growing complexity program increasing number application software system everyday context consequent booming market demand caused deviation interest computer scientist academic practitioner proof program correctness method managing complexity system evaluating reliability Wegner
Indeed providing formal specification modular program representing highly complex program formal language providing input system often embedded interacting user practically impossible
It turned providing mathematical proof correctness mostly unfeasible
Computer science research rather developed toward testing technique able provide statistical evaluation correctness often called reliability Littlewood Strigini term estimation distribution error program code
Computer science evaluates reliability computing system way civil engineering bridge aerospace engineering airplane DeMillo et al

In particular whereas empirical science examine exists computer science focus exist produce artifact therefore acknowledged engineering mathematics Hartmanis
Similarly whereas scientific inquiry involved discovering law concerning studied phenomenon one identify proper law computer science practice insofar latter rather involved phenomenon studied concerning computational artifact Brooks
Software testing reliability measuring technique nonetheless known incapability assuring absence code fault Dijkstra
In many case especially evaluation system controller airplane rocket nuclear plant etc
formal method empirical testing used evaluate correctness dependability computational artifact
Computer science accordingly understood scientific discipline make use deductive inductive probabilistic reasoning examine computational artifact Denning et al
Denning Tichy Colburn
Indeed examined verification testing method often jointly involved advancing hypothesis behavior implemented computing system providing evidence either algorithmically empirically support hypothesis
The thesis computer science methodological viewpoint par empirical science trace back Newell Perlis Simon letter Newell et al
dominated Wegner
In Turning award lecture Newell Simon argued Computer science empirical discipline
We would called experimental science like astronomy economics geology unique form observation experience fit narrow stereotype experimental method
Nonetheless experiment
Each new machine built experiment
Actually constructing machine pose question nature listen answer observing machine operation analyzing analytical measurement mean available
Newell Simon Since Newell Simon Turing award lecture clear computer science understood empirical science special sort related nature experiment computing
Indeed much current debate epistemological status computer science concern problem defining kind science Tedre particular nature experiment computer science Schiaffonati Verdicchio nature law theorem computing Hartmanis Rombach Seelish methodological relation computer science software engineering Gruner
Computer ethic analysis nature social impact computer technology corresponding formulation justification policy ethical use technology
Moor Computer ethic subfield information ethic concerning ethical social political issue arising widespread application information technology analysis computer ethic information ethic see entry
Computer ethic root Norbert Wiener book rapidly developed urgent prominent subfield applied ethic see Bynum overview computer ethic historical development
Interestingly Wiener book currently discussed topic computer ethic already put forward security responsibility programmer information network
Other issue include privacy social network software ownership mention
Computer ethic developed independent discipline distinct applied ethic philosophy computer science
In section two topic computer ethic analyzed since philosophy computer science provides rather different perspective
In particular ontology software system affect debate property right program methodology software development help clarifying distinguishing moral responsibility developer
One main ongoing debate computer ethic concern ethical social legal aspect software ownership deal problem whether programmer software company exert intellectual property right computational artifact ownership protected whether copyright patent whether extent copyright patent system allow reuse copying source code whether software free copyrighted
Three main argument advanced arguing property extended also intellectual entity restricted physical good Moore
The argument harks back Hegel Philosophy Right maintain product physical intellectual labor actualization laborer feeling character ability
Insofar feeling character ability owned laborer externalization intellectual product poem song computer program owned laborer Moore
Critics argument claim externalization author feeling ability transfer use right intellectual product property right intellectual product also protected modification may injury author reputation Hughes
The argument hold protecting computer program copyright patent system result increase innovation new product corresponding social utility Moore
Opponents approach intellectual property right challenge thesis copyrighting patenting software foster innovation production
First argue innovation directly supported governmental funding research project academic industry level mean reward model Shavell Ypersele
Secondly software copyright patent often allow monopoly company impedes rather foster innovation order keep monopoly
Most debate concerning intellectually property right software focus John Locke argument property provided Second Treatise Government Locke see also entry
Locke famously argued state nature natural good common mixing common good one labor one could claim ownership good
Locke philosophy basis liberalist tradition western country
One main difference material intellectual object latter duplicated especially software
Some philosopher argue Locke argument justify intellectual property right software others maintain contrary Locke philosophy rather support view
In Locke philosophy ownership material good justified though labor enough good left others Locke section owner benefit acquisition loss others Moore
Possession intellectual entity exclusive material one An intellectual object mathematical function program specification owned many people time whereas one owns car car owned one neighbor
Accordingly possession say language program constitute loss others Locke proviso enough good left others always satisfied
On hand according Locke ownership material good justifiable material entity finite feasible anybody posse whatever would like Kimppa
However intellectual object shared many people concurrently without deprivation Kinsella
Locke argument property coherent Free Software Foundation view software copyright software sold purchased buyer owns software whatever want including giving free copy modifying see Free Software Foundation
Indeed software intellectual good shared without loss owner
Problems arise reasoning software property protection either copyright patent law
In United States legislation protects author original work realm literature music drama visual art architectural work written depicted sculptured built etc
Copyright confers author receive permission former right duplicate reproduce perform sell share copy create work based upon protected original work
Ideas theory procedure method excluded copyright protection
safeguard inventor prohibiting others selling using producing invention
In particular utility patent include protection process machine manufacture design patent cover new original design manufacture plant patent concern production new variety plant
Copyrights give author right copy given Whereas idea copyrightable idea expressed text
According copyright appropriate tool protect software ownership Mooers
Whereas algorithm abstract mathematical idea copyrighted language program textual expression algorithm copyrighted
It objected claim simplistic take consideration proper ontology software Rapaport see
Indeed computational artifact examined many level abstraction hierarchy layer implementation layer one find upper hierarchy
The main problem understanding copyrightable whether function algorithm program machine implementation program
For instance algorithm considered expression function implement consequently copyrightable
Another difficulty concern copyright infringement
If program considered protected expression algorithm copyright infringement occurs case similar program code
However consider case two program behaviorally equivalent similar obtained implementing different program instantiating different algorithm
According Mooers approach software copyright infringement ascribed case Rapaport chapter see
Similar problem arise patent
Allen Newell opposed software patent available model computation inadequate defining patentable
He argued algorithm patentable reason mathematical statement physical law
Only process computing machine carrying process patentable
However degree abstraction hierarchy defining given artifact always allow algorithm distinguished program implementation This instance case algorithm directly executable machine
Computer science considered discipline Gotterbarn
When miscomputations displayed computational artifact interacting within environment developer often blame client able supply developer adequate specification appeal fact software testing assure absence error generally blame program complexity
In case computing practitioner accept responsibility
In fail recognize process developing software instantiating specification implementing program additionally providing service society
A distinction made Ladd
Negative responsibility avoids blame legal responsibility characterizes software developer pursue development artifact without considering potential effect influence artifact society
By contrast positive responsibility considers consequence developed machine may among user
A correct computing system may still harmful undesired behavior inhibited set specification provided client positive responsible programmer feel obliged retreat specification client case aware deficiency
Liability adequate regulate moral behavior computing practitioner Edgar ch

Indeed blaming someone breaking law requires causality condition condition intention
The causality condition involves identifying person caused illegal event murderer pulled trigger condition intention demand ascertaining intention person whether person pulled trigger intended kill victim
It difficult satisfy condition computing
No single person blamed causing computing artifact miscompute harm people
It follows definition miscomputation many people involved causal chain brings harmful miscomputation including client designer programmer engineer
It also difficult identify anyone among intended develop harmful artifact
In particular practitioner develops system subsequently used evil intention practitioner legally blamed however may responsible aware evil potentiality artifact
Moral responsibility computing professional include responsibility different group people Loui Miller
Responsibilities require implementing artifact correct reliable also used undesirable effect user
Responsibilities require taking advantage personal political secret information employer may share computing professional assigning given task
Responsibilities include fulfillment professional standard working team well respect colleague work
Finally responsibility require computational artifact aimed society construction potentially dangerous artifact affecting public welfare impeded professional even required employer like required encode program gain private information data system
These moral responsibility computing professional codified one software engineering code ethic
For instance Software Engineering Code Ethics Professional Practice see developed ACM IEEE Computer Society indicates eight principle clause expressing fulfill principle concrete situation Gotterbarn Miller Rogerson Applying code ethic straightforward may concrete situation one may find principle trade Gotterbarn Miller
Common case include time needed test given artifact assure error absence conflict client employer pressure satisfy market timing delicate case client employer request given computing system implemented conflict public safety health welfare
The eight principle listed according priority hierarchy code case provide guideline solve conflict among competing moral principle
In particular Public top list mean computing practitioner morally committed always refuse client employer request realize artifact may go public interest Gotterbarn Miller
A final issue worth mentioning approach Nissenbaum
Computational artifact fulfill moral value together common functional requirement
Beside correctness reliability safety computing system instantiate moral value including justice autonomy liberty trust privacy security friendship freedom comfort equality
For instance system satisfying equality biased program artifact certain individual group individual favor others instance flight reservation system list flight company alphabetic order shown favor company top list Friedman Nissenbaum
Whereas everybody would agree computing artifact satisfy moral value value design approach hold value treated par functional requirement software development Flanagan Howe Nissenbaum
This requires identifying set moral value given artifact fulfill taking consideration context artifact going used ii define value could formalized design specification subsequently implemented iii verifying whether implemented artifact fulfill fulfill specified value using common software testing technique particular internal testing among developer user testing restricted environment using prototype interview survey
We concentrated philosophical concern core discipline computer science
We said little nothing actual application subject application many would argue give discipline potency
Applications include technological one system run nuclear power station guide missile target scientific one involved computational biology
However matter useful impressive application specialized goal
Presumably goal computational biology biological cognitive science psychological
In contrast core philosophy computer science goal particular application
It concerned generic activity programming computer
However one application central often taken part core subject artificial intelligence
In contributed much development core including design programming language Lisp Prolog
Moreover raise many philosophical concern strong connection philosophy mind cognitive science
Indeed philosophical concern artificial intelligence much older pedigree Copeland Fetzer
There much material include entry devoted generic activity discipline
Fortunately already entry devoted role subject subject future entry philosophy artificial intelligence
View site another server The Stanford Encyclopedia Philosophy Center Study Language Information CSLI Stanford University Library Congress Catalog Data ISSN

In computing executed
It contains program code current activity
Depending OS process may made multiple execute instruction
A computer program passive collection process actual execution instruction
Several process may associated program example opening several instance program often mean one process executed
method allow multiple process share CPUs system resource
Each CPU core executes single time
However multitasking allows processor task executed without wait task finish
Depending operating system implementation switch could performed task perform operation task indicates switched hardware
A common form multitasking
method allow fast response interactive user application
In system performed rapidly make seem like multiple process executed simultaneously processor
This seeming execution multiple process simultaneously called
For security reliability modern prevent direct independent process providing strictly mediated controlled communication functionality
In general computer system process consists said following resource The operating system hold information active process data structure called
Any subset resource typically least processor state may associated process operating system support thread process
The operating system keep process separate allocates resource need le likely interfere cause system failure
The operating system may also provide mechanism enable process interact safe predictable way
A may switch process give appearance many process simultaneously though fact one process executing one time single unless CPU multiple core similar technology used
It usual associate single process main program child process parallel process behave like subroutine
A process said resource program memory one resource
However multiprocessing system process may run share program location memory process said program
Processes often called task operating system
The sense process task something take time opposed memory something take space
The description applies process managed operating system process defined
If process request something must wait blocked
When process eligible swapping disk transparent system region process memory may really disk time
Note even unused portion active executing program eligible swapping disk
All part executing program data physical memory associated process active
An operating system allows multitasking need process
Names state standardised similar functionality
When process communicate called communication IPC
Processes frequently need communicate instance shell pipeline output first process need pas second one process
It preferred way using interrupt
It even possible two process running different machine
The operating system OS may differ one process therefore mediator called needed
By early computer control software evolved example
Over time computer got faster still neither cheap fully utilized environment made possible necessary
Multiprogramming mean several program run
At first one program ran single processor result underlying computer architecture shared scarce limited hardware resource consequently concurrency nature
On later system multiple program may run concurrently
Programs consist sequence instruction processor
A single processor run one instruction time impossible run program time
A program might need input device large delay program might start slow operation sending output printer
This would lead processor idle unused
To keep processor busy time execution program halted operating system switch processor run another program
To user appear program run time hence term parallel
Shortly thereafter notion program expanded notion executing program context
The concept process born also became necessary invention
came somewhat later
However advent concept computer old multiprogramming gave way true multiprocessing later

The world never look
Vibrant visuals fun fact inspire budding scientist investigate surroundings inquisitive eye

