Imagine world Americans teach child math elementary school
Imagine child longer learn addition first grade subtraction second multiplication division third fourth
Imagine instead child make way high school without formal presentation mathematical concept
Now imagine student observant enough realize adult firm grasp mathematics much better life skill financial opportunity adult
If student curious enough enroll undergraduate math class imagine frustrating would whole arithmetic algebra statistic thrown first term
Would feel overwhelming
Would discouraged especially noticed several people class already seemed understand stuff fluently
Would difficult perceive subject one talent
This hypothetical may seem ridiculous truth similar situation played America today subject computer science
For many computer science introduced level first exposure come undergraduate classroom forced absorb basic building block computational thinking lightning speed begin fathom concept programming design engineering
To add blow handful student often boy actually skill area making newcomer feel deficient awkward behind
How rectify frustrating situation
It could easy giving formal language computational thinking concept beginning elementary school
Students given computer toddler order start creating technological foundation
It currently go looking grant put graphing calculator hand kindergartener arithmetic
We start age appropriate tool preferably tactile example associate formal language math skill learning
We show count two group object count total call addition
Why ca step sorting block smallest largest call algorithm
Why ca find solution work two different type problem call abstraction
I acknowledge fear calling curriculum computer science hold u back
Teachers overwhelmed number subject already squeeze day
After mathematics required educational assessment computer science
My challenge think world student working ask whether preparing child assessment preparing success
Computational thinking give student skill required solve problem even never explicitly taught answer
It encourages think thing creative way help navigate complex situation breaking manageable piece
Do skill seem fundamental successful adult
Is possible skill like could help student raise score required assessment
I invite educator everywhere take challenge number
Feed kid computer science one year without machine look score produce required exam
Post result healthy hearty discussion

Stack Exchange network consists Q A community including largest trusted online community developer learn share knowledge build career
I want understand operator precedence grammar physically mean
I confused various definition I read
I understand first terminal present derivation
On hand last terminal present derivation
In following example By understanding This turn fine problem TRAILING
Reason according production last terminal derivation last terminal derivation
Hence
Similarly
Unfortunately solution problem state I see last terminal derivation
Any derivation always end either
Similarly case
This question came site theoretical computer scientist researcher related field
Raphael Definition trailing Any terminal present last right sentential form sentence derived trailing
Trailing E E E T In trailing E T F using T Here trailing E T E using F E Here trailing E T F E T id using F id Here trailing id Hence trailing E So lesson must use right sentential form also sentence find trailing
Note E E T E T F E F id T id id F id id right sentential form E least one
However id id id sentence must use sentence find trailing
I think link great help find leading trailing every nonterminal involved given grammar
It made concept clear
By posting answer agree
asked viewed active site design logo Stack Exchange Inc user contribution licensed

This service advanced JavaScript available learn In execution computer program loop decision loop control executed loop body

There affiliation available Over million scientific document fingertip Springer International Publishing AG
Part

First course Computer Science
Introduces fundamental concept computer programming language emphasis analysis design
Topics include data type selection iteration instance variable method array file mechanic running testing debugging
MATH may taken concurrently BlueJ integrated Java programming environment All student expected attend class session regularly
If must miss test try inform instructor advance
In case missed class work due plausible reason illness accident limitted assistance offered
Unexcused absence result student totally responsible process
Reading problem assignment listed schedule class
Some problem worked class
There
They include material textbook lecture programming project
There requiring use BlueJ write run Java program
The project due date listed schedule class project description given separate page
All project must submitted class page course management system available
The CCSU honor code Academic Integrity effect class
It expected student conduct honest manner NEVER claim work
Violating policy result substantial grade penalty may lead expulsion University
You may find online
Please read carefully
The final grade based affected classroom participation conduct attendance
All grade availabe The letter grade calculated according following table Projects submitted due date graded
Projects submitted receive two letter grade
accepted due date
Students believe need course accommodation based impact disability medical condition emergency contact privately discus specific need
I need copy accommodation letter Student Disability Services order arrange class accommodation
Contact Student Disability Services Willard Hall already registered
Student Disability Services maintains confidential documentation disability assist coordinating reasonable accommodation faculty
Use multiple line comment beginning code write name address class section
Then line code inclding also bracket add comment explain meaning
You may also change message program print
Format code accordingly see Section White Space
Submit following file attachment Blackboard Learn Project Write method take array integer parameter computes print sum square element
Solution Write class called Employee contains three instance variable representing first name String type last name String type ID number int type constructor assigning value variable toString method return employee information
Write another class containing main method declares array object class Employee element
Initialize element Employee object created data entered keyboard using Scanner class
Then print array
Solution

Connecting decision maker dynamic network information people idea Bloomberg quickly accurately delivers business financial information news insight around world
Connecting decision maker dynamic network information people idea Bloomberg quickly accurately delivers business financial information news insight around world
Women technology say plenty opportunity start company raise capital though still studying computer science taking engineering role
To continue reading article must Bloomberg Professional Service Subscriber
If believe may received message error

When designing program often point decision must made
This decision known selection implemented programming using IF statement
An plan set designed solve problem
When designing algorithm three basic building block construct used Algorithms used help design perform particular task
You need JavaScript enabled view video clip
An explanation selection used algorithm programming Selection decision question
At point program may need ask question reached step one option available
Depending answer given program follow certain step ignore others
Many solution feature several choice decision
These decision lead different path program
These path represent result making choice
Without selection would possible include different path program solution create would realistic
Once algorithm designed perfected must translated code computer read
We create program algorithm
Algorithms consist step program consist
Selection implemented programming using statement

learn share knowledge build career
piece code warning Can please tell
Trailing whitespace space tab last character line newline
In posted question one extra space extra space See string end
There space line indentation also space
Use editor find end line backspace
Many modern text editor also automatically remove trailing whitespace end line example every time save file
Trailing whitespace Strip By posting answer agree
asked viewed active site design logo Stack Exchange Inc user contribution licensed

Last week friend wrote demographic race gender within Computer Science concentration Harvard
I currently studying Computer Science Stanford Winnie post got wondering anywhere online I could find data school
Particularly since I Hispanic I wanted see percentage Computer Science major Stanford belong demographic
Based experience going lecture office hour clear number low
Only Computer Science concentrators Harvard Hispanic
I tried demographic data Google I able find number I looking
I decided follow Winnie lead try hand collecting demographic data Computer Science major Stanford
I think important make demographic data readily available Stanford Computer Science Department among top world Stanford Computer Science student track record helping shape trajectory Silicon Valley tech industry whole
As people start realize cultural diversity bring many benefit student faculty employer alike may interested developing better understanding gender racial breakdown Computer Science major Stanford
Before I proceed explain I collected gender race demographic data post important note finding officially verified endorsed Stanford
This small personal project I decided undertake sheer curiosity nonetheless I hope others find insightful
I obtained current list Computer Science undergraduate major Stanford Computer Science Department online student directory
As posting Computer Science major total Class
The online student directory provide gender race data student I figure way collect organize information
I sorted student gender male female race White Asian Black Hispanic
The two gender category male female four race category White Asian Black Hispanic selected category commonly used industry diversity report
To allow comparison made Harvard data Winnie post I also note distinction South Asian East Asian
Similarly I counted Middle Eastern student family name origin west Iran inclusive White I counted South East Asians Vietnamese Pacific Islanders Filipinos East Asian
In case mixed race student I deduced either personal interaction student combination analyzing physical trait family name origin particular type mix I assigned half student mix one group remaining half
For example potentially mixed student I assigned White category Asian category
To collect gender race demographic data I went list student name name looked person Facebook searched origin family name using
Since many Computer Science student either friend friend friend people I taken class past I access lot information form Facebook profile picture status post hometown name addition I knew interacting individual school help infer student gender race
In inferring gender I limited information I could gather student Facebook profile picture
I used conventional least standard visual characteristic cisgender male cisgender female infer gender
In instance approach sufficient classify student male female I looked gender pronoun used timeline post help make final decision
In inferring race I tried make decision based combination person Facebook profile picture family name origin
Looking someone Facebook profile picture may enough case example many Hispanics Argentinian decent Caucasian feature
Looking origin someone family name may also suffice example many Filipinos family name may considered Hispanic origin
Taking profile picture family name origin account help accurately classify people
Someone Asian feature Hispanic family name popular Philippines instance accurately identified Filipino sorted East Asian category
There student profile picture profile picture show face picture particularly cute one Facebook account
For student I turn alternative source find profile picture Google Image Search LinkedIn profile
A student required additional level analysis beyond profile picture family name origin
For student I looked information hometown language used status post picture family member parent grandparent help infer race
Overall I best remain consistent I made sorting decision classify student accurately possible
The following finding accompanied graph I created Google Sheets using data I collected If look gender overall see many male Computer Science major female one
There male student compared female student
Considering Stanford undergraduate student body male female Computer gender ratio severely imbalanced
And yet male female ratio still improvement Computer Science major woman yes year ago
How ratio compare major tech company Silicon Valley
Well imbalanced Stanford ratio situation tech giant Google Facebook even severe
For instance June Google revealed tech employee woman
Similarly June Facebook revealed tech workforce consisted woman
What I wonder number least little bit closer Stanford
After Stanford one largest largest feeder school company
This discrepancy appears suggest woman receiving Computer Science degree either tech company hiring woman choosing work elsewhere
Whatever reason may whether established hiring system failing identify existing female talent whether company falling short providing environment woman feel welcome something definitely demand attention
Focusing race see Stanford Computer Science major Asian followed White Hispanic Black
For reference Stanford undergraduate student body whole Asian White Hispanic Black
This add remaining portion consists Native American Native Hawaiian Pacific Islander student declined state race ethnicity International student ask International listed race ethnicity simply statistic presented
While figure Hispanic Black Computer Science major Stanford slightly better average peer institution respectively according conducted finding part consistent widely known fact Silicon Valley workforce primarily made White Asian men
In sense finding surprising
What surprising Hispanic Black rate Stanford much higher rate demographic major tech company
At Google tech workforce Hispanic Black Facebook tech workforce Hispanic Black
Just observed analyzing data woman appears significant disparity number Hispanics Blacks pursuing Computer Science degree number Hispanics Blacks getting hired choosing stay major Silicon Valley tech company
I found ratio best among Asians followed Blacks Whites Hispanics
It interesting see among two best ratio group Asians underrepresented group Blacks among two worst ratio also group Whites underrepresented group Hispanics
I would expected two racial group also two best gender ratio
Anyway break Asian category East Asian South Asian see South Asians female male edge East Asians female male term gender balance
Looking breakdown race within gender see number Asian White male roughly equal male Asian East Asian South Asian male White
Trailing behind male Hispanic Black
Shifting focus female Computer Science major see Asians far outnumber group
Of female astounding Asian consisting East Asian South Asian White Black Hispanic
The large number Asian female majoring Computer Science Stanford contributes significantly Asians racial group overall
If interested seeing raw number demographic group stack check chart
Once data reflects dominance Asian White male Computer Science field accompanied significantly lower number woman Hispanics Blacks Computer Science major Stanford Asian Male White Male Asian Female White Female Hispanic Male Black Male Hispanic Female Black Female
While race gender demographic data I obtained Computer Science major Stanford appears slightly balanced compared peer institution number still reflect notable disparity field along racial gender line
Moreover disparity grows even larger start looking demographic data major Silicon Valley tech company Google Facebook
Also worth pointing I record data student I browsing Facebook profile searching race gender data I noticed many Hispanic Black Computer Science major international student
It would interesting see percentage Hispanic Black Computer Science major Stanford United States compared come abroad
Furthermore college student I think would also valuable obtain data many Computer Science major college student come family
I strong feeling number low hypothesis difficult verify given family financial information educational information publicly available
I hope learned something new informal study I encourage student school also follow Winnie lead collect race gender demographic data Computer Science major respective home institution
The data better equipped bring positive change tech industry
Gathering data report creating graph typing everything Medium took one day work I think Stanford probably near upper bound term number Computer Science major single school something done pretty easily potential valuable insightful
If decide conduct demographic study school want share others social medium use CSAtMySchool hashtag easy find
I think would really interesting see race gender demographic compare across different school
Lastly passive bystander educate educate others play active role bringing positive change
Encourage sister brother study Computer Science continue support throughout journey
Start community
If professor make offhand joke comparing programming language C one student may struggling parental drug abuse home
If work tech company assume female coworker met Hispanic coworker facility repair guy Black coworker security guard
If interning tech company summer employee looking impactful break work playing ping pong Xbox try work recruiting team organize outreach event connect woman underrepresented minority opportunity exist company interning Google summer instance I helping organize visit making stride area
There still lot work done build welcoming inclusive tech community going take combined effort u student professor intern employee employer alike
By clapping le signal u story really stand
Computer Science Economics Product Manager
All view
See I

method solution problem depends solution smaller instance problem opposed
The approach applied many type problem one central idea computer science
The power recursion evidently lie possibility defining infinite set object finite statement
In manner infinite number computation described finite recursive program even program contains explicit repetition
Most computer programming language support recursion allowing call within program text
Some define looping construct rely solely recursion repeatedly call code
prof language computationally powerful Turing complete imperative language meaning solve kind problem imperative language even without iterative control structure
A common tactic divide problem type original solve combine result
This often referred combined store result solving avoid solving repeatedly incurring extra computation time referred
A recursive function definition one meaning input function produce result without recurring one meaning input program recurs call
For example function defined recursively equation
Neither equation constitutes complete definition first base case second recursive case
Because base case break chain recursion sometimes also called terminating case
The job recursive case seen breaking complex input simpler one
In properly designed recursive function recursive call input problem must simplified way eventually base case must reached
Functions intended terminate normal example exception
Neglecting write base case testing incorrectly cause
For function one computes obvious base case implied input data one may add number term added series example provide criterion establishes base case
Such example naturally treated successive term output partial sum converted recursion using indexing parameter say compute th term th partial sum
Many must process generate arbitrarily large quantity
Recursion one technique representing data whose exact size know programmer specify data definition
There two type definition inductive definition
An inductively defined recursive data definition one specifies construct instance data
For example defined inductively using syntax The code specifies list string either empty structure contains string list string
The definition permit construction list finite number string
Another example inductive positive Similarly recursive often used model structure programming language
Language designer often express grammar syntax grammar simple language arithmetic expression multiplication addition This say expression either number product two expression sum two expression
By recursively referring expression second third line grammar permit arbitrarily complex arithmetic expression one product sum operation single expression
A coinductive data definition one specifies operation may performed piece data typically coinductive definition used data structure infinite size
A coinductive definition infinite string given informally might look like This similar inductive definition list string difference definition specifies access content data via function content may whereas inductive definition specifies create structure may created
related coinduction used compute particular instance possibly infinite object
As programming technique used often context programming language preferable recursion desired size precision program output unknown
In case program requires definition infinitely large infinitely precise result mechanism taking finite portion result
The problem computing first n one solved corecursive program

Recursion contains single known recursion contains multiple known
Standard example single recursion include list traversal linear search computing factorial function standard example multiple recursion include search
Single recursion often much efficient multiple recursion generally replaced iterative computation running linear time requiring constant space
Multiple recursion contrast may require exponential time space fundamentally recursive able replaced iteration without explicit stack
Multiple recursion sometimes converted single recursion desired thence iteration
For example computing Fibonacci sequence naively multiple iteration value requires two previous value computed single recursion passing two successive value parameter
This naturally framed corecursion building initial value tracking step two successive value see
A sophisticated example using allows iterative tree traversal rather multiple recursion
Most basic example recursion example presented demonstrate function call
recursion occurs function called another function called either directly indirectly
For example call direct recursion call call indirect recursion Chains three function possible example function call function function call function function call function
Indirect recursion also called symmetric term though simply difference emphasis different notion
That call call turn call point view alone indirectly recursing point view alone indirectly recursing point view mutually recursing
Similarly set three function call called set mutually recursive function
Recursion usually done explicitly calling function name
However recursion also done via implicitly calling function based current context particularly useful known
Some author classify recursion either structural generative
The distinction related recursive procedure get data work process data Functions consume structured data typically decompose argument immediate structural component process component
If one immediate component belongs class data input function recursive
For reason refer function STRUCTURALLY RECURSIVE FUNCTIONS
Thus defining characteristic structurally recursive function argument recursive call content field original input
Structural recursion includes nearly tree traversal including XML processing binary tree creation search etc
By considering algebraic structure natural number natural number either zero successor natural number function factorial may also regarded structural recursion
alternative Many recursive algorithm generate entirely new piece data given data recur
refers kind generative recursion
Examples generative recursion include
This distinction important function
A classic example recursive procedure function used calculate The function also written This evaluation recurrence relation demonstrates computation would performed evaluating pseudocode This factorial function also described without using recursion making use typical looping construct found imperative programming language The imperative code equivalent mathematical definition using accumulator variable The definition translates straightforwardly example iteration implemented recursively
The computes two integer written recursively
Function definition greatest common divisor express The recursive program equivalent iterative algorithm computation shown show step evaluation would performed language eliminates tail call
Below version algorithm using explicit iteration suitable language eliminate tail call
By maintaining state entirely variable using looping construct program avoids making recursive call growing call stack
The iterative algorithm requires temporary variable even given knowledge Euclidean algorithm difficult understand process simple inspection although two algorithm similar step
The Towers Hanoi mathematical puzzle whose solution illustrates recursion
There three peg hold stack disk different diameter
A larger disk may never stacked top smaller
Starting disk one peg must moved another peg one time
What smallest number step move stack
Example implementation Although recursive function explicit solution Tower Hanoi sequence reduced explicit formula
The algorithm method searching single element cutting array half recursive pas
The trick pick midpoint near center array compare data point data searched responding one three possible condition data found midpoint data midpoint greater data searched data midpoint le data searched
Recursion used algorithm pas new array created cutting old one half
The binary search procedure called recursively time new smaller array
Typically array size adjusted manipulating beginning ending index
The algorithm exhibit logarithmic order growth essentially divide problem domain half pas
Example implementation binary search C An important application recursion computer science defining dynamic data structure
Recursive data structure dynamically grow theoretically infinite size response runtime requirement contrast size static array must set compile time
Recursive algorithm particularly appropriate underlying problem data treated defined recursive term
The example section illustrate known structural recursion
This term refers fact recursive procedure acting data defined recursively
As long programmer derives template data definition function employ structural recursion
That recursion function body consume immediate piece given compound value
Below C definition linked list node structure
Notice especially node defined term
The next element pointer another effectively creating list type
Because data structure defined recursively procedure operate implemented naturally recursive procedure
The procedure defined walk list list empty list pointer value NULL
For node print data element integer
In C implementation list remains unchanged procedure
Below simple definition binary tree node
Like node linked list defined term recursively
There two pointer left pointing left right pointing right
Operations tree implemented using recursion
Note two pointer left right tree operation may require two recursive call At two recursive call made given call defined
The example illustrates binary tree
A special case binary tree data element node order
Since number file may vary practical way traverse thus enumerate content
Traversing filesystem similar therefore concept behind tree traversal applicable traversing filesystem
More specifically code would example filesystem
This code blend line least somewhat recursion
It essentially recursive implementation best way traverse
It also example direct indirect recursion
The method rtraverse purely direct example method traverse indirect call rtraverse
This example need base case scenario due fact always fixed number file directory given filesystem
In actual implementation rather pure recursive function single check base case otherwise recursive step number modification may made purpose clarity efficiency
These include On basis elegance wrapper function generally approved base case frowned upon particularly academia
Hybrid algorithm often used efficiency reduce overhead recursion small case recursion special case
A function directly called recurse instead calling separate auxiliary function actually recursion
Wrapper function used validate parameter recursive function skip perform initialization allocate memory initialize variable particularly auxiliary variable level recursion partial computation handle exception error
In language support auxiliary function nested inside wrapper function use shared scope
In absence nested function auxiliary function instead separate function possible private called directly information shared wrapper function using
base case also known consists checking base case making recursive call checking next call base case instead calling checking base case
particularly done efficiency reason avoid overhead function call immediately return
Note since base case already checked immediately recursive step need checked separately one need use wrapper function case overall recursion start base case
For example factorial function properly base case
immediately returning
may miss mitigated wrapper function
primarily concern many base case encountered Null pointer tree linear number function call hence significant saving algorithm illustrated search
tree corresponds considering leaf node child base case rather considering empty node base case
If single base case computing factorial provides saving
Conceptually considered either base case recursive step checking base case recursion considered different base case one step removed standard base case complex recursive step namely check valid recurse considering leaf node rather Null node base case tree
Because complicated flow compared clear separation base case recursive step standard recursion often considered poor style particularly academia
A basic example given DFS binary tree see section standard recursive discussion
The standard recursive algorithm DFS In instead In term standard step move base case check recursive step
Alternatively considered different form base case recursive step respectively
Note requires wrapper function handle case tree empty root node Null
In case height node Null pointer child leaf cut number function call half worst case
In C standard recursive algorithm may implemented The algorithm may implemented Note use Boolean AND operator recursive call made node valid
Note first term AND pointer node second term bool overall expression evaluates bool
This common idiom recursive
This addition evaluation Boolean OR operator check right child left child fails
In fact entire function replaced single Boolean expression return statement legibility suffers benefit efficiency
Recursive algorithm often inefficient small data due overhead repeated function call return
For reason efficient implementation recursive algorithm often start recursive algorithm switch different algorithm input becomes small
An important example often implemented switching data sufficiently small
Hybrid recursive algorithm often refined derived hybrid merge sort
Recursion iteration equally expressive recursion replaced iteration explicit stack iteration replaced tail recursion
Which approach preferable depends problem consideration language used
In iteration preferred particularly simple recursion avoids overhead function call call stack management recursion generally used multiple recursion
By contrast recursion preferred tail recursion optimization leading little overhead sometimes explicit iteration available
Compare template compute x defined x f n x x For imperative language overhead define function functional language overhead define accumulator variable x
For example factorial function may implemented iteratively C assigning loop index variable accumulator variable rather passing argument returning value recursion Most use today allow direct specification recursive function procedure
When function called program keep track various instance function often using although method may used
Every recursive function transformed iterative function replacing recursive call simulating call stack explicitly managed program
Conversely iterative function procedure evaluated computer see expressed term recursive function iterative control construct routinely rewritten recursive form
However practice rewriting depends feature language
notable mainstream language function call including may cause stack allocation would occur use looping construct language working iterative program rewritten recursive form may although tail call elimination may feature covered language specification different implementation language may differ tail call elimination capability
In language favor iterative looping construct usually significant time space cost associated recursive program due overhead required manage stack relative slowness function call function call particularly typically fast operation difference usually le noticeable
As concrete example difference performance recursive iterative implementation factorial example depends highly compiler used
In language looping construct preferred iterative version may much several order magnitude faster recursive one
In functional language overall time difference two implementation may negligible fact cost multiplying larger number first rather smaller number iterative version given happens may overwhelm time saved choosing iteration
In programming language maximum size much le space available recursive algorithm tend require stack space iterative algorithm
Consequently language sometimes place limit depth recursion avoid stack overflow one language
Note caveat regarding special case
Multiply recursive problem inherently recursive prior state need track
One example contrast list traversal linear search list singly recursive thus naturally iterative
Other example include function
All algorithm implemented iteratively help explicit programmer effort involved managing stack complexity resulting program arguably outweigh advantage iterative solution
function function recursive call hence build deferred operation
For example gcd function shown
In contrast factorial function also recursive call tail position build deferred multiplication operation must performed final recursive call completes
With treat call rather function call function gcd execute using constant space
Thus program essentially iterative equivalent using imperative language control structure like loop
The significance tail recursion making call tail call caller return position need saved recursive call return branch directly previously saved return position
Therefore language recognize property tail call tail recursion save space time
In simple case function calling instruction placed recursive call executed per recursion instruction placed recursive call
The latter executed repeatedly maximum recursion reached
Consider example The recursive algorithm expressed
They usually simplified single term
If function form Then thus represents number recursive call level recursion represents factor smaller input next level recursion
number piece divide problem represents work function independent recursion
partitioning recombining level recursion

þÿ þÿÿÿ ðÓ Ð øl þxÚí Ø H

