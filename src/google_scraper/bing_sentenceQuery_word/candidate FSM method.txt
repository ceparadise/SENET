A plural simply mathematical
It exactly one finite number given time
The FSM change one state another response external change one state another called
An FSM defined list state initial state condition transition
The behavior state machine observed many device modern society perform predetermined sequence action depending sequence event presented
Examples dispense product proper combination coin deposited whose sequence stop determined floor requested rider change sequence car waiting require input combination number proper order
The finite state machine le computational power model computation
The computational power distinction mean computational task Turing machine FSM
This FSM limited number state
FSMs studied general field
An example simple mechanism modeled state machine
A turnstile used control access subway amusement park ride gate three rotating arm waist height one across entryway
Initially arm locked blocking entry preventing patron passing
Depositing coin slot turnstile unlocks arm allowing single customer push
After customer pass arm locked another coin inserted
Considered state machine turnstile two possible state
There two possible input affect state putting coin slot pushing arm
In locked state pushing arm effect matter many time input given stay locked state
Putting coin giving machine input shift state
In unlocked state putting additional coin effect giving additional input change state
However customer pushing arm giving input shift state back
The turnstile state machine represented showing possible state transition based upon input given machine output resulting input The turnstile state machine also represented called
Each state represented
Edges show transition one state another
Each arrow labeled input trigger transition
An input cause change state input state represented circular arrow returning original state
The arrow node black dot indicates initial state
A description status system waiting execute
A transition set action executed condition fulfilled event received
For example using audio system listen radio system radio state receiving next stimulus result moving next station
When system CD state next stimulus result moving next track
Identical stimulus trigger different action depending current state
In machine representation also possible associate action state Several type used
The common representation shown combination current state
B input
Y show next state
C
The complete action information directly described table added using footnote
A FSM definition including full action information possible using see also
The notation describing state machine
overcome limitation traditional finite state machine retaining main benefit
UML state machine introduce new concept extending notion
UML state machine characteristic
They support depend state system triggering Mealy machine well associated state rather transition Moore machine
The standard includes graphical symbol describe action transition SDL embeds basic data type called Abstract Data Types action language execution semantic order make finite state machine executable
There large number variant represent FSM one figure
In addition use modeling reactive system presented finite state machine significant many different area including
Finite state machine class automaton studied
In computer science finite state machine widely used modeling application behavior design study computation language
Finite state machine subdivided transducer acceptor classifier sequencer
also called produce binary output indicating whether received input accepted
Each state FSM either accepting accepting
Once input received current state accepting state input accepted otherwise rejected
As rule input character action used
The example figure show finite state machine accepts string nice
In FSM accepting state state
A possibly infinite set symbol sequence aka
formal language called Finite State Machine accepts exactly set
For example set binary string even number zero regular language cf
Fig
set string whose length prime number
A machine could also described defining language would contain every string accepted machine none rejected one language accepted machine
By definition language accepted FSMs language regular FSM accepts
The problem determining language accepted given finite state acceptor instance generalization graph edge weighted element arbitrary
The start state also accepting state case automaton accepts empty string
An example accepting state appears DFA detects whether input string contains even number
also start state indicates state even number input
S therefore accepting state
This machine finish accept state binary string contains even number including binary string containing
Examples string accepted DFA etc
A generalization finite state machine similar acceptor produce single output termination two terminal state
generate output based given input state using action
They used control application field
In control application two type distinguished subclass acceptor transducer type
They produce one sequence seen output sequence acceptor transducer output
A distinction automaton
In deterministic automaton every state exactly one transition possible input
In automaton input lead one one transition given state
The algorithm transform nondeterministic automaton usually complex deterministic automaton identical functionality
A finite state machine one state called combinatorial FSM
It allows action upon transition state
This concept useful case number finite state machine required work together convenient consider purely combinatorial part form FSM suit design tool
There set semantics available represent state machine
For example tool modeling designing logic embedded controller
They combine usually one current state flow graph one language resulting different formalism set semantics
These chart like Harel original state machine support hierarchically nested state state action transition action
In accordance general classification following formal definition found For deterministic FSMs conventional allow
defined every combination
If FSM state next symbol defined announce error
reject input
This useful definition general state machine le useful transforming machine
Some algorithm default form may require total function
A finite state machine computational power restricted head may perform read operation always move left right
That formal language accepted finite state machine accepted kind restricted Turing machine vice versa
If output function function state input alphabet definition corresponds modelled
If output function depends state definition corresponds modelled
A machine output function known
If disregard first output symbol Moore machine readily converted Mealy machine setting output function every Mealy transition
labeling every edge output symbol given destination Moore state
The converse transformation le straightforward Mealy machine state may different output label incoming transition edge
Every state need split multiple Moore machine state one every incident output symbol
Optimizing FSM mean finding machine minimum number state performs function
The fastest known algorithm
Other technique include using
Additionally acyclic FSAs minimized linear time
In FSM may built using
More specifically hardware implementation requires store state variable block determines state transition second block combinational logic determines output FSM
One classic hardware implementation
In output directly connected state minimizing time delay output
Through state machine may optimized minimize power consumption
The following concept commonly used build software application finite state machine Finite automaton often used programming language compiler
Such frontend may comprise several finite state machine implement parser
Starting sequence character lexical analyzer build sequence language token reserved word literal identifier parser build syntax tree
The lexical analyzer parser handle regular part programming language grammar
Finite process also known

exciting theoretical branch computer science
It established root Century mathematician began developing theoretically literally machine imitated certain feature man completing calculation quickly reliably
The word closely related word automation denotes automatic process carrying production specific process
Simply stated automaton theory deal logic computation respect simple machine referred
Through automaton computer scientist able understand machine compute function solve problem importantly mean function defined question described
abstract model machine perform computation input moving series state configuration
At state computation transition function determines next configuration basis finite portion present configuration
As result computation reach accepting configuration accepts input
The general powerful automaton
The automaton theory develop method computer scientist describe analyze dynamic behavior discrete system signal sampled periodically
The behavior discrete system determined way system constructed storage combinational element
Characteristics machine include There The family automaton interpreted hierarchal form machine simplest automaton Turing machine complex
The focus project machine Turing machine
A Turing machine machine yet inverse true
The exciting history finite automaton became branch computer science illustrates wide range application
The first people consider concept machine included team biologist psychologist mathematician engineer first computer scientist
They shared common interest model human thought process whether brain computer
Warren McCulloch Walter Pitts two neurophysiologists first present description finite automaton
Their paper entitled A Logical Calculus Immanent Nervous Activity made significant contribution study neural network theory theory automaton theory computation cybernetics
Later two computer scientist
Mealy Moore generalized theory much powerful machine separate paper published
The machine Mealy machine Moore machine named recognition work
While Mealy machine determines output current state input Moore machine output based upon current state alone
An automaton state set Q contains number element called FSMs abstract machine consisting set state set Q set input event set I set output event set Z state transition function
The state transition function take current state input event return new set output event next state
Therefore seen function map ordered sequence input event corresponding sequence set output event
State transition function I Z machine ideal computation model small amount memory maintain memory
This mathematical model machine reach finite number state transition state
Its main application mathematical problem analysis
also used purpose aside general computation recognize regular language
An elevator mechanism remember previous request service current floor direction motion collection satisfied request service
Therefore given moment time elevator operated would defined following mathematical term A formally defined Q I Z W From mathematical interpretation said machine contains finite number state
Each state accepts finite number input state rule describe action machine ever input represented state transition mapping function
At time input may cause machine change state
For every input symbol exactly one transition state
In addition set accepted nondeterministic finite automaton also accepted deterministic finite automaton
Having finite constant amount memory internal state FSM carry structure
They easily represented using state diagram seen The state diagram illustrates operation automaton
States represented graph transition arrow corresponding input output denoted symbol
The arrow entering left q show q initial state machine
Moves involve change state indicated arrow along side individual node
These arrow known
There exist divided three main category Applications machine found variety subject
They operate language finite number word standard case infinite number word Rabin automaton Bïrche automaton various type tree hardware circuit input state output bit vector fixed size
The simplest automaton used computation finite automaton
It compute primitive function therefore adequate computation model
In addition machine inability generalize computation hinders power
The following example illustrate difference machine Turing machine Imagine Modern CPU
Every bit machine two state
Therefore finite number possible state
In addition considering part computer CPU interacts finite number possible input computer mouse keyboard hard disk different slot card etc
As result one conclude CPU modeled machine
Now consider computer
Although every bit machine two different state infinite number interaction within computer whole
It becomes exceeding difficult model working computer within constraint machine
However infinite powerful automaton would capable carrying task
computer scientist Alan Turing conceived first infinite unbounded model computation Turing machine solve
The Turing machine thought finite automaton control unit equipped infinite storage memory
Its memory consists infinite number array cell
Turing machine essentially abstract model computer execution storage developed order provide precise mathematical definition algorithm mechanical procedure
While automaton called model consists finite number state function finite string input output infinite automaton accessory either stack tape moved right left meet demand made machine
A formally defined set Q Σ Γ δ q B F Therefore major difference Turing machine finite automaton FSM lie fact Turing machine capable changing symbol tape simulating computer execution storage
For reason said Turing Machine power model computation calculated today modern computer

This preview shown page This preview shown page This preview shown page This preview shown page Introduction String Matching In lecture look string matching algorithm
b b b aa b b b b b b b aa b b b b b b b aa b b b b b b ba b b ba b b b aa b b b b b b ba b b ba b b b aa b b b b b b b aa b b b b b b ba b b ba In simple term want find occurrence string P larger string T
Clifford Harrow Page Software Engineering Slide Introduction I This seems like simple problem I The real problem one efficiency time space
I Doing many matching operation demand better naive approach
I High performance string matching vital many application I In web search database I We might search stored text keyword supplied user
I In Unix tool like grep sed I We need match regular expression input text stream
I In DNA matching I We match small DNA strand large corpus I Here many situation inexact matching also required Clifford Harrow Page Software Engineering Slide Introduction I We look four different exact string matching method I The naive obvious method
I The KMP algorithm
I The BMH algorithm
I The Finite State Machine FSM algorithm
I To compare different approach count number comparison I Performance mostly determined many comparison performed
I It therefore good candidate computational step
I To make absolutely sure check linearly related number comparison case
Clifford Harrow Page Software Engineering Slide Naive Method Algorithm I The basic idea I Match pattern string input string character character
I When mismatch shift whole input string one character relation pattern string start beginning
Strings P T n P


T


OUTPUT Clifford Harrow Page Software Engineering Slide Naive Method Example I Consider matching example array set T P b b ab b b b b b b ab b b b b b b b b b b b b ab b b b b b b b b b ab b b b b b b ab b b b b b b ab b b b b b b b b b b b b b I The underlined character match fails
I This performs total comparison find match
Clifford Harrow Page Software Engineering Slide Naive Method Summary I However consider worst case example I The input text aaa b total length I That n character followed one I The pattern aaa b total length I That character followed one I Using naive method match character mismatch restart first character I The mismatch occurs n time
I The match succeeds position n
I The total number comparison therefore n Θ nm
Clifford Harrow Page Software Engineering Slide Algorithm I When mismatch occurs index j naive method found j character match
I We take advantage deciding restart match I Imagine case string ababb mismatch character
I The matched text consists abab

unknown
I We restart match comparing character
I In short since know pattern beforehand work restart match
Clifford Harrow Page Software Engineering Slide Example I Consider matching example array set T P b b b aa b b b b b b b aa b b b b b b b aa b b b b b b ba b b ba b b b aa b b b b b b ba b b ba b b b aa b b b b b b b aa b b b b b b ba b b ba I Note shifting pattern either one distance precomputed prefix table
I Now perform total comparison
Clifford Harrow Page Software Engineering Slide Algorithm I The basic idea I First compute prefix table pattern tell u restart
I Then run KMP matcher use table mismatch occurs
What prefix table
The prefix table tell u far shift pattern along turn without missing match
Let P ababb
I The j th element prefix table P length longest prefix P


j also proper suffix P


j I P
There proper suffix first element prefix table I P ab
The proper suffix ab b prefix ab
Therefore second element prefix table I P aba
The proper suffices ba prefix aba third element prefix table
I The fourth fifth element prefix table therefore
Clifford Harrow Page Software Engineering Slide Algorithm The overall algorithm structure follows
T P P j n P T j Π
Skip using prefix table P T j
Next character match OUTPUT j
Pattern shift j Π
Look next match Clifford Harrow Page Software Engineering Slide Example I Let look example
T P I We calculate prefix table Π
b b b aa b b b b b b b aa b b b b b b b aa b b b b b b ba b b ba b b b aa b b b b b b ba b b ba b b b aa b b b b b b b aa b b b b b b ba b b ba I We use prefix table shift pattern required
Clifford Harrow Page Software Engineering Slide Running Time What largest number comparison KMP take pattern length text length n
Recall current index pattern j current index text
I Consider variable
I At beginning main loop I At termination I At iteration main loop strictly increase I At iteration loop strictly increase I Therefore maximum number comparison KMP I KMP take O n time assuming prefix table available Clifford Harrow Page Software Engineering Slide Prefix Table We compute prefix table comparing pattern
I For j compute length longest prefix P


j also proper suffix P


j
I This done cleverly O time b b b aa b b aa b baa b b bab b b ba ba b baba P Π j P P j Π P P j Π j Π Clifford Harrow Page Software Engineering Slide Summary I The KMP algorithm never need input text I This advantage text streamed rather array since maintain buffer stream
I The worst case performance O n comparison
I However improve much average case I Best performance alphabet small since mean higher chance repeated substring input pattern
Clifford Harrow Page Software Engineering Slide Algorithm I The main goal BMH simplicity improving weakness KMP large alphabet I Use alphabet make pattern input text skip large distance
I Make comparison starting right pattern rather left find rightmost mismatch
I The trick consider alphabet text defined I The alphabet set character



I We build table Γ tell u rightmost occurrence letter pattern
I For Ci pattern string set Γ position rightmost occurrence Ci pattern
Clifford Harrow Page Software Engineering Slide Example I Say want search pattern lean following string c r p e n e e c el n n g l e n I The character n p mismatch also p appear anywhere pattern move way past p restart c r p e n e e c el n n g l e n l e n l e n I The character n e mismatch e occurs pattern line I Only comparison needed example
KMP would need c r p e n e e c el n n g l e n Clifford Harrow Page Software Engineering Slide Summary I In worst case better naive matching I The Horspool heuristic fast practice I The method work best little repetition within input text
I The worst case O nm comparison
Consider p
I The best case O comparison
I Fast practice
Clifford Harrow Page Software Engineering Slide Finite State Machines I The previous method quite efficient also quite simplistic I What happens want consider regular expression
I This exactly problem faced parser compiler I One defines syntactic token regular expression value ident I The goal match pattern input text
I Using KMP method problematic I table done since pattern finite
Clifford Harrow Page Software Engineering Slide Finite State Machines I We solve problem using fourth type matching method
I A Finite State Machine FSM formally defined following part
Note FSM fact Turing Machine without tape I Q finite set state
I Q start state
I A Q set accepting state
I Σ input alphabet
I δ function Q Σ Q call transition function
I More simply graph moving node mean consuming input character
Clifford Harrow Page Software Engineering Slide Finite State Machines I Here example basic regular expression one repetition zero repetition
character
I The hard bit constructing automaton
I However done implementing matching algorithm quite easy
T P δ P n δ T accepting state OUTPUT Clifford Harrow Page Software Engineering Slide Finite State Machines I Consider example FSM construction I Take input string character time move along edge match character
I The empty edge denotes start state double circled node accepting state signal match
b b b b b b b b b b I Question How move state string aababaaba
Clifford Harrow Page Software Engineering Slide Comparison I To get idea algorithm best compare complexity Matching Naive Θ nm Θ Θ n O Θ nm Finite State Machine O Θ n I Some point note analysis I For match short string naive method bad
I The method require may also require extra memory
Clifford Harrow Page Software Engineering Slide Conclusions I String matching sounded like trivial problem I Hopefully see little naive method
I You see coursework perform string matching without performing comparison
I As general rule selecting right algorithm done follows I If need consider complex matching like regular expression use FSM method
I Otherwise choice depends alphabet size I For large alphabet like natural language use method
I For small alphabet use method
I However even complicated method
I See http long list example code
Clifford Harrow Page Software Engineering Slide Further Reading I Introduction Algorithms
Cormen
Leiserson
Rivest Stein
MIT ISBN
I Chapter String Matching
Clifford Harrow Page Software Engineering Slide comment posted one write first
This preview shown page Share Embed document website

âãÏÓ obj R R R endobj obj R R R R endobj obj stream Lõ kkÛuoÆ e Xgk âãÜß Å Uù l c FOÃ Ê ðÛ µR åÓ ÞJ

The Internet Things IoT environment object animal people assigned unique identifier given ability transfer data network without requiring interaction
In general state machine device store status something given time operate input change status cause action output take place given change
A basically state machine machine input change one state may cause action take place
Each computer data register store state
The memory program loaded store state boot program initial state
The operating system state run begin initial state may change begin handle input
Thus moment time computer system seen complex set state program state machine
In practice however state machine used develop describe specific device program interaction
To summarize state machine described In book Bran Selic Garth Gullekson view state machine A finite state machine one limited finite number possible state
An infinite state machine conceived practical
A finite state machine used development tool approaching solving problem formal way describing solution later developer system maintainer
There number way show state machine simple table graphically animated illustration
By submitting agree receive email TechTarget partner
If reside outside United States consent personal data transferred processed United States
An internal audit IA organizational initiative monitor analyze business operation order determine
Pure risk also called absolute risk category threat beyond human control one possible outcome Risk assessment identification hazard could negatively impact organization ability conduct business
A polymorphic virus harmful destructive intrusive type malware change making difficult
According Federal Bureau Investigation cyberterrorism politically motivated attack Antimalware type software program designed prevent detect remove malicious software malware An accountable care organization ACO association hospital healthcare provider insurer party
Patient engagement ideal healthcare situation people motivated involved A personal health record PHR collection information documented maintained individual Business continuity disaster recovery BCDR closely related practice describe organization preparation A business continuity plan BCP document consists critical information organization need continue A call tree sometimes referred phone tree telecommunication chain notifying specific individual
Cloud object storage format storing unstructured data cloud
A parallel file system software component designed store data across multiple networked server facilitate flash storage us interface connect storage directly CPU A hybrid hard disk drive electromechanical spinning hard disk contains amount NAND Flash memory
All Rights Reserved

In store certain value without particular repeated value
It computer implementation concept
Unlike type rather retrieving specific element set one typically test value membership set
Some set data structure designed change constructed
Static set allow query operation element checking whether given value set enumerating value arbitrary order
Other variant called allow also insertion deletion element set
An abstract data structure collection aggregate data
The data may booleans number character data structure
If one considers structure yielded packaging indexing four basic data structure In view content set bunch isolated data item elementary bunch element
Whereas set element bunch element
Further structuring may achieved considering multiplicity element set become multisets bunch become hyperbunches homogeneity record set field necessarily type
In set generally identified characteristic function accordingly set value type may denoted
Subtypes subset may modeled may replaced
The characteristic function set defined In theory many abstract data structure viewed set structure additional operation additional imposed standard operation
For example abstract viewed set structure operation return element smallest value
One may define operation Typical operation may provided static set structure Dynamic set structure typically add Some set structure may allow operation
The cost operation depend implementation possibly also particular value stored set order inserted
There many operation principle defined term Other operation defined set element special type Sets implemented using various provide different time space various operation
Some implementation designed improve efficiency specialized operation
Implementations described general use typically strive optimize operation
A simple implementation use ignoring order element taking care avoid repeated value
This simple inefficient operation like set membership element deletion require scanning entire list
Sets often instead implemented using efficient data structure particularly various flavor
As set interpreted kind map indicator function set commonly implemented way partial map case value pair sentinel value like namely sorted set O log n operation unsorted set O O n operation
A sorted linear hash table may used provide deterministically ordered set
Further language support map set set implemented term map
For example common convert array hash whose value sentinel value use set Other popular method include
In particular subset integer implemented efficiently also support efficient union intersection operation
A implement set probabilistically using compact representation risking small chance false positive query
The Boolean set operation implemented term elementary operation specialized algorithm may yield lower asymptotic time bound
If set implemented sorted list example naive algorithm take time proportional length time length whereas variant job time proportional
Moreover specialized set data structure optimized one operation expense others
One earliest language support set many language include whether core language
As noted previous section language directly support set support set emulated using associative array using element key using dummy value value ignored
A generalization notion set similar set allows repeated equal value duplicate
This used two distinct sens either equal value considered simply counted equal value considered stored distinct item
For example given list people name age year one could construct multiset age simply count number people given age
Alternatively one construct multiset people two people considered equivalent age may different people different name case pair name age must stored selecting given age give people given age
Formally possible object computer science considered equal still distinct another relation
Some type multiset implementation store distinct equal object separate item data structure others collapse one version first one encountered keep positive integer count multiplicity element
As set multisets naturally implemented using hash table tree yield different performance characteristic
The set bag type T given expression bag If multiset one considers equal item identical simply count multiset interpreted function input domain integer generalizing identification set indicator function
In case multiset counting sense may generalized allow negative value Python
Where multiset data structure available workaround use regular set override equality predicate item always return equal distinct object however still able store multiple occurrence object use mapping value integer multiplicity able distinguish equal element
Typical operation bag In table mathematical set multiset depending presence unicity constraint column turn candidate key
allows selection row relational table operation general yield multiset unless keyword used force row different selection includes primary candidate key
In keyword used transform subquery collection expression general select used another general query transforms subquery used another query assignment column appropriate collection type

âãÏÓ obj endobj obj stream hÞbbd Véy ÑÕ KÀâé endstream endobj startxref EOF obj stream ZÑ ý Óñ endstream endobj obj JFqµ ï endobj obj endobj obj endobj obj stream ìë È Yp BJm DGl E uã éêÑ ó
wßµ ÿ É H îèò w ìg íÆS fe TC hÎX endstream endobj obj stream Æ ÝÍµBÁFe òo X Xº wó Ù ER
endstream endobj obj stream ÔÍe j
oÁeC
endstream endobj obj stream Ü Só O l endstream endobj obj stream V è endstream endobj obj stream Rµ µ X O A Gm õ ñMRòlí endstream endobj obj stream J zÅ JVìñj V
ò rjgÏÊ úµ endstream endobj obj stream ÓA À Þ c p ÿôäì ë endstream endobj obj stream ýEîOÒe
Ö
Á þã Ùf C
oìù û ÜÏ endstream endobj obj stream
HñE
áä ùcJ
çl dP If QtÌù endstream endobj obj stream Ó B áI Í Æóôå µB Å
KäÀSã Öed endstream endobj obj stream ÞUýúoKÁùG Àf Ç endstream endobj obj stream Âë µ x øTLâ He KZ ß Îd Ñùi XofÌ ª
Ë Ú Ä I ÚH ÌÑbknÄ U ø ûÂêú û ç f

âãÏÓ obj endobj xref n n n n n n n n n n n n n n n n n n n n n n n n trailer startxref EOF obj stream xÚb endstream endobj obj stream endstream endobj obj R endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj stream l ãÐ ñ òY È ÿeÐî endstream endobj obj stream HÁÁ Èàææn
xä âf xÖ Ù Bâ Óê
endstream endobj obj R endobj obj stream w H Ë ºùÛ dÓ endstream endobj obj stream
Þ Rx û ÆÂqÙE Ë Æ O ëÄ é D endstream endobj obj stream
ÖÎ Æ óºðQ endstream endobj obj stream A v Zyö Æ
ú Â sª Qb DVGvP ZJ ÑR ÿm õ ðã endstream endobj obj stream È îçwIÉRÓ ZÕuê ù
ñ rÅ ß endstream endobj obj stream î ÍÁ Ù C endstream endobj obj stream QÊj é A ÈtÕ ë åÒ MA ï ÂG
F H H YKî ß Ç æEæ Î á ÿ ö n ê W òýÈÉ Ç ûL Y TB uCõ íÔöÊö nßLÝlÜ u ºµ ýºþKþÜÿmÿÿ endstream endobj obj endobj obj endobj obj stream çWô Ù Ws ÊdÓ z íæ Öþ Ca iXè Ý å K ª
ò É O bN ÚÓê VuBé G bæ N
ËXuJãFf LçäÆÙ çh äYBob ÙvXdéé Wÿj à Æ Íü Pþc c xñfïÄ ÙâT eÎ S M S ÉTÈ U Ø ÜY M

These day understanding use computer helpful many area life work school socializing
Computer science field study take computing next level understanding use computer computer work make new thing efficiently
More people learning computer science turning knowledge lucrative career field like business health care engineering many others
If interested learning computer science hobby career several way get started
How How How How How How How How How How Categories In language Español Русский Português Italiano Tiếng Việt Thanks author creating page read time
Navjeet Gill Oct Sagar Pathak Oct QiaoZhi Fu Sep Yogesh Mehare Jun Mohamad Hafiz Sep Anonymous Jul How How How How Help answer question

