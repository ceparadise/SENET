learn share knowledge build career
I developing iPhone app us network
The iPhone communicate server via HTTP request work WiFi
I currently use send async request server get response I soon move work library I understood kind apps apps requires internet connection I must
use Reachability
After searching web looking Apple Reachability example code still understand basic stuff In apple example detect network issue host WiFi present user appropriate message
Is main purpose Reachability show user message
Or I need use practical scenario
For example request failed I need use Reachability somehow resend request
Is common use instance app launch listen network change
Or I check reachability status every network request
Is enough use I need also
I understood apple reject apps use network use Reachability
What method I implement
Will enough notify user currently internet
network helper utility class used get various information connection status What main purpose Reachability
Is main purpose Reachability show user message
No course main usage either test internet connectivity get notified connectivity change For example NSURLConnaction request failed I need use Reachability somehow resend request
Yes could use example normally project save request made remote server let say want download file When file fails download process due internet connection save array failed downloads When reachability informs internet connection restored iterate array start download process What proper use Reachability
It depends pattern need
Is common use one instance app launch listen network change
Yes project instance download manager class class alive instance Reachability Or I check reachability status every network request
You without multiple instance Reachability class normally method inside download manager tell using Reachability connection
Is enough use reachabilityWithHostName I need also reachabilityForLocalWiFi reachabilityForInternetConnection
Am sure one normally test connectivity mean dont differentiate wifi however implementation info wifi could useful example project Apple made
People use API SystemConfiguration framework
As already seen method check host reachable
The way I use Reachabilty project I made class class method return boolean host I requesting data available
If method return return obviously
Now application I making use connection check possible start connection Apple documentation state
I simple show appropriate alert message request could completed moment
There requirement automatically try request could carried first time
The main purpose keep application away crashing time give user message could done
I use notification I interested monitoring whether connection carried
This something decide application demand
You forced use method Reachablitiy class sufficient use one
It documented different method offer ment used header file
Remember include framework
Reachability make best guess whether internet reachable
It tell whether access WiFi whether access Mobile Data
There guarantee correct
If say WiFi connection connection lost one second later
The way find whether accessing URL work make access see happens
There situation access work Reachability say vice versa
Here I use Reachibility After downloads failed internet connection I start retrying Reachability detects change actually second later URL access often fails immediately Reachability say WiFi come back
After downloads failed Mobile Data disallowed check Mobile Data available ask user allow use Mobile Data
By posting answer agree
asked viewed active site design logo Stack Exchange Inc user contribution licensed

Stack Exchange network consists Q A community including largest trusted online community developer learn share knowledge build career
We uncertain graph G edge u v exists probability u v
We want assign score pair vertex u v represents likelihood lie connected component
If possible score discrete problem reduces connected component listing graph reachability problem
Is work uncertain graph solve problem
I edited question make
The literature uncertain graph really rich problem
What looking reachability uncertain graph studied extensively database community
Basically edge two vertex u v probability uv
You need find whether two given vertex reachable therefore lie
I suggest take look following paper starting point describes basic lead work done problem Jin Ruoming et al
reachability computation uncertain graph

By posting answer agree
asked viewed active site design logo Stack Exchange Inc user contribution licensed

This service advanced JavaScript available learn Using framework sequential dynamical system class asynchronous graph dynamical system show notion reachability stability negatively correlated
Specifically show certain threshold exhibit update sequence instability Over certain graph class exist initial configuration exponentially many fixed point reachable different update sequence set size Θ
We establish first treewidth bounded graph random graph model large range
We also show update sequence instability present dense graph suggesting sparsity structure play important role stability system
These dynamical system arise application functional gene annotation threshold employed predict gene function fixed point computation based initial state prediction nongeneric choice update sequence
The result paper viewed cautionary advice construction application algorithm
This paper also provides starting point study update sequence stochastic Unable display preview
Unable display preview
Over million scientific document fingertip Springer International Publishing AG
Part

learn share knowledge build career
When middle download connection lost connection initially completionHandler fired error I chance resume connection restored
What proper way handle resumable downloading
Do I create another task one already expired due network failure way revive
What proper way handle resumable downloading
Do I create another task one already expired due network failure way revive
What asking resume download connection failure
You start NSURLSessionDownloadTask download connection fails appropriate NSError describing failure
You want retry connection reusing previously downloaded data network interface reachability change
NSURLSessionDownloadTask reuse previously downloaded data application grab resume data later pass task retries connection
This
In case network failure tthe NSError returned userInfo dictionary populated key
This data need hold
When application attempt download data download task created using either passing resume data
In case network failure return NSError NSURLErrorDomain appropriate error code userInfo dictionary populated key would hold NSData value key start monitoring reachability change
If network interface come back reachability change notification handler would create new download task using pas NSData retreived NSError userInfo dictionary
Take look answer
Another way setting
set header use formatted string look like But using AFNetworking instead NSMutableURLRequest follow instruction link I posted
Worth mention use NSMutableURLRequest go place writing file check size order set header server provide remaining file last downloaded byte
By posting answer agree
asked viewed active site design logo Stack Exchange Inc user contribution licensed

In refers ability get one another within graph
A vertex reach vertex reachable exists sequence vertex
start end
In undirected graph reachability pair vertex determined identifying graph
Any pair vertex graph reach belong connected component
The connected component undirected graph identified linear time
The remainder article focus difficult problem determining pairwise reachability
For directed graph vertex set edge set reachability say set ordered pair vertex exists sequence vertex edge
If reachability relation partial order may defined way instance reachability relation
A noteworthy consequence since partial order reach know reach
Intuitively could travel back would contain cycle contradicting acyclic
If directed acyclic
contains least one cycle reachability relation correspond instead partial order
Algorithms determining reachability fall two class require
If one query make may efficient forgo use complex data structure compute reachability desired pair directly
This accomplished using algorithm
If making many query sophisticated method may used exact choice method depends nature graph analysed
In exchange preprocessing time extra storage space create data structure answer reachability query pair vertex low time
Three different algorithm data structure three different increasingly specialized situation outlined
The used compute transitive closure directed graph give rise reachability relation definition
The algorithm requires time space worst case
This algorithm solely interested reachability also computes shortest path distance pair vertex
For graph containing negative cycle shortest path may undefined reachability pair still noted
For much faster method available described
This method answer reachability query planar graph time spending preprocessing time create data structure size
This algorithm also supply approximate shortest path distance well route information
The overall approach associate vertex relatively small set separator path path vertex vertex must go least one separator associated
An outline reachability related section follows
Given graph algorithm begin organizing vertex layer starting arbitrary vertex
The layer built alternating step first considering vertex reachable previous step starting vertex reach previous step vertex assigned layer
By construction layer every vertex appears two layer every dipath contained within two adjacent layer
Let last layer created lowest value
The graph series digraph contraction previous level single vertex
Because every dipath appears two consecutive layer formed two consecutive layer every dipath appears entirety least one consecutive graph For three separator identified removed break graph three component contain vertex original
As built two layer opposed dipaths separator may consist dipaths total dipaths separator
Let set dipaths
The proof separator always found related Lipton Tarjan separator located linear time
For directed nature provides natural indexing vertex start end path
For vertex locate first vertex reachable last vertex reach
That looking early get far stay still get back
This information stored
Then pair vertex reach connects earlier connects
Every vertex labelled step recursion build
As recursion logarithmic depth total extra information stored per vertex
From point logarithmic time query reachability simple looking pair label common suitable
The original paper work tune query time
In summarizing analysis method first consider layering approach partition vertex vertex considered time
The separator phase algorithm break graph component size original graph resulting logarithmic recursion depth
At level recursion linear work needed identify separator well connection possible vertex
The overall result preprocessing time additional information stored vertex
An even faster method due Kameda used graph also exhibit following additional property vertex appear often assumed outer face possible partition boundary face two part vertex appear one part vertex appear
two type vertex alternate
If exhibit property preprocess graph time store extra bit per vertex answering reachability query pair vertex time simple comparison
Preprocessing performs following step
We add new vertex edge vertex another new vertex edge vertex
Note property allow u maintaining planarity still edge crossing addition
For vertex store list adjacency order planarity graph example clockwise respect graph embedding
We initialize counter begin Traversal
During traversal adjacency list vertex visited needed
As vertex popped traversal stack labelled value decremented
Note always labelled value always labelled
The traversal repeated time adjacency list vertex visited
When completed incident edge removed
Each remaining vertex store label value
Given two vertex label say exists least one component strictly le respectively
The main result method state reachable easily calculated time
A related problem solve reachability query number vertex failure
For example Can vertex still reach vertex even though vertex failed longer used
A similar problem may consider edge failure rather vertex failure mix two
The search technique work well query constructing efficient oracle challenging
Another problem related reachability query quickly recalculating change reachability relationship portion graph changed
For example relevant concern need balance reclamation memory may reallocated performance concern running application

In store certain value without particular repeated value
It computer implementation concept
Unlike type rather retrieving specific element set one typically test value membership set
Some set data structure designed change constructed
Static set allow query operation element checking whether given value set enumerating value arbitrary order
Other variant called allow also insertion deletion element set
An abstract data structure collection aggregate data
The data may booleans number character data structure
If one considers structure yielded packaging indexing four basic data structure In view content set bunch isolated data item elementary bunch element
Whereas set element bunch element
Further structuring may achieved considering multiplicity element set become multisets bunch become hyperbunches homogeneity record set field necessarily type
In set generally identified characteristic function accordingly set value type may denoted
Subtypes subset may modeled may replaced
The characteristic function set defined In theory many abstract data structure viewed set structure additional operation additional imposed standard operation
For example abstract viewed set structure operation return element smallest value
One may define operation Typical operation may provided static set structure Dynamic set structure typically add Some set structure may allow operation
The cost operation depend implementation possibly also particular value stored set order inserted
There many operation principle defined term Other operation defined set element special type Sets implemented using various provide different time space various operation
Some implementation designed improve efficiency specialized operation
Implementations described general use typically strive optimize operation
A simple implementation use ignoring order element taking care avoid repeated value
This simple inefficient operation like set membership element deletion require scanning entire list
Sets often instead implemented using efficient data structure particularly various flavor
As set interpreted kind map indicator function set commonly implemented way partial map case value pair sentinel value like namely sorted set O log n operation unsorted set O O n operation
A sorted linear hash table may used provide deterministically ordered set
Further language support map set set implemented term map
For example common convert array hash whose value sentinel value use set Other popular method include
In particular subset integer implemented efficiently also support efficient union intersection operation
A implement set probabilistically using compact representation risking small chance false positive query
The Boolean set operation implemented term elementary operation specialized algorithm may yield lower asymptotic time bound
If set implemented sorted list example naive algorithm take time proportional length time length whereas variant job time proportional
Moreover specialized set data structure optimized one operation expense others
One earliest language support set many language include whether core language
As noted previous section language directly support set support set emulated using associative array using element key using dummy value value ignored
A generalization notion set similar set allows repeated equal value duplicate
This used two distinct sens either equal value considered simply counted equal value considered stored distinct item
For example given list people name age year one could construct multiset age simply count number people given age
Alternatively one construct multiset people two people considered equivalent age may different people different name case pair name age must stored selecting given age give people given age
Formally possible object computer science considered equal still distinct another relation
Some type multiset implementation store distinct equal object separate item data structure others collapse one version first one encountered keep positive integer count multiplicity element
As set multisets naturally implemented using hash table tree yield different performance characteristic
The set bag type T given expression bag If multiset one considers equal item identical simply count multiset interpreted function input domain integer generalizing identification set indicator function
In case multiset counting sense may generalized allow negative value Python
Where multiset data structure available workaround use regular set override equality predicate item always return equal distinct object however still able store multiple occurrence object use mapping value integer multiplicity able distinguish equal element
Typical operation bag In table mathematical set multiset depending presence unicity constraint column turn candidate key
allows selection row relational table operation general yield multiset unless keyword used force row different selection includes primary candidate key
In keyword used transform subquery collection expression general select used another general query transforms subquery used another query assignment column appropriate collection type

âãÏÓ obj endobj xref n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n trailer startxref EOF obj stream hÞb Êaàg ÞÏG w ËvþÙ R Spð endstream endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj stream jÃ mJh Q PñÃçö
Èzýn endstream endobj obj stream µ Á É endstream endobj obj stream ù ñÀ MPú âMþB endstream endobj obj stream
ñü ÝxZ bÈI ØN ìþ endstream endobj obj stream Åd aÑÚhd QÍwý áM ßÃ endstream endobj obj stream EôØÿJ Ãµ endstream endobj obj stream RU í Õ Ûä ù ü sbvgÊ TÏEöÀ ÙIR ºùÐ g endstream endobj obj stream c íðÔL ëý IkÝ l ßÅÙA endstream endobj obj endobj obj endobj obj endobj obj endobj obj stream ü ûoÝ ÓÿoV rUWnÆQj S F À g
Rg rëÿé
FÓ mÔa ÅÕi ö uM ê sð lÂ n Ü N g
c Ø L B nç B ËLOWÍN È K l Xû h wÎ u gù ää H ä àþ dù FÈýGäÿ ë eàuôº Ö kåÉNób Û U z endstream endobj obj endobj obj stream XÖdÙò H
æp ñx µ bJÊçç hº f XtëP Ó ÿ Hb ø v mòk z ËÚþ v
ôlïÙµ Úxðº úÑóÙ ykÁh ûÎ ëYzué IKè tb DÙ B Ç tP Ó é e ü DùHL nMÛ H U h SéH Û V z ñ D ðkÐéëäiè dÀµ ø j

Stack Exchange network consists Q A community including largest trusted online community developer learn share knowledge build career
How define reachable relation set R given
The reachability relation R digraph set ordered pair vertex x directed path x graph
For example b R virtue path c R virtue path c
Start vertex vertex reach via directed path
Then go vertex b c e f turn answer question
There way find R using adjacency matrix digraph instance basic
By posting answer agree
asked viewed active site design logo Stack Exchange Inc user contribution licensed

In finite
That consists finitely many edge directed one vertex another way start vertex follow sequence edge eventually loop back
Equivalently DAG directed graph sequence vertex every edge directed earlier later sequence
DAGs model many different kind information
A modeled DAG vertex cell edge whenever formula one cell us value another topological ordering DAG used update cell value spreadsheet changed
Similarly topological ordering DAGs used order compilation operation
The us DAGs model milestone activity large human project schedule project use little total time possible
block electronic circuit design operation language involve acyclic network processing element
DAGs also represent collection event influence either probabilistic structure record historical data version history system
DAGs also used sequence data representation collection string representation sequence binary choice
More abstractly relation DAG form partial order may represented DAG using reachability
Important computational problem DAGs include finding topological ordering construction largest smallest DAGs reachability relation respectively goal find subset vertex edge connecting rest graph
Transforming directed graph cycle DAG deleting vertex edge possible problem respectively directed graph made DAG contracting single supervertex
The problem finding solved DAGs contrast arbitrary graph shortest path algorithm slower longest path problem
The corresponding concept undirected graph without cycle
Choosing orientation forest produce special kind directed acyclic graph called
However many kind directed acyclic graph formed orienting edge undirected acyclic graph
Moreover every undirected graph assignment direction edge make directed acyclic graph
To emphasize DAGs thing directed version undirected acyclic graph author call
A formed collection vertex structureless object connected pair edge
In case edge orientation one vertex another vertex
A directed graph described sequence edge property ending vertex edge sequence starting vertex next edge sequence path form cycle starting vertex first edge equal ending vertex last edge
A directed acyclic graph directed graph cycle
A vertex directed graph said another vertex exists path start end
As special case every vertex considered reachable path zero edge
If vertex reach via nontrivial path path one edge path cycle another way define directed acyclic graph graph vertex reach via nontrivial path
A directed graph ordering vertex sequence every edge start vertex edge occurs earlier sequence ending vertex edge
A graph topological ordering cycle edge earliest vertex cycle would oriented wrong way
Therefore every graph topological ordering acyclic
Conversely every directed acyclic graph least one topological ordering
Therefore property used alternative definition directed acyclic graph exactly graph topological ordering
The relationship directed acyclic graph formalized vertex DAG
In partial order two vertex ordered exactly exists directed path DAG reachable
However different DAGs may give rise reachability relation partial order
For example DAG two edge reachability relation graph three edge
Both DAGS produce partial order vertex ordered
If DAG graph edge represents reachability relation
It edge whenever reach
That edge every related pair distinct element reachability relation may therefore thought direct translation reachability relation term
The method translating partial order DAGs work generally every finite partially ordered set graph vertex member edge pair element related automatically transitively closed DAG reachability relation
In way every finite partially ordered set represented reachability relation DAG
The DAG graph fewest edge represents reachability relation
It subgraph formed discarding edge also contains longer path connecting two vertex
Like transitive closure transitive reduction uniquely defined DAGs
In contrast directed graph acyclic one minimal subgraph reachability relation
If DAG reachability relation described partial order transitive reduction subgraph edge every pair
Transitive reduction useful visualizing partial order represent fewer edge graph representing order therefore lead simpler
A partial order drawing transitive reduction orientation edge shown placing starting vertex edge lower position ending vertex
Every directed acyclic graph ordering vertex starting endpoint every edge occurs earlier ordering ending endpoint edge
The existence ordering used characterize DAGs directed graph DAG topological ordering
In general ordering unique DAG unique topological ordering directed path containing vertex case ordering order vertex appear path
The family topological ordering DAG family reachability relation DAG two graph representing partial order set topological order
The problem counting directed acyclic graph studied
The number DAGs labeled vertex without restriction order number appear topological ordering DAG These number may computed conjectured proved number count positive
The proof matrix DAG matrix eigenvalue positive denotes
Because DAG adjacency matrix must zero diagonal adding preserve property matrix coefficient
A directed graph formed orienting edge
Every polytree DAG
In particular true formed directing edge outwards root tree
A also called strongly unambiguous graph mangrove directed graph one directed path either direction two vertex equivalently DAG every vertex subgraph reachable form tree
algorithmic problem finding topological ordering given DAG
It solved
Kahn algorithm topological sorting build vertex ordering directly
It maintains list vertex incoming edge vertex already included partially constructed topological ordering initially list consists vertex incoming edge
Then repeatedly add one vertex list end partially constructed topological ordering check whether neighbor added list
The algorithm terminates vertex processed way
Alternatively topological ordering may constructed reversing numbering graph traversal
It also possible check whether given directed graph DAG linear time either attempting find topological ordering testing edge whether resulting ordering valid alternatively topological sorting algorithm verifying algorithm successfully order vertex without meeting error condition
Any undirected graph may made DAG choosing vertex directing every edge earlier endpoint order later endpoint
The resulting edge called
Different total order may lead acyclic orientation graph fewer acyclic orientation
The number acyclic orientation equal given graph
Any directed graph may made DAG removing set vertex edge respectively touch cycle
However smallest set find
An arbitrary directed graph may also transformed DAG called single supervertex
When graph already acyclic smallest feedback vertex set feedback arc set condensation graph
The transitive closure given DAG vertex edge may constructed time using either test reachability vertex
Alternatively solved time exponent theoretical improvement bound
In transitive closure algorithm possible distinguish pair vertex reachable least one path length two pair connected path
The transitive reduction consists edge form path path connecting endpoint
Therefore transitive reduction constructed asymptotic time bound transitive closure
The take input directed acyclic graph weight vertex seek minimum maximum weight closure set vertex outgoing edge
The problem may formulated directed graph without assumption acyclicity greater generality case equivalent problem condensation graph
It may solved polynomial time using reduction
Some algorithm become simpler used DAGs instead general graph based principle topological ordering
For example possible find given starting vertex DAGs linear time processing vertex topological order calculating path length vertex minimum maximum length obtained via incoming edge
In contrast arbitrary graph shortest path may require slower algorithm longest path arbitrary graph find
Directed acyclic graph representation partial ordering many application system task ordering constraint
An important class problem type concern collection object need updated cell one cell changed piece computer software changed
In context graph vertex object updated edge connecting two object whenever one need updated earlier
A cycle graph called generally allowed would way consistently schedule task involved cycle
Dependency graph without circular dependency form DAGs
For instance one cell change necessary recalculate value cell depend directly indirectly changed cell
For problem task scheduled recalculation value individual cell spreadsheet
Dependencies arise expression one cell us value another cell
In case value used must recalculated earlier expression us
Topologically ordering dependency graph using topological order schedule cell update allows whole spreadsheet updated single evaluation per cell
Similar problem task ordering arise program compilation computer program optimization
A somewhat different formulation scheduling constraint used PERT method management large human project one first application DAGs
In method vertex DAG represent project rather specific task performed
Instead task activity represented edge DAG connecting two milestone mark beginning completion task
Each edge labeled estimate amount time take team worker perform task
The DAG represents project one control total time project
Individual milestone scheduled according length longest path ending vertex
A directed acyclic graph may used represent network processing element
In representation data enters processing element incoming edge leaf element outgoing edge
For instance electronic circuit design static block represented acyclic system computes function input input output function represented individual
In general output block used input unless captured register state element maintains acyclic property
Electronic circuit schematic either paper database form directed acyclic graph using instance component form directed reference lower level component
Electronic circuit necessarily acyclic directed
language describe system operation connection output operation input others
These language convenient describing repetitive data processing task collection operation applied many data item
They executed operation performed parallel process soon another set input becomes available
In straight line code sequence statement without loop conditional branch may represented DAG describing input output arithmetic operation performed within code
This representation allows compiler perform efficiently
At higher level code organization state dependency module component large software system form directed acyclic graph
Graphs vertex represent event occurring definite time edge always point early time vertex late time vertex edge necessarily directed acyclic
The lack cycle follows time associated vertex always increase follow graph never return vertex path
This reflects natural intuition causality mean event affect future never affect past thus
An example type directed acyclic graph encountered though case graph considered
The version history example version software associated unique time typically time version saved committed released
For citation graph document published one time refer older document
Sometimes event associated specific physical time
Provided pair event purely causal relationship edge represent event directed acyclic graph
For instance represents system probabilistic event vertex directed acyclic graph likelihood event may calculated likelihood predecessor DAG
In context DAG undirected graph created adding undirected edge parent vertex sometimes called replacing directed edge undirected edge
Another type graph similar causal structure vertex represent either decision made unknown information edge represent causal influence one vertex another
In instance diagram often used estimate expected value different choice intervention
The converse also true
That application represented directed acyclic graph causal structure either explicit order time example order derived derived graph structure
This follows directed acyclic graph
least one way put vertex order edge point direction along order
may seen directed acyclic graph vertex family member edge relationship
Despite name graph necessarily tree possibility marriage relative child common ancestor mother father side causing
The graph descent mother relationship woman descent father relationship men tree within graph
Because one become ancestor family tree acyclic
For reason version history system generally structure directed acyclic graph vertex revision edge connecting pair revision directly derived
These tree general due merges
In many algorithm maintains representing version history geometric structure course sequence change structure
For instance algorithm triangulation change replacing one triangle three smaller triangle point added flip operation replace pair triangle different pair triangle
The history DAG algorithm vertex triangle constructed part algorithm edge triangle two three triangle replace
This structure allows query answered efficiently find location query point Delaunay triangulation follow path history DAG step moving replacement triangle contains
The final triangle reached path must Delaunay triangle contains
In vertex document single publication date
The edge represent citation bibliography one document necessarily earlier document
The classic example come citation academic paper pointed article Networks Scientific Papers
In case paper corresponding vertex citation network
This important measure
provide another example judge support conclusion one case recalling earlier decision made previous case
A final example provided patent must refer earlier earlier patent relevant current patent claim
By taking special property directed acyclic graph account one analyse graph technique available analysing general graph considered many study
For instance give new insight citation distribution found different application highlighting clear difference mechanism creating citation network different context
Another technique trace citation link suggests significant citation chain given
Directed acyclic graph may also used collection sequence
In type application one find DAG path form given sequence
When many sequence share subsequence shared subsequence represented shared part DAG allowing representation use le space would take list sequence separately
For example computer science formed directed acyclic graph single source edge labeled letter symbol path source sink graph represent set English word
Any set sequence represented path tree forming tree vertex every prefix sequence making parent one vertex represent sequence one fewer element tree formed way set string called
A directed acyclic word graph save space trie allowing path diverge rejoin set word possible suffix represented single tree vertex
The idea using DAG represent family path occurs data structure representing binary function
In binary decision diagram vertex labeled name binary variable sink edge labeled
The function value variable value sink found following path starting single source vertex vertex follows outgoing edge labeled value vertex variable
Just directed acyclic word graph viewed compressed form try binary decision diagram viewed compressed form save space allowing path rejoin agree result remaining decision

