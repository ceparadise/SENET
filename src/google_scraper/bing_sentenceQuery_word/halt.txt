In problem determining description arbitrary input whether program finish running continue run forever
proved general solve halting problem possible pair exist
A key part proof mathematical definition computer program became known halting problem Turing machine
It one first example
Informally program might determine program halt pathological program called input pas source input specifically opposite predicts
No exist handle case
attribute term
The halting problem decision problem property computer program fixed model computation program written given general enough equivalent Turing machine
The problem determine given program input program whether program eventually halt run input
In abstract framework resource limitation amount memory time required program execution take arbitrarily long use arbitrary amount storage space halting
The question simply whether given program ever halt particular input
For example program halt rather go forever
On hand program halt
While deciding whether program halt simple complex program prove problematic
One approach problem might run program number step check halt
But program halt unknown whether program eventually halt run forever
Turing proved algorithm exists always correctly decides whether given arbitrary program input program halt run input
The essence Turing proof algorithm made contradict therefore correct
Some quite useful
For instance typically coded infinite loop
However subroutine intended finish halt
In particular hard programmer attempt write subroutine guaranteed finish halt also guaranteed finish given deadline
Sometimes programmer use programming language attempt write restricted make easy prove resulting subroutine finish given deadline
Other time programmer apply deliberately use computer language quite fully often language guarantee subroutine guaranteed finish
The difficulty halting problem lie requirement decision procedure must work program input
A particular program either halt given input halt
Consider one algorithm always answer halt another always answer halt
For specific program input one two algorithm answer correctly even though nobody may know one
Yet neither algorithm solves halting problem generally
There program simulate execution whatever source code given
Such program demonstrate program halt case interpreter eventually halt simulation show original program halted
However interpreter halt input program halt approach solve halting problem stated successfully answer halt program halt
The halting problem theoretically decidable LBAs deterministic machine finite memory
A machine finite memory finite number state thus deterministic program must eventually either halt repeat previous state Minsky warns u however machine computer million small part two state least possible state Minsky exhorts reader machine may finite finite automaton number theoretical limitation It also decided automatically whether nondeterministic machine finite memory halt none possible sequence nondeterministic decision enumerating state possible decision
The halting problem historically important one first problem proved
Turing proof went press May whereas proof undecidability problem already published April Church
Subsequently many undecidable problem described
In original proof Turing formalized concept introducing
However result way specific applies equally model equivalent computational power Turing machine
What important formalization allows straightforward mapping algorithm operate upon
For example let algorithm define function string Turing machine mapping algorithm string formalism let algorithm define function natural number mapping algorithm natural number
The mapping string usually straightforward string also mapped number interpreting number
The conventional representation decision problem set object possessing property question
The represents halting problem
This set mean computable function list pair contains Moore Mertens pp

However complement set recursively enumerable Moore Mertens pp

There many equivalent formulation halting problem set whose equal halting problem formulation
Examples set include The proof show decides whether arbitrary program halt arbitrary input following function computable Penrose Here refers th program program fixed model computation
The proof proceeds directly establishing every total computable function two argument differs required function
To end given total computable binary function following also computable program The verification computable relies following construct equivalent The following illustrates straightforward way compute Because partial computable must program computes assumption model computation
This program one program halting function defined
The next step proof show value
It follows definition exactly one following two case must hold In either case function
Because total computable function two argument function must differ
This proof analogous
One may visualize array one column one row natural number indicated table
The value placed column row
Because assumed total computable function element array calculated using
The construction function visualized using main diagonal array
If array position
Otherwise undefined
The contradiction come fact column array corresponding
Now assume halting function defined case halt
But contradicting
Similarly defined halting function lead construction
This contradicts assumption defined
In case contradiction arises
Therefore arbitrary computable function halting function
The typical method proving problem undecidable technique
To sufficient show solution new problem found could used decide undecidable problem transforming instance undecidable problem instance new problem
Since already know method decide old problem method decide new problem either
Often new problem reduced solving halting problem
Note technique used demonstrate problem case rather demonstrating solution demonstrates solution assuming
For example one consequence halting problem undecidability general decides whether given statement true
The reason stating certain program halt given certain input converted equivalent statement natural number
If algorithm could find truth value every statement natural number could certainly find truth value one would determine whether original program halt impossible since halting problem undecidable
generalizes theorem halting problem unsolvable
It state property general decision procedure program decides whether partial function implemented input program property
A partial function function may always produce result used model program either produce result fail halt
For example property halt input undecidable
Here mean set partial function satisfy property neither empty set set partial function
For example halt fails halt input clearly true partial function trivial property decided algorithm simply report true
Also note theorem hold property partial function implemented program Rice Theorem apply property program
For example halt input within step property partial function implemented property program implementing partial function much decidable
defined represented symbol type real number informally said represent randomly produced program halt
These number halting problem
It completely
This mean one prove produce digit Ω although first digit calculated simple case
While Turing proof show general method algorithm determine whether algorithm halt individual instance problem may well susceptible attack
Given specific algorithm one often show must halt input fact often part
But proof developed specifically algorithm hand determine whether algorithm Turing machine halt
However used automated fashion attempt construct proof succeed frequently typical program
This field research known automated
Since negative answer halting problem show problem solved Turing machine limit accomplished machine implement
However machine conceivable human imagination subject thesis

It open question whether actual deterministic long run elude simulation Turing machine particular whether hypothetical process could usefully harnessed form calculating machine could solve halting problem Turing machine amongst thing
It also open question whether unknown physical process involved working whether human solve halting problem Copeland
The concept raised similar raised halting problem proof quite similar
In fact weaker form First Incompleteness Theorem easy consequence undecidability halting problem
This weaker form differs standard statement incompleteness theorem asserting complete statement natural number unachievable
The sound part weakening mean require axiomatic system question prove statement natural number
The general statement incompleteness theorem require soundness assumption kind
The weaker form theorem proven undecidability halting problem follows
Assume consistent complete true statement
Then build algorithm enumerates statement
algorithm given natural number computes true logic statement natural number true statement least one equal statement
Now suppose want decide whether algorithm representation halt input
By using express statement halt input statement language arithmetic
Since axiomatization complete follows either
So either find negation always halt
This mean give u algorithm decide halting problem
Since know algorithm follows assumption consistent complete axiomatization true logic statement natural number must false
Many variant halting problem found Computability textbook Sipser Davis Minsky Hopcroft Ullman Börger
Typically undecidability follows standard halting problem
However higher
The next two example typical
The also known problem determining whether given computer program halt name come equivalent question whether computed function
This problem undecidable halting problem highly undecidable
In term Börger
This mean particular decided even halting problem
There many program input return correct answer halting problem input return answer
However problem program partial halting sense described least hard halting problem
To see assume algorithm PHSR halting solver
Then used solve halting problem follows To test whether input program halt construct program input report diverges input
Then test PHSR
The argument halting problem PHS recognition manner harder problem also reduced implying PHS recognition undecidable higher specifically
A machine halting problem determine whether particular Turing machine halt particular input determine general machine equivalent halt

Stack Exchange network consists Q A community including largest trusted online community developer learn share knowledge build career
Is difference end state Turing machine halt state
Especially example Busy Beaver
It said state also halt
Is end state halt
End ing state halt ing state two four different way saying thing
In specific case Busy Beaver end state halt state al state must transition defined every symbol alphabet TM machine halt
By posting answer agree
asked viewed active site design logo Stack Exchange Inc user contribution licensed

Stack Exchange network consists Q A community including largest trusted online community developer learn share knowledge build career
I currently stuck question Sipser book automaton
The question go like Consider following language V element HALT U b element complement HALT Prove V unrecognizable
Prove complement V unrecognizable
I kinda know prove use contradiction I got stuck able come solution till
Any would appreciated
If V recognizable language Halting problem could reduced V following
Let TM recognizing V accepts x x V
Let u string description TM
Then run
eventually halt one input since u either HALT HALT
So halt simply check M halted u HALT else M halted u HALT
Thus implies HALT decidable impossible
Similarly V
Let u string description TM
If V accepts u HALT
If V accepts u HALT
By posting answer agree
asked viewed active site design logo Stack Exchange Inc user contribution licensed

learn share knowledge build career
Whenever people ask halting problem pertains programming people respond If add one loop got halting program therefore ca automate Makes sense
If program infinite loop program running way knowing whether program still crunching input looping infinitely
But seems counter intuitive
What I writing halting problem solver take source code input
If code look like It seems like pretty easy program see
Look loop look condition
If condition based literal variable always know outcome loop
If variable eg x see variable ever modified
If always know outcome loop
Granted check would trivial calculating pointer arithmetic etc seem impossible
eg could detected
along albeit trivially Now user input
That kicker make program unpredictable
Now program say If user enters greater program halt
On input loop
Which mean even hundred input one able list condition program stop
Indeed I write program I always make sure someone ability terminate
I saying resulting list condition create seem impossible
You could take input user use calculate pointer index etc add number condition ensure program terminate make impossible enumerate
So exactly halting problem
What I understanding idea write problem detect infinite loop
Or loop example
So let change question little bit halting problem And I respond comment Many people said program must able deal arbitrary input
But computer ever arbitrary input
If I input single byte data I possible input
So example All sudden I accounted possibility
If bit pattern one thing
For pattern something else
Even program accepts arbitrary string input never really arbitrary since resource finite mean theory arbitrary applies exactly practice
The example people cited If n integer I visually tell whether halt
I guess edit asking anything convincing example I seen Assume magical determine program halt
Now let say write small piece code
So example write program exact opposite magical halting method
If somehow determine given program halt hop infinite loop otherwise determine program infinite loop end program
Then intentionally write program contains infinite loop solving halting problem kind moot
EDIT much later original answer MarkCC recently wrote Halting problem concrete example
The halting problem basically formal way asking tell whether arbitrary program eventually halt
In word write program called halting oracle HaltingOracle program input return true program input would eventually halt return false
The answer
Imagine working QA position write halting checker program aka oracle confirm program written development team D input provided I program D eventually halt given input Ho ho goofy user let make sure matter garbage type server task never end endless loop
Make code monkey
This seems like great idea right
You want server hang right
What halting problem telling handed unsolvable task
Instead particular case need plan task run past threshold time ready cancel
Mark us code instead input illustrate problem In discussion comment I went route malicious input manipulation force unsolvable problem
Mark example far elegant using halting oracle defeat So input Deceiver actually list two element first one proposed halting oracle
The second another input
What halting killer ask Oracle think halt input
If oracle say program go infinite loop
If oracle say halt
So matter oracle say wrong
Said another way without cheating reformatting input countable uncountable infinity anything distraction Mark written piece code defeat halting oracle program
You write answer question whether ever halt
From great In computability theory halting problem decision problem stated follows given description program finite input decide whether program finish running run forever given input
Alan Turing proved general algorithm solve halting problem possible pair exist
We say halting problem undecidable Turing machine
Copeland attribute actual term halting problem Martin Davis
One critical point control either program input
You handed answer question
Note also Turing machine basis effective model computability
Said another way everything modern computer language mapped back archetypical Turing machine
As result halting problem undecidable useful modern language
To solve halting problem develop algorithm could determine whether program halt relatively simple case example
Here simple explanation proof halting problem undecidable
Assume program H computes whether program halt
H take two parameter first description program P second input H return true P halt input I false otherwise
Now write program take input description another program
call H loop H return true halt otherwise
What happens run
It must loop halt time causing universe explode
This beaten death well actually written style Seuss Geoffrey Pullum fame
Funny stuff
Here taste trick use simple
define procedure I call Q use prediction halting success stir terrible logical mess
No matter P might perform Q scoop Q us output make P look stupid
Whatever P say predict Q P right wrong false true
There OK proof wikipedia
To illustrate exactly applying technique loop insufficient consider following program pseudocode Can think approach return true code halt false otherwise

If chance serious contention Fields medal imagine code place
If add one loop got halting program therefore ca automate task Sounds like someone generalizing application halting problem
There plenty particular loop prove terminate
There exists research perform termination checking wide class program
For instance Coq limited program prove terminate
Microsoft research project called Terminator us various approximation prove program terminate
But remember halting problem toy example
Neither solves general problem work every program
The problem halting problem say exist program way know terminate without running mean may never get done deciding halt
An example program may may halt Haskell something accessible Given every integer program halt
Well worked far theorem say halt every integer
We due date back hold proof
In reference people respond If add one loop got halting program therefore ca automate task I add detail The post say algorithmically compute whether arbitrary program halt absolutely correct Turing Machine
The thing program require Turing Machines
These program computed conceptually weaker machine example regular expression embodied entirely Finite State Machine halt input
Is nice
I wager people say add one loop trying express idea program complex enough requires Turing Machine thus Halting Problem idea applies
This may slightly tangential question I believe given detail question worth pointing
Turing great example Suppose IS program examine another one determine whether halt
Feed ITSELF
Here program halting problem never able solve
Assume magical determine program halt
Now let say write small piece code
So example write program exact opposite magical halting method
If somehow determine given program halt hop infinite loop otherwise determine program infinite loop end program
No matter many input check possible solution determine whether EVERY program written halt
A lot interesting specific far
If want read deeper background good book Turing original paper Charles Petzold
In related vein really neat essay web brush Turing machine Ackermann function
There lot good answer already I seen anyone address fact sort selective blending theory practicality Halting Problem really solvable
So first Halting Problem basically task writing program take arbitrary second program determines whether secondary program halt arbitrary input
So say Yes program halt input No wo
And fact unsolvable general case people seem provided proof already Turing Machine
The real problem kind find whether something going halt running wait halt ca really find whether something going NOT halt running keep waiting forever
This problem Turing Machine definition infinite amount memory thus infinitely many state
However computer finite amount memory
There many bit computer
So could somehow keep track previous state bit configuration seen running program guarantee checker never go infinite loop
If secondary program eventually halt say Yes program halt input
If see bit configuration twice halt know No wo
Probably great technical importance good know lot time really hard problem face harder theory practice
It variant except program instead dog halting instead barking
You listed simple case
Now think thinking rest case
There infinite number possible scenrios would list
Unless course could generalize
That halting problem come
How generalize
I would suggest read especially order understand problem ca solved algorithmic way
How program resolve
From Jon Bentley
Prove program terminates input x positive integer
Assume write algorithm check arbitrary piece code tell halt
Now give algoritm check
The precise definition problem need write program following take arbitrary program determines program halt given arbitrary finite input program However really high bar
There many partial solution halting problem general solution
Even worse even finding program partially solve halting problem known difficult If truly solved halting problem work site like
A month ago post one user named ATuring offered contract solve halting problem
You may find helpful consider story guy mow lawn anyone mow lawn ask whether mow lawn
Yet another example
I recently ran something called hailstone number
These number form sequence rule Currently assumed starting point eventually arrive repeat However proof
So right way determine number terminates fed hailstone sequence arrive
This key understand halting problem
How I understand know program halt unless
So program write could give answer halting problem would actually run program
The significance halting problem lie importance problem contrary automated testing would little practical use software engineering proving program halt prove case hypothetical algorithm provides proof given finite input whereas software developer would interested test possible finite input
Rather halting problem one first proven meaning algorithm exists work general case
In word Turing proved year ago problem computer solve right algorithm yet found algorithm logically exist
By posting answer agree
asked viewed active site design logo Stack Exchange Inc user contribution licensed

learn share knowledge build career
Is difference end state Turing machine halt state
Especially example Busy Beaver Problem
It said TM state also halt
Is end state
give one possible answer found section titled
Some book define acceptance Turing machine slightly differently
That Turing machine book define two halt state accept halt reject halt
A Turing machine thus may accept string halt reject string halt loop
With definition string accepted Turing machine given string Turing machine eventually go accept halt state
As far material discussed class note difference two definition accept
So likely answer material difference accept state halt state
Do note however question halting going relatable Halting Problem general
The Halting Problem general algorithm could input program starting state tell program starting state halt
That quite different given merely one single instance problem like Busy Beaver asked reason lone instance possible path
asked viewed active site design logo Stack Exchange Inc user contribution licensed

Set edition preference Set edition preference Set edition preference Updated PM ET Fri July Chat u Facebook Messenger
Find happening world unfolds
Quick name couple famous female coder vein Mark Zuckerberg Bill Gates
Nobody come mind eh
I Donna Cameron

study theory experimentation engineering form basic design use computer
It scientific practical approach application systematic study feasibility structure expression mechanization methodical underlie acquisition representation processing storage communication access information
An alternate succinct definition computer science study automating algorithmic process scale
A specializes theory computation design computational system
Its field divided variety theoretical
Some field explores fundamental property intractable problem highly abstract field emphasize visual application
Other field still focus challenge implementing computation
For example considers various approach description computation study investigates various aspect use
considers challenge making computer computation useful usable human
The earliest foundation would become computer science predate invention modern
Machines calculating fixed numerical task existed since antiquity aiding computation multiplication division
Further performing computation existed since antiquity even development sophisticated computing equipment
designed constructed first working
In demonstrated digital mechanical calculator called
He may considered first computer scientist information theorist among reason documenting binary number system
In launched industry released simplified first calculating machine strong enough reliable enough used daily office environment
started design first eventually gave idea first
He started developing machine le two year sketched many salient feature modern computer
A crucial step adoption punched card system derived making infinitely programmable
In translation French article Analytical Engine wrote one many note included algorithm compute considered first computer program
Around invented used process statistical information eventually company became part
In one hundred year Babbage impossible dream convinced IBM making kind punched card equipment also calculator business develop giant programmable calculator based Babbage Analytical Engine used card central computing unit
When machine finished hailed Babbage dream come true
During new powerful machine developed term came refer machine rather human predecessor
As became clear computer could used mathematical calculation field computer science broadened study general
Computer science began established distinct academic discipline early
The world first computer science degree program began
The first computer science degree program United States formed
Since practical computer became available many application computing become distinct area study right
Although many initially believed impossible computer could actually scientific field study late fifty gradually became accepted among greater academic population
It brand formed part computer science revolution time
IBM short International Business Machines released IBM later IBM computer widely used exploration period device
Still working IBM computer frustrating misplaced much one letter one instruction program would crash would start whole process
During late computer science discipline much developmental stage issue commonplace
Time seen significant improvement usability effectiveness
Modern society seen significant shift user computer technology usage expert professional user base
Initially computer quite costly degree human aid needed efficient part professional computer operator
As computer adoption became widespread affordable le human assistance needed common usage
Despite short history formal academic discipline computer science made number fundamental contribution science fact along founding science current epoch human history called driver seen third major leap human technological progress CE BC
These contribution include Although first proposed term computer science appears article Louis Fein argues creation analogous creation justifying name arguing like subject applied interdisciplinary nature characteristic typical academic discipline
His effort others rewarded university went create program starting Purdue
Despite name significant amount computer science involve study computer
Because several alternative name proposed
Certain department major university prefer term emphasize precisely difference
Danish scientist suggested term reflect fact scientific discipline revolves around data data treatment necessarily involving computer
The first scientific institution use term Department Datalogy University Copenhagen founded Peter Naur first professor datalogy
The term used mainly Scandinavian country
An alternative term also proposed Naur used distinct field data analysis including statistic database
Also early day computing number term practitioner field computing suggested
Three month later journal suggested followed next year
The term also suggested
In Europe term derived contracted translation expression automatic information
informazione automatica Italian information mathematics often used
French German Italian Dutch Spanish Portuguese mean informatics
Similar word also adopted UK
In however linked applied computing computing context another domain
A folkloric quotation often attributed almost certainly first formulated state computer science computer astronomy telescope
The design deployment computer computer system generally considered province discipline computer science
For example study computer hardware usually considered part study commercial deployment often called information technology
However much idea various discipline
Computer science research also often intersects discipline philosophy
Computer science considered much closer relationship mathematics many scientific discipline observer saying computing mathematical science
Early computer science strongly influenced work mathematician continues useful interchange idea two field area
The relationship computer science software engineering contentious issue muddied term software engineering mean computer science defined
taking cue relationship engineering science discipline claimed principal focus computer science studying property computation general principal focus software engineering design specific computation achieve practical goal making two separate complementary discipline
The academic political funding aspect computer science tend depend whether department formed mathematical emphasis engineering emphasis
Computer science department mathematics emphasis numerical orientation consider alignment
Both type department tend make effort bridge field educationally across research
A number computer scientist argued distinction three separate paradigm computer science
argued paradigm science technology mathematics
working group argued theory abstraction modeling design
Amnon Eden described rationalist paradigm treat computer science branch mathematics prevalent theoretical computer science mainly employ technocratic paradigm might found engineering approach prominently software engineering scientific paradigm approach artifact empirical perspective identifiable branch
As discipline computer science span range topic theoretical study algorithm limit computation practical issue implementing computing system hardware software
formerly called Computing Sciences Accreditation made representative ACM IEEE CS four area considers crucial discipline computer science
In addition four area CSAB also identifies field software engineering artificial intelligence computer networking communication database system parallel computation distributed computation interaction computer graphic operating system numerical symbolic computation important area computer science
mathematical abstract spirit derives motivation practical everyday computation
Its aim understand nature consequence understanding provide efficient methodology
All study related mathematical logic formal concept method could considered theoretical computer science provided motivation clearly drawn field
Data structure algorithm study commonly used computational method computational efficiency
According fundamental question underlying computer science What efficiently automated
Theory computation focused answering fundamental question computed amount resource required perform computation
In effort answer first question examines computational problem solvable various theoretical
The second question addressed study time space cost associated different approach solving multitude computational problem
The famous problem one open problem theory computation
Information theory related quantification information
This developed find fundamental limit operation compressing data reliably storing communicating data
Coding theory study property system converting information one form another fitness specific application
Codes used recently also
Codes studied purpose designing efficient reliable method
Programming language theory branch computer science deal design implementation analysis characterization classification individual
It fall within discipline computer science depending affecting software engineering
It active research area numerous dedicated academic journal
Formal method particular kind based technique development software system
The use formal method software hardware design motivated expectation engineering discipline performing appropriate mathematical analysis contribute reliability robustness design
They form important theoretical underpinning software engineering especially safety security involved
Formal method useful adjunct software testing since help avoid error also give framework testing
For industrial use tool support required
However high cost using formal method mean usually used development safety utmost importance
Formal method best described application fairly broad variety fundamental particular calculus also problem software hardware specification verification
Computer architecture digital computer organization conceptual design fundamental operational structure computer system
It focus largely way central processing unit performs internally access address memory
The field often involves discipline computer engineering electrical engineering selecting interconnecting hardware component create computer meet functional performance cost goal
Computer performance analysis study work flowing computer general goal improving controlling using resource efficiently eliminating predicting performance anticipated peak load
Concurrency property system several computation executing simultaneously potentially interacting
A number mathematical model developed general concurrent computation including model
A distributed system extends idea concurrency onto multiple computer connected network
Computers within distributed system private memory information often exchanged among achieve common goal
This branch computer science aim manage network computer worldwide
Computer security branch computer technology whose objective includes protection information unauthorized access disruption modification maintaining accessibility usability system intended user
Cryptography practice study hiding encryption therefore deciphering decryption information
Modern cryptography largely related computer science many encryption decryption algorithm based computational complexity
A database intended organize store retrieve large amount data easily
Digital database managed using database management system store create maintain search data
Computer graphic study digital visual content involves synthesis manipulation image data
The study connected many field computer science including heavily applied field special effect
Research develops theory principle guideline user interface designer create satisfactory user experience desktop laptop mobile device
field study concerned constructing technique using computer analyze solve problem
In practical use typically application form problem various scientific discipline
Artificial intelligence AI aim required synthesize process environmental adaptation learning communication found human animal
From origin artificial intelligence research necessarily drawing area expertise
AI associated popular mind main field practical application embedded component area require computational understanding
The late question Can computer think
question remains effectively unanswered although still used ass computer output scale human intelligence
But automation evaluative predictive task increasingly successful substitute human monitoring intervention domain computer application involving complex data
Software engineering study designing implementing modifying software order ensure high quality affordable maintainable fast build
It systematic approach software design involving application engineering practice software
Software engineering deal organizing analyzing deal creation manufacture new software internal maintenance arrangement
Both computer application software engineer computer system software engineer projected among fastest growing occupation
The philosopher computing noted three Conferences important event computer science research
During conference researcher public private sector present recent work meet
Unlike academic field computer science prestige greater journal publication
One proposed explanation quick development relatively new field requires rapid review distribution result task better handled conference journal
Since computer science relatively new field widely taught school university academic subject
For example estimated percent high school United States offered computer science education
A report Association Computing Machinery ACM Computer Science Teachers Association CSTA revealed state adopted significant education standard high school computer science
However computer science education growing
Some country Israel New Zealand South Korea already included computer science respective national secondary education curriculum
Several country following suit
In country significant gender gap computer science education
For example US computer science degree conferred woman
This gender gap also exists Western country
However part world gap small nonexistent
In approximately half computer science degree conferred woman
In woman made computer science graduate


âãÏÓ obj endobj xref n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n trailer R R startxref EOF obj R R R R null null null R R R true endobj obj R endobj obj R endobj obj R R R R endobj obj R stream B F wg Ë ÒÌ endstream endobj obj endobj obj R R R R R R R R R R R R R R R R R R R endobj obj Bold R endobj obj Bold R endobj obj endobj obj R endobj obj R endobj obj endobj obj endobj obj R stream V µ þìXµ Åßÿ Á Ò q Xo F wB tÇ hþ On j R rnfl ìÀí zÐøåK Üó ñþÄg ã endstream endobj obj R endobj obj R endobj obj endobj obj R stream Ïèå jæÌ W ÚÛ LÔ p Ó ïVVU ã
ã oä äuéuPTè är endstream endobj obj BoldItalic R endobj obj BoldItalic R endobj obj endobj obj R stream ßÌp Þ wË ËÆÄ Oª
ú â Eíýº vÕî O KkÚ endstream endobj obj endobj obj R stream xK ùmAF n S î uØ ë D í ö TOßzÕÔóa ÙýP pEû Aä Fé Ëpë
ò ï endstream endobj obj endobj obj R stream Ó shÕ Ö Â í NàºØ Aû ñ Ñ wäçBb Ð n ÅyCÑ K à âûð endstream endobj obj endobj obj R stream öÊ õ ëuÊ ÆÊím VË Ñ
ËÂQçR gÈ ÕÈþ Úæ º ý ýz aqæÐ µö yz endstream endobj obj endobj obj R stream Ò pYüf L öBÇË áÉvI ñ ÚY Ê Gí J Ûâ mÈóTÎóÌ Ú

full formatting system displaying text graphic audio retrieved monitor
Each retrieval unit known Web page page frequently contain link allow related page retrieved
HTML encoding Web page
It designed British scientist nuclear physic laboratory Switzerland defined DTD document type definition
HTML markup tag specify document element heading paragraph table
They mark document display known Web
The browser interprets tag displaying heading paragraph table layout adapted screen size font available
HTML document also contain tag specify link Web page
An anchor form A http Encyclopædia Britannica quoted string universal resource locator link point Web address text following appears Web browser underlined show link another page
What displayed single page may also formed multiple URLs containing text others graphic
The World Wide Web system displaying text graphic audio retrieved Internet computer monitor
Each retrieval unit known Web page page frequently contain link allow related page retrieved
reader
The language HyperText Markup Language allows nonprogrammers design Web page specifying structure content leaf detailed presentation extraction information client Web browser
hyperlink written HyperText Markup Language assigned online address called Uniform Resource Locator URL
system architecture revolutionized communication method commerce allowing various computer network around world interconnect
Sometimes referred network network Internet emerged United States become visible general public device processing storing displaying information
meant person computation term almost universally refers automated electronic machinery
We welcome suggested improvement article
You make easier u review hopefully publish contribution keeping point mind
Your contribution may edited staff publication subject final approval
Unfortunately editorial approach may able accommodate contribution
Our editor review submitted meet criterion add article
Please note editor may make formatting change correct spelling grammatical error may also contact clarification needed
There problem submission
Please try later
Our editor review submitted determine whether revise article

