A basic unit used computer science
Nodes device data point larger network
Devices personal computer cell phone printer node
When defining node internet node anything
Nodes individual part larger data structure
Nodes contain also may link node
Links node often implemented
Nodes often arranged tree structure
These structure
A node represents information contained single structure
These node may contain value condition possibly serve another independent data structure
Nodes represented single parent node
The highest point tree structure called root node parent node serf parent node tree
The height node determined total number edge path node furthest leaf node height tree equal height root node
Node depth determined distance particular node root node
The root node said depth zero
Data discovered along network path
An IP address us kind system node define location network
Another common use node tree
In programming used communicate information computer programmer computer alike
For reason XML used create common used serf base development modern web like
Though similar approached programmer typically language used develop website text design
While XML HTML XHTML provide language expression serf translator
Different type node tree represented specific interface
In word node type defined communicates node
Each node node type property specifies type node sibling leaf
For example node type property constant property node property specifies type node
So node type property constant node one know node object object Element
This object us Element interface define method property particular node
Node Types Different node type description A node object represented single node tree
It element node attribute node text node type described section node type
All object inherit property method dealing parent child node object parent child node
For example text node child node similar node add child node result error
Objects DOM tree may addressed manipulated using method object
The public interface DOM specified API
The history Document Object Model intertwined history late well first widely implemented

ÐÔÅØ obj stream Áe V DÀ h ëÈÞG Uaeò oG Lå XçåYY ÓcBhàíÜkR E Ûë GXuN endstream endobj obj R R R endobj obj R R R R R endobj obj stream xÚµV w ødHÌI pí Pà ç rb èc jZ ÅÊÞ æzGÓ endstream endobj obj R R R endobj obj R R R endobj obj stream Å ª L ßý V EO uMá Ð pzn ôò ol r UÝÍ
R rúLËÖL ë
JCB CmÃD
Tø L ÿ Ghjå endstream endobj obj R R R endobj obj R R R R R R endobj obj stream e ü I çÎm T JÁC Ë Hà

Stack Exchange network consists Q A community including largest trusted online community developer learn share knowledge build career
The exercise I trying solve You implementing binary search tree class scratch addition insert find delete method return random node tree
All node equally likely chosen
Design implement algorithm explain would implement rest method
The answer book But problem
With algorithm I see node equally likely chosen
In line say number algorithm continue left node otherwise right node
It work tree depth
When tree taller probability node chosen equal
Am I wrong
Does algorithm work
The algorithm work fine
Note node field tell total number node subtree rooted node
Throughout answer I going assume child zero child
Thus node tree Consider root tree
If choose node tree uniformly random left subtree probability root node probability right subtree probability
By equation three probability add
If look line algorithm implement exactly probability distribution
It generates uniform random integer range
If number range algorithm pick random node left subtree equal pick root otherwise pick random node right subtree
And argument I gave depend node consider root recursive call behave
The algorithm care depth node recurses subtree chooses subtrees correct probability
I want show algorithm indeed randomly chooses node according uniform distribution
Consider root node
We two subtrees left subtree size right subtree size
The total number node tree size
Now I want prove distribution uniform
node e P e size probability algorithm chooses e
There three possibility either e root e left subtree e right subtree
If e root node uniformly selects integer statement true probability size
If node e left subtree probability statement true P InLeft equal size conditional probability node e chosen given left subtree P e InLeft
Thus probability e left subtree AND e chosen equal P InLeft e chosen P InLeft P e InLeft size size If node e right subtree using argument previous case P InRight P InRight size size
Thus distribution uniform
Consider arbitrary node reached root along path
We explicitly compute probability chosen
Observe visiting node selected probability size child recursed probability size size
Hence choice stochastically independent probability select size size size size size size size size show
Fill detail formal proof
By posting answer agree
asked viewed active site design logo Stack Exchange Inc user contribution licensed

Posted April Nicholas Zakas Tags When I started writing first edition working title featured lot content make final cut
I actually several chapter worth content sitting around computer
Several chapter discus implementing common computer science pattern algorithm JavaScript
At time I thought would make good addition book ultimately ended holding back fit final vision book
Instead letting content sit computer I decided start sharing blog
One first data structure learn computer science linked list
As quick refresher Wikipedia description It consists sequence node containing arbitrary data field one two reference link pointing next previous node
The principal benefit linked list conventional array order linked item may different order data item stored memory disk allowing list item traversed different order
A linked list datatype contains pointer link another datum type
Linked list permit insertion removal node point list constant time allow random access
Linked list often used computer science program help introduce concept pointer
The list pointer head node turn point next node
Each node consists two field field containing value location list field containing pointer next node list empty pointer last item
To begin JavaScript implementation start creating single node
This done easily using object literal When want create list create new node assign node property Once list traverse following property node get specific point list
Of course hand annoying error prone better create custom type
Here start The constructor creates object private property contains number item list point first item list
Initially set list empty
Adding item linked list requires walking structure find correct location creating new node inserting place
The one special case list empty case simply create new node assign The complicated part method traversing list find correct spot insert new node
Traditional algorithm use two pointer point item inspected point node
When mean pointing last item list
I recreated algorithm JavaScript though several arguably better alternative tradition sake
Retrieving value list involves type traversal The method check ensure index specified within valid range traversing list
The loop used figure correct place stop list find data requested
Removing node linked list little bit tricky
You need find node remove set previous node property appropriate next node
This skipping appropriate node result removal list
The typical implementation linked list node removal two pointer pointer indicates node inspected pointer point node prior
When node remove must set execute removal
The code Note one special case removal first item
In case need set equal moving pointer start list next item
Once complete use linked list implementation like This basic implementation linked list rounded method return length list method convert regular array
The full source code available GitHub project
I updating project blog post hopefully build nice collection implementation reference
Just clear I advocating using production code native object serf need quite well
This purely academic exercise treated
Disclaimer Any viewpoint opinion expressed article Nicholas Zakas way reflect employer colleague anyone else
I speak
This site
You support work number way
Your support greatly appreciated
Copyright Nicholas Zakas
All Rights Reserved
All code example page unless otherwise indicated

learn share knowledge build career
Other nice way require file directory used mainly practice utility
When pas folder Node require check endpoint
If defined check finally extension format
So likely entry point requiring module
See official Docs
Also ask require file directory
Usually require directory expose encapsulated interface file way different ever module
But suppose wanted include folder content include folder note best practice come le often would think
Then could use load file directory synchronously setting export asynchronously usually asking terrible bug attache like I hardly ever see people wanting use pattern though time want go something like Typically language web server look certain file load first visiting directory like priority traditionally either index default
In php would plain HTML would In Node web server name anything file run
typically handle app startup routing function application require module add functionality
If running website web app would also handle become basic HTTP web server replacing role something traditional like Apache
By posting answer agree
asked viewed active Get In get see By subscribing agree
site design logo Stack Exchange Inc user contribution licensed

Share Powered

Università di Pisa Imperial College London Khorasan Institute Higher Education Khorasan Institute Higher Education Khorasan Institute Higher Education Khorasan Institute Higher Education Khorasan Institute Higher Education Khorasan Institute Higher Education Khorasan Institute Higher Education

method solution problem depends solution smaller instance problem opposed
The approach applied many type problem one central idea computer science
The power recursion evidently lie possibility defining infinite set object finite statement
In manner infinite number computation described finite recursive program even program contains explicit repetition
Most computer programming language support recursion allowing call within program text
Some define looping construct rely solely recursion repeatedly call code
prof language computationally powerful Turing complete imperative language meaning solve kind problem imperative language even without iterative control structure
A common tactic divide problem type original solve combine result
This often referred combined store result solving avoid solving repeatedly incurring extra computation time referred
A recursive function definition one meaning input function produce result without recurring one meaning input program recurs call
For example function defined recursively equation
Neither equation constitutes complete definition first base case second recursive case
Because base case break chain recursion sometimes also called terminating case
The job recursive case seen breaking complex input simpler one
In properly designed recursive function recursive call input problem must simplified way eventually base case must reached
Functions intended terminate normal example exception
Neglecting write base case testing incorrectly cause
For function one computes obvious base case implied input data one may add number term added series example provide criterion establishes base case
Such example naturally treated successive term output partial sum converted recursion using indexing parameter say compute th term th partial sum
Many must process generate arbitrarily large quantity
Recursion one technique representing data whose exact size know programmer specify data definition
There two type definition inductive definition
An inductively defined recursive data definition one specifies construct instance data
For example defined inductively using syntax The code specifies list string either empty structure contains string list string
The definition permit construction list finite number string
Another example inductive positive Similarly recursive often used model structure programming language
Language designer often express grammar syntax grammar simple language arithmetic expression multiplication addition This say expression either number product two expression sum two expression
By recursively referring expression second third line grammar permit arbitrarily complex arithmetic expression one product sum operation single expression
A coinductive data definition one specifies operation may performed piece data typically coinductive definition used data structure infinite size
A coinductive definition infinite string given informally might look like This similar inductive definition list string difference definition specifies access content data via function content may whereas inductive definition specifies create structure may created
related coinduction used compute particular instance possibly infinite object
As programming technique used often context programming language preferable recursion desired size precision program output unknown
In case program requires definition infinitely large infinitely precise result mechanism taking finite portion result
The problem computing first n one solved corecursive program

Recursion contains single known recursion contains multiple known
Standard example single recursion include list traversal linear search computing factorial function standard example multiple recursion include search
Single recursion often much efficient multiple recursion generally replaced iterative computation running linear time requiring constant space
Multiple recursion contrast may require exponential time space fundamentally recursive able replaced iteration without explicit stack
Multiple recursion sometimes converted single recursion desired thence iteration
For example computing Fibonacci sequence naively multiple iteration value requires two previous value computed single recursion passing two successive value parameter
This naturally framed corecursion building initial value tracking step two successive value see
A sophisticated example using allows iterative tree traversal rather multiple recursion
Most basic example recursion example presented demonstrate function call
recursion occurs function called another function called either directly indirectly
For example call direct recursion call call indirect recursion Chains three function possible example function call function function call function function call function
Indirect recursion also called symmetric term though simply difference emphasis different notion
That call call turn call point view alone indirectly recursing point view alone indirectly recursing point view mutually recursing
Similarly set three function call called set mutually recursive function
Recursion usually done explicitly calling function name
However recursion also done via implicitly calling function based current context particularly useful known
Some author classify recursion either structural generative
The distinction related recursive procedure get data work process data Functions consume structured data typically decompose argument immediate structural component process component
If one immediate component belongs class data input function recursive
For reason refer function STRUCTURALLY RECURSIVE FUNCTIONS
Thus defining characteristic structurally recursive function argument recursive call content field original input
Structural recursion includes nearly tree traversal including XML processing binary tree creation search etc
By considering algebraic structure natural number natural number either zero successor natural number function factorial may also regarded structural recursion
alternative Many recursive algorithm generate entirely new piece data given data recur
refers kind generative recursion
Examples generative recursion include
This distinction important function
A classic example recursive procedure function used calculate The function also written This evaluation recurrence relation demonstrates computation would performed evaluating pseudocode This factorial function also described without using recursion making use typical looping construct found imperative programming language The imperative code equivalent mathematical definition using accumulator variable The definition translates straightforwardly example iteration implemented recursively
The computes two integer written recursively
Function definition greatest common divisor express The recursive program equivalent iterative algorithm computation shown show step evaluation would performed language eliminates tail call
Below version algorithm using explicit iteration suitable language eliminate tail call
By maintaining state entirely variable using looping construct program avoids making recursive call growing call stack
The iterative algorithm requires temporary variable even given knowledge Euclidean algorithm difficult understand process simple inspection although two algorithm similar step
The Towers Hanoi mathematical puzzle whose solution illustrates recursion
There three peg hold stack disk different diameter
A larger disk may never stacked top smaller
Starting disk one peg must moved another peg one time
What smallest number step move stack
Example implementation Although recursive function explicit solution Tower Hanoi sequence reduced explicit formula
The algorithm method searching single element cutting array half recursive pas
The trick pick midpoint near center array compare data point data searched responding one three possible condition data found midpoint data midpoint greater data searched data midpoint le data searched
Recursion used algorithm pas new array created cutting old one half
The binary search procedure called recursively time new smaller array
Typically array size adjusted manipulating beginning ending index
The algorithm exhibit logarithmic order growth essentially divide problem domain half pas
Example implementation binary search C An important application recursion computer science defining dynamic data structure
Recursive data structure dynamically grow theoretically infinite size response runtime requirement contrast size static array must set compile time
Recursive algorithm particularly appropriate underlying problem data treated defined recursive term
The example section illustrate known structural recursion
This term refers fact recursive procedure acting data defined recursively
As long programmer derives template data definition function employ structural recursion
That recursion function body consume immediate piece given compound value
Below C definition linked list node structure
Notice especially node defined term
The next element pointer another effectively creating list type
Because data structure defined recursively procedure operate implemented naturally recursive procedure
The procedure defined walk list list empty list pointer value NULL
For node print data element integer
In C implementation list remains unchanged procedure
Below simple definition binary tree node
Like node linked list defined term recursively
There two pointer left pointing left right pointing right
Operations tree implemented using recursion
Note two pointer left right tree operation may require two recursive call At two recursive call made given call defined
The example illustrates binary tree
A special case binary tree data element node order
Since number file may vary practical way traverse thus enumerate content
Traversing filesystem similar therefore concept behind tree traversal applicable traversing filesystem
More specifically code would example filesystem
This code blend line least somewhat recursion
It essentially recursive implementation best way traverse
It also example direct indirect recursion
The method rtraverse purely direct example method traverse indirect call rtraverse
This example need base case scenario due fact always fixed number file directory given filesystem
In actual implementation rather pure recursive function single check base case otherwise recursive step number modification may made purpose clarity efficiency
These include On basis elegance wrapper function generally approved base case frowned upon particularly academia
Hybrid algorithm often used efficiency reduce overhead recursion small case recursion special case
A function directly called recurse instead calling separate auxiliary function actually recursion
Wrapper function used validate parameter recursive function skip perform initialization allocate memory initialize variable particularly auxiliary variable level recursion partial computation handle exception error
In language support auxiliary function nested inside wrapper function use shared scope
In absence nested function auxiliary function instead separate function possible private called directly information shared wrapper function using
base case also known consists checking base case making recursive call checking next call base case instead calling checking base case
particularly done efficiency reason avoid overhead function call immediately return
Note since base case already checked immediately recursive step need checked separately one need use wrapper function case overall recursion start base case
For example factorial function properly base case
immediately returning
may miss mitigated wrapper function
primarily concern many base case encountered Null pointer tree linear number function call hence significant saving algorithm illustrated search
tree corresponds considering leaf node child base case rather considering empty node base case
If single base case computing factorial provides saving
Conceptually considered either base case recursive step checking base case recursion considered different base case one step removed standard base case complex recursive step namely check valid recurse considering leaf node rather Null node base case tree
Because complicated flow compared clear separation base case recursive step standard recursion often considered poor style particularly academia
A basic example given DFS binary tree see section standard recursive discussion
The standard recursive algorithm DFS In instead In term standard step move base case check recursive step
Alternatively considered different form base case recursive step respectively
Note requires wrapper function handle case tree empty root node Null
In case height node Null pointer child leaf cut number function call half worst case
In C standard recursive algorithm may implemented The algorithm may implemented Note use Boolean AND operator recursive call made node valid
Note first term AND pointer node second term bool overall expression evaluates bool
This common idiom recursive
This addition evaluation Boolean OR operator check right child left child fails
In fact entire function replaced single Boolean expression return statement legibility suffers benefit efficiency
Recursive algorithm often inefficient small data due overhead repeated function call return
For reason efficient implementation recursive algorithm often start recursive algorithm switch different algorithm input becomes small
An important example often implemented switching data sufficiently small
Hybrid recursive algorithm often refined derived hybrid merge sort
Recursion iteration equally expressive recursion replaced iteration explicit stack iteration replaced tail recursion
Which approach preferable depends problem consideration language used
In iteration preferred particularly simple recursion avoids overhead function call call stack management recursion generally used multiple recursion
By contrast recursion preferred tail recursion optimization leading little overhead sometimes explicit iteration available
Compare template compute x defined x f n x x For imperative language overhead define function functional language overhead define accumulator variable x
For example factorial function may implemented iteratively C assigning loop index variable accumulator variable rather passing argument returning value recursion Most use today allow direct specification recursive function procedure
When function called program keep track various instance function often using although method may used
Every recursive function transformed iterative function replacing recursive call simulating call stack explicitly managed program
Conversely iterative function procedure evaluated computer see expressed term recursive function iterative control construct routinely rewritten recursive form
However practice rewriting depends feature language
notable mainstream language function call including may cause stack allocation would occur use looping construct language working iterative program rewritten recursive form may although tail call elimination may feature covered language specification different implementation language may differ tail call elimination capability
In language favor iterative looping construct usually significant time space cost associated recursive program due overhead required manage stack relative slowness function call function call particularly typically fast operation difference usually le noticeable
As concrete example difference performance recursive iterative implementation factorial example depends highly compiler used
In language looping construct preferred iterative version may much several order magnitude faster recursive one
In functional language overall time difference two implementation may negligible fact cost multiplying larger number first rather smaller number iterative version given happens may overwhelm time saved choosing iteration
In programming language maximum size much le space available recursive algorithm tend require stack space iterative algorithm
Consequently language sometimes place limit depth recursion avoid stack overflow one language
Note caveat regarding special case
Multiply recursive problem inherently recursive prior state need track
One example contrast list traversal linear search list singly recursive thus naturally iterative
Other example include function
All algorithm implemented iteratively help explicit programmer effort involved managing stack complexity resulting program arguably outweigh advantage iterative solution
function function recursive call hence build deferred operation
For example gcd function shown
In contrast factorial function also recursive call tail position build deferred multiplication operation must performed final recursive call completes
With treat call rather function call function gcd execute using constant space
Thus program essentially iterative equivalent using imperative language control structure like loop
The significance tail recursion making call tail call caller return position need saved recursive call return branch directly previously saved return position
Therefore language recognize property tail call tail recursion save space time
In simple case function calling instruction placed recursive call executed per recursion instruction placed recursive call
The latter executed repeatedly maximum recursion reached
Consider example The recursive algorithm expressed
They usually simplified single term
If function form Then thus represents number recursive call level recursion represents factor smaller input next level recursion
number piece divide problem represents work function independent recursion
partitioning recombining level recursion

