In used like system distributed data store system
The system said support given model operation memory follow specific rule
The data consistency model specifies contract programmer system wherein system guarantee programmer follows rule memory result reading writing updating memory predictable
This different next occurs system cached consistency data respect processor
This handled Coherence coherence deal maintaining global order writes single location single variable seen processor
Consistency deal ordering operation multiple location respect processor
partially maintain contract translating memory operation operation way preserve
To hold contract compiler may reorder memory instruction library call encapsulate required synchronization
Verifying model checking general even protocol
Consistency model define rule apparent order visibility update tradeoff
Assume following case occurs The consistency model determine whether client B see write client A
There two method define categorize consistency model issue view
Issue Issue method describes restriction define process issue operation
View View method defines order operation visible process
For example consistency model define process allowed issue operation previously issued operation completed
Different consistency model enforce different condition
One consistency model considered stronger another requires condition model
In word model fewer constraint considered weaker consistency model
These model define hardware need laid programmer must code
The chosen model also affect compiler instruction
Generally control dependency instruction writes location ordered compiler reorder required
However model described may allow Writes Loads reordered may
Strict consistency strongest consistency model
Under model write variable processor need seen instantaneously processor
The Strict model diagram model diagram describe time constraint instantaneous
It better understood though global clock present every write reflected processor cache end clock period
The next operation must happen next clock period
This rigid model impossible implement without forgoing performance
In model programmer expected result received every time
It deterministic
A distributed system many node take time copy information written one node node responsible replicating information
That time ca zero take time information propagate space limit fast information travel space
Therefore strict consistency impossible
The best one design system approach theoretical minimum
The model weaker memory model strict consistency
A write variable seen instantaneously however writes variable different processor seen order processor
As defined Lamport Sequential Consistency met result execution operation processor executed sequential order operation individual processor appear sequence order specified program
Program order within processor sequential ordering operation processor maintained
In order preserve sequential order execution processor operation must appear execute instantaneously atomically respect every processor
These operation need appear completed physically impossible send information instantaneously
For instance bus line posted information guaranteed processor see information instant
Thus passing information bus line completes execution respect processor appeared executed
architecture cached architecture interconnect network instantaneous contain slow path processor memory
These slow path result sequential inconsistency memory receive broadcast data faster others
Sequential consistency produce result
This sequence sequential operation processor different different run program
All memory operation need happen program order
also known atomic consistency defined sequential consistency constraint
weakening model sequential consistency categorizing event causally related
It defines write operation causally related need seen order process
This model relaxes Sequential consistency concurrent writes processor writes causally related
Two writes become causally related one write variable dependent previous write variable processor second write read first write
The two writes could done processor different processor
As sequential consistency read need reflect change instantaneously however need reflect change variable sequentially
W causally related W
would Sequentially Inconsistent Causally consistent
W x W x causally related due read made x W x
In order consistency data maintained attain scalable processor system every processor memory model derived
All processor need consistent order see writes done one processor way see writes different processor location coherence maintained
However need consistent writes different processor different location
Every write operation divided several memory
A read one memory happen write memory completes
Therefore data read stale
Thus processor PC execute younger load older store need stalled
Read Write Read Read Write Write ordering still preserved model
The processor consistency model similar model stronger condition defines writes memory location must seen sequential order process
Process consistency weaker sequential consistency stronger PRAM consistency model
The implement variation processor consistency incomparable neither weaker stronger Goodmans definition
All processor need consistent order see writes one processor way see writes different processor location
However need consistent writes different processor different location
Pipelined RAM presented Lipton Sandberg one first described consistency model
Due informal definition fact least two subtle different implementation one Ahamad et al
one Mosberger
In PRAM consistency process view operation single process order issued process operation issued different process viewed different order different process
PRAM consistency weaker processor consistency
PRAM relaxes need maintain coherence location across processor
Here read variable executed writes processor
Read Write Read Read Write Write ordering still preserved model
Cache consistency requires write operation memory location performed sequential order
Cache consistency weaker process consistency incomparable PRAM consistency
In slow consistency process read value previously written memory location subsequently read earlier value location
Writes performed process immediately visible process
Slow consistency weaker model PRAM cache consistency
Slow memory diagram depicts slow consistency example
The first process writes memory location X writes memory location Y
The second process read Y read X even though X written Hutto Phillip Mustaque Ahamad illustrate appropriate programming slow memory consistency expressive efficient
They mention slow memory two valuable property locality supporting reduction atomic memory
They propose two algorithm present expressiveness slow memory
The following model require specific synchronization programmer
Program order atomicity maintained group operation read writes
This derived understanding certain memory operation conducted critical section need seen processor operation critical section completed instance
It also exploit fact program written executed system contain required synchronization make sure data race occur SC outcome produced always
Thus weak ordering operation synchronization operation classified operation
Synchronization operation signal processor make sure completed seen previous operation done processor
In order maintain Weak ordering write operation prior synchronization operation must globally performed synchronization operation
Operations present synchronization operation also performed synchronization operation completes
Therefore access synchronization variable sequentially consistent read write performed previous synchronization operation completed
Coherence relaxed model
Once requirement met data operation reordered
There high reliance explicit synchronization program
For weak ordering model programmer must use atomic locking instruction store conditional load linked must label synchronization variable use fence
The model relaxes Weak consistency model distinguishing entrance synchronization operation exit synchronization operation
Under weak ordering synchronization operation seen operation processor need visible Synchronization operation done processor proceeds
However Release consistency model entry critical section termed acquire operation respect local memory variable need completed
During exit termed release change made local processor propagated processor
Coherence still maintained
The acquire operation performed access critical section
A release operation performed allow processor use shared variable
Among synchronization variable sequential consistency processor consistency maintained
Using SC competing synchronization variable processed order
However PC pair competing variable need follow order
Younger Acquires allowed happen older Releases
This variant Release Consistency model
It also requires use Acquire Release instruction explicitly state entry exit critical section
However Entry Consistency every shared variable assigned synchronization variable specific
This way Acquire variable x operation related x need completed respect processor
This allows concurrent operation different critical section different shared variable occur
Concurrency seen critical operation shared variable
Such consistency model useful different matrix element processed time
In general consistency copy memory location eventually identical process writes completed
In local consistency process performs operation order defined program
There constraint ordering write operation process appear performed
Local consistency weakest consistency model shared memory system
Some consistency model follows Several consistency model conceived express restriction respect ordering visibility operation deal specific fault assumption
Some different consistency model defined relaxing one requirement called relaxed consistency model
These consistency model provide memory consistency hardware level
In fact programmer responsible implementing memory consistency applying synchronization technique
The model classified based four criterion detailed
There four comparison define relaxed consistency Sequential consistency two requirement program order write atomicity
Different relaxed consistency model obtained relaxing requirement
This done along relaxed constraint performance increase programmer responsible implementing memory consistency applying synchronisation technique must good understanding hardware
Potential relaxation The following model model relaxed consistency An approach improving performance hardware level relaxing PO write followed read effectively hide latency write operation
The optimisation type relaxation relies allows subsequent read relaxed order respect previous writes processor
Because relaxation program like XXX may fail give SC result relaxation
Whereas program like YYY still expected give consistent result enforcement remaining program order constraint
Three model fall category
IBM model strictest model
A Read complete earlier write different address prohibited returning value write unless processor seen write
The SPARC total store ordering model TSO model partially relaxes IBM Model allows read return value processor write respect writes location
return value write others see
Similar previous model return value write unless processor seen write
The processor consistency model PC relaxed three model relaxes constraint read complete earlier write even made visible processor
In Example A result possible IBM Read A issued write A processor completed
On hand result possible TSO PC allow read flag writes flag single processor
In Example B result possible PC allows return value write even visible
This possible two model
To ensure sequential consistency model safety net fence used manually enforce constraint
The model specialised manually placed operation
These instruction consist memory instruction instruction branch
On hand TSO PC model provide safety net programmer still use operation make appear like program order still maintained write following read
In case TSO PO appears maintained R W already part replaced requires W dummy return read value
Similarly PC PO seems maintained read replaced write already part
However compiler optimisation done exercising relaxation alone
Compiler optimisation require full flexibility reordering two operation PO ability reorder write respect read sufficiently helpful case
Example A
Initially Example B
Initially Some model relax program order even relaxing even ordering constraint writes different location
The SPARC Partial Store Ordering model PSO example model
The ability pipeline overlap writes different location processor key hardware optimisation enabled PSO
PSO similar TSO term atomicity requirement allows processor read value write preventing processor reading another processor write write visible processor
Program order two writes maintained PSO using explicit STBAR instruction
The STBAR inserted write buffer implementation FIFO write buffer
A counter used determine writes STBAR instruction completed trigger write memory system increment counter
A write acknowledgement decrement counter counter becomes signifies previous writes completed
In example A B PSO allows consistent result
The safety net PSO provides similar TSO imposes program order write read enforces write atomicity
Similar previous model relaxation allowed PSO sufficiently flexible useful compiler optimisation requires much flexible optimisation
In model operation different location relaxed
A read write may reordered respect different read write different location
The may classified category two type Release consistency model RCsc RCpc also come model
Three commercial architecture also proposed category relaxation Digital Alpha SPARC relaxed memory order RMO IBM PowerPC model
All model allow reordering read location except Digital Alpha
These model violate sequential example A B
An additional relaxation allowed model absent ninth previous model memory operation following read operation overlapped reordered respect read
All model expect RCpc PowerPC allow read return value another processor early write
From programmer perspective model must maintain illusion write atomicity even though allow processor read write early
These model classified two category based type safety net provided
Here necessity carefully written program seen
The nature synchronization help categorize Weak Ordering RCsc RCpc model
Where The Alpha RMO PowerPC model provide fence instruction program order imposed different memory operation
An example model relaxes constraint except reading others write early Weak Ordering
It classifies memory operation two category
To enforce program order programmer need find least one synchronisation operation program
The assumption work reordering memory operation data region synchronisation operation affect outcome program
They act safety net enforcing program order
The way work counter track number data operation counter becomes zero synchronisation operation issued
Furthermore data operation issued unless previous synchronisation completed
Memory operation two synchronisation variable overlapped reordered without affecting correctness program
This model ensures write atomicity always maintained therefore additional safety net required Weak Ordering
More classification made memory operation depending occur
Operations divided ordinary special
Special operation divided sync nsync operation
Syncs correspond synchronisation operation nsyncs correspond data operation special operation used synchronisation
Sync operation divided acquire release operation
An acquire effectively read memory operation used obtain access certain set shared location
Release hand write operation performed granting permission access shared location
There two type Release consistency RCsc Release consistency Sequential consistency RCpc Release consistency processor consistency
The first type RCsc maintains SC among special operation RCpc maintains PC among operation
For RCsc constraint All Release Special
For RCpc write read program order relaxed All Release Special expect special write followed special read NOTE notation B implies operation A precedes B program order program order enforced
These three commercial architecture exhibit explicit fence instruction safety net
The Alpha model provides two type fence instruction Memory barrier MB Write memory barrier WMB
The MB operation used maintain program order memory operation MB memory operation barrier
Similarly WMB maintains program order among writes
The SPARC RMO model provides MEMBAR instruction customised order previous read writes respect future read write operation
There need using achieve order MEMBAR instruction used order write respect succeeding read
The PowerPC model us single fence instruction called SYNC instruction
It similar MB instruction little exception read occur program order even SYNC placed two read location
This model also differs Alpha RMO term Atomicity
It allows write seen earlier read completion
A combination read modify write operation may required make illusion write atomicity
Transactional Memory model combination cache coherency memory consistency model communication model shared memory system supported software hardware transactional memory model provides memory consistency cache coherency
A transaction sequence operation executed process transforms data one consistent state another
A transaction either commits conflict abort
In commits change visible process transaction completed abort discard change
Compared relaxed consistency model transactional model easier use provide higher performance sequential consistency model
Tanenbaum et defines two main reason replicating reliability performance
Reliability achieved replicated file system switching another replica case current replica failure
The replication also protects data corrupted providing multiple copy data different replica
It also improves performance dividing work
While replication improve performance reliability cause consistency problem multiple copy data
The multiple copy consistent read operation return value copy write operation single atomic operation transaction update copy operation take place
Tanenbaum Andrew Maarten Van Steen refer type consistency provided synchronous replication
However applying global synchronization keep copy consistent costly
One way decrease cost global synchronization improve performance weakening consistency restriction
Tanenbaum et defines contract software process memory implementation data store
This model guarantee software follows certain rule memory work correctly
Since system without global clock defining last operation writes difficult restriction applied value returned read operation
Some consistency model sequential also causal consistency model deal order operation shared replicated data order provide consistency
In model replica must agree consistent global ordering update
The goal consistency model provide consistent view data store process may carry concurrent update
One important consistency model defined Lamport
Tanenbaum et defines following condition The result execution read write operation process data store executed sequential order operation individual process appear sequence order specified program
Adve Gharachorloo define two requirement implement sequential consistency program order write atomicity
In sequential consistency notion time recent write operation
There operation interleaving process
A process see write operation process see read operation
Atomic memory defined sequential consistency real time constraint considering begin time end time operation
An execution linearizable operation taking place linearizable order placing point begin time end time guarantee sequential consistency
The defined Hutto Ahamad weaker consistency model sequential consistency making distinction causally related operation related
For example event b take effect earlier event causal consistency guarantee process see event b event Tanenbaum et defines data store considered causal consistent following condition Writes potentially causally related must seen process order
Concurrent writes may seen different order different machine
In grouping operation access synchronization variable sequentially consistent
A process allowed access synchronization variable previous writes completed
In word access synchronization variable permitted operation synchronization variable completely performed
The continuous consistency defined later consistency protocol section
In distributed system maintaining order control concurrent operation essential
In special data store without simultaneous update consistency model deal inconsistency le costly way
The following model consistency model An weak consistency model system lack simultaneous update
It defines update take long time replica eventually become consistent
Tanenbaum et defines monotonic read consistency follows If process read value data item x successive read operation x process always return value recent value
Monotonic read consistency guarantee process read value data item x time never see older value data item
Monotonic write consistency condition defined Tanenbaum et follows A write operation process data item X completed successive write operation X process
A value written process data item X always available successive read operation performed process data item X
In consistency update propagated performing previous read operation
Tanenbaum et defines following condition consistency A write operation process data item x following previous read operation x process guaranteed take place recent value x read
The implementation consistency model defined consistency protocol
Tanenbaum et illustrates consistency protocol model
Continuous consistency introduced Yu Vahdat
In model consistency semantic application described using conits application
Since consistency requirement differ based application semantics Yu Vahdat believe predefined uniform consistency model may appropriate approach
The application specify consistency requirement satisfy application semantic
In model application specifies consistency requirement conits abbreviation consistency unit
A conit physical logical consistency used measure consistency
Tanenbaum et describes notion conit giving example
There three inconsistency tolerated application
If three deviation bound set zero continuous consistency model strong consistency
protocol considered class consistency protocol simpler implement
For instance sequential ordering popular consistency model consistent ordering operation considered
The sequential ordering determined protocol
In protocol associated primary data item data store coordinate write operation data item
In simplest protocol support replication also known protocol write operation forwarded single server read operation performed locally
In protocol primary copy move process willing perform update
To update data item process first move location
As result approach successive write operation performed locally process read local copy data item
After primary finish update update forwarded replica perform update locally
This approach lead improvement
The diagram protocol depicts approach protocol
A process request write operation data item x
The current server considered new primary data item x
The write operation performed request finished primary sends update request backup server
Each backup sends acknowledgment primary finishing update operation
In protocol unlike protocol update carried replica
In active replication process associated replica perform write operation
In word update sent replica form operation order executed
All update need performed order replica
As result multicast mechanism required
There scalability issue implementing multicasting mechanism large distributed system
There another approach operation sent central coordinator sequencer
The coordinator first assigns sequence number operation forward operation replica
Second approach also solve scalability problem
Voting another approach protocol
In approach client request receives permission multiple server order read write replicated data
As example suppose distributed file system file replicated N server
To update file client must send request least order make agreement perform update
After agreement change applied file new version number assigned updated file
Similarly reading replicated file client sends request server order receive associated version number server
Read operation completed received version number recent version
In replicated file system protocol provides cache consistency cache generally controlled client
In many approach cache consistency provided underlying hardware
Some approach distributed system apply solution provide cache consistency
Cache consistency model differ coherence detection strategy define inconsistency occur
There two approach detect inconsistency static dynamic solution
In static solution compiler determines variable cause cache inconsistency
So compiler enforces instruction order avoid inconsistency problem
In dynamic solution server check inconsistency run time control consistency cached data changed cached
The coherence enforcement strategy another protocol
It defines provide consistency cache using copy located server
One way keep data consistent never cache shared data
A server keep data apply consistency protocol protocol ensure consistency shared data
In solution private data cached client
In case shared data cached two approach order enforce cache coherence
In first approach shared data updated server forward invalidation cache
In second approach update propagated
Most caching system apply two approach dynamically choose

Consistency Definition In context Consistency one property transaction
Consistency transaction mean transform database one consistent state another
Search Consistency UK US Search Consistency rest Computing Students

This action might possible undo
Are sure want continue
What Knowledge Consistency Check available

Stack Exchange network consists Q A community including largest trusted online community developer learn share knowledge build career
I asked question Did consistency check daily work
phone interview Biostatistician position
I know answer
Any information appreciated
To chl list focus frank data processing error I would add check subtler error address following question issue given particular order certainly incomplete Assuming database integrity data reasonable
Do roughly conform expectation conventional model would surprise someone familiar similar data
Are data internally consistent
For example one field supposed sum two others
How complete data
Are specified data collection planning phase
Are extra data planned
If
Most analysis implicitly explicitly model data parsimonious way include possibility variation general description
Each model suggests particular way identify outlier data deviate remarkably general description
Were attempt made identify understand outlier stage exploration analysis
In many case possible analyst introduce additional data analysis quality checking insight
For example many data set natural social science well business include least implicitly location information identifier Census region name country state county customer zip code
Even perhaps especially spatial correlation element EDA modeling analyst join data geographic representation location map look pattern outlier
One insidious error creep analysis loss data
When extracting field summarizing data reformatting datasets one two item dropped large dataset often nothing flag
But occasionally something important lost one extreme embarrassment ever discovered
Simple check comparing count total data need occur routinely guard thing
Another insidious error associated type conversion digital computing
For example recently I construct key matching two data file floating point field
The software Stata imported field single precision float one file whatever reason double precision float another file
Most time value matched case due different rounding
Some data lost result
I caught due application
In general pay check consistency field data type ints float length string etc
If spreadsheet ever used stage analysis expect worst
The problem even stray keystroke invisibly corrupt data
When result critical pay keep going back forth export spreadsheet analysis import back systematically compare make sure nothing untoward happened
Whenever database updated worthwhile pause perform systematic complete comparison old one make sure nothing lost changed corrupted process
At higher level whenever estimate performed regression PCA whatever worthwhile perform using different technique check sensitivity even possible error code
follow OLS regression form robust regression compare coefficient
For important result comforting obtain answer using two different software platform
Perhaps best kind general consistency check anyone perform graph everything early often
I suppose form Quality Control specifically regularly check working database corrupted due error transfer copy update sanity check
This may also mean ensuring intermediate computation either manually additional code macro statistical software
Other information may found ICH reference guide EMEA
add good point When using Excel I always generate case number first column line copied last column
Excel seems quite happy sort column time causing chaos careful select
Your may even aware happened
Being able check case number agree first last column line useful precaution
I always review outlier
Double entry data separate people recommended critical work
When entering data paper document good idea use reference identifier able refer back exact document line entry derived numbering data entry form help
Edit Another item I know editing spreadsheet fraught problem much easier clean data entry
However I also keep original unedited version change verified worst case restored
By posting answer agree
asked viewed active site design logo Stack Exchange Inc user contribution licensed

Stack Exchange network consists Q A community including largest trusted online community developer learn share knowledge build career
I understand soundness implies consistency
Also I understand consistency alone imply soundness
But consistency completeness imply soundness
Scott Aaronson hint otherwise
What I exactly missing
Update By completeness I assume sentence true interpretation deducible
By soundness I assume deduced sentence true interpretation
Finally consistency I assume sentence P negation P deduced
In Scott Aaronson blog post linked syntactic mean sentence P
Syntactic mean
And mean P deducible axiom valid possible axiom
Consistency completeness imply soundness could set axiom theorem P P deducible axiom P deducible axiom model axiom P false P true
Aaronson give example post If I believe giant purple boogeyman moon presumably belief unsound might perfectly consistent various belief boogeyman
There giant purple boogeyman moon perhaps syntactically axiom believe giant purple boogeyman moon
Your axiom may syntactically complete allow deduce least one sentence giant purple boogeyman moon giant purple boogeyman moon
But fact true giant purple boogeyman moon deduction unsound even though axiom deductive system consistent complete
The hardest concept probably
Soundness relates syntactic structure sentence deduction rule sentence
A language set along relation function member set
For example Gödel underlying Peano axiom set integer least equality relation successor function
The Peano axiom I think prove something Peano axiom true natural number
But Gödel proved Peano axiom sentence language Peano axiom fact true natural number derivable Peano axiom
By posting answer agree
asked viewed active site design logo Stack Exchange Inc user contribution licensed

Stack Exchange network consists Q A community including largest trusted online community developer learn share knowledge build career
By I mean following definition Total Event Ordering Controller replica process event order subsequently controller application instance reach internal state
If understanding correct difference two word used interchangeably
However I would like make sure I mistaken
In case concept different could stress difference perhaps provide example
That would much appreciated
Thank Total FIFO causal different sequential approach ordering event
Now consistency applies type ordering different level local global
Sequential consistency requires operation appear executed atomically sequential order consistent order seen local level individual process
This similar serializability used database theory
Linearizability another type consistency applies order must also preserve global ordering non overlapping operation
By posting answer agree
asked viewed active site design logo Stack Exchange Inc user contribution licensed

consistency consistence eubstance body property holding together retaining shape wool body rayon dough enough consistency ready bake consistency consistence harmonious uniformity agreement among thing part consistency logical coherence accordance fact rambling argument lacked consistency consistency logic attribute logical system constituted none proposition deducible axiom contradict one another consistency local coherence consistency correspondence compatibility consistency reliability uniformity quality consistent They want achieve high degree consistency process product
consistency degree viscosity something Mix consistency thick paste
consistency Freedom contradiction state system axiom none proposition deduced mutually contradictory Consistency condition standing adhering together fixed union part body existence firmness coherence solidity Consistency degree firmness density spissitude Consistency stand together united whole combination Consistency firmness constitution character substantiality durability persistency Consistency agreement harmony part complex thing among thing different time harmony conduct profession congruity correspondence consistency law regulation judicial decision consistency opinion consistency conduct character Consistency In negotiation consistency consistency principle refers negotiator strong psychological need consistent prior act statement
Robert Cialdini research team conducted extensive research Cialdini refers Principle Persuasion
Described book Influence Science Practice principle state people live publicly said written
So Cialdini encourages u others write commitment route others live promise
consistency The thickness texture thing
The milkshake thick consistency like meant
Chaldean Numerology The numerical value Consistency Chaldean Numerology Pythagorean Numerology The numerical value Consistency Pythagorean Numerology Select another language Please enter email address LLC
Web


Thanks vote
We truly appreciate support

Database Consistency state valid data written database
If transaction executed violates database consistency rule entire transaction rolled back database restored original state
On hand transaction successfully executes take database one state consistent rule another state also consistent rule
Database consistency mean transaction correct transaction break rule defined program
Database consistency important regulates data coming reject data fit rule
For example column database may value coin flip head tail
If user attempt put sideways consistency rule database would allow
You may experience consistency rule leaving field web page form empty
When person filling form online forgets fill one required space NULL value go database causing form rejected blank space something
Consistency second stage Atomicity Consistency Isolation Durability set guideline ensuring accuracy database transaction
There error
Please try
Thank signing

learn share knowledge build career
I reading AI textbook I curious difference monotonicity admissibility heuristic I know mutually exclusive
As far I tell admissible heuristic simply mean ensured get shortest path solution one exists
What I struggling concept monotonic property
Can someone describe way I might understand
Similarly I determine given heuristic
One example given book Sliding Puzzle
One heuristic I considering place tile intuitively I say I know admissible I formal way showing
say The second solution ensure optimal path repeated state always first one followed case search
This property hold impose extra requirement namely requirement also called
When talking function monotone mean function increase decrease
In word ordering range stay throughout domain
For reason problem solution maintains shortest path matter step start
The property heuristic mean page
Admissibility A search algorithm admissible guaranteed find minimal path solution whenever solution exists
Breadth first search admissible look every state level n considering state level
Monotonicity This property asks algorithm locally admissible always underestimate cost two state search space
Recall require g n n
A heuristic function h monotone state ni nj nj descendant ni h ni h nj cost ni nj
heuristic evaluation goal state h Goal agent may learn knowledge contradicts already know
For example may replace statement negation
Thus knowledge base may grow new fact monotonic fashion
The advantage monotonic learning simplified choice learning strategy agent may learn knowledge contradicts already know
So may replace old knowledge new belief sufficient reason
The advantage learning applicability real domain freedom order thing learned A related property consistency knowledge
If architecture must maintain consistent knowledge base learning strategy us must monotonic
By posting answer agree
asked viewed active site design logo Stack Exchange Inc user contribution licensed

