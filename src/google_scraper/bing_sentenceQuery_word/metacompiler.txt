A used chiefly
They subset specialized class compiler writing tool called
The input metacompiler written specialized designed chiefly purpose constructing
The language compiler produced called
The minimal input producing specifying grammar transformation
Metacompilers reduce task writing compiler automating aspect regardless
This make possible design appropriate specification particular problem
A metacompiler reduces cost producing point becomes economically feasible include solution problem design
Metacompiler powerful string symbol processing language also useful generating wide range software engineering analysis tool
Besides useful development metacompiler prime example language designed domain compiler writing
A metacompiler existing computer programming language
The process metacompiler written metalanguage compiling equivalent
Most common compiler written today
powerful tool many metacompilers allowing easy extension metaprogramming metalanguage
The feature separate metacompiler apart compiler compiler take input specialized language describes aspect compiler operation
A metaprogram produced metacompiler complete program written general
The powerful attribute allowing ease development computer programming language computer tool
Command line processor text string transforming analysis easily coded using metaprogramming metalanguage metacompilers
A full featured development package would include linker support library
Usually machine oriented language required writing support library
C could used machine oriented language
A library consisting support function required compilation process usually round full metacompiler package
In Computer Science
As data
Data describing data
A language used describe language
Meta may also mean
A operates higher level abstraction order describe property language
BNF formal originally used define
BNF weak describes say nothing meaning
writing ability treat data
A metacompiler take input written higher level abstraction specifically designed purpose
The output executable object program
An analogy drawn That compiler take input programming language program compiler take input program
Many advocate call process creating new implementation Forth constitutes metacompiler
The FORTH definition metacompiler This Forth use metacompiler disputed mainstream computer science
See
The actual Forth process compiling combination Forth sometimes long established terminology computer science
Metacompilers general compiler writing system
Besides FORTH metacompiler concept indistinguishable extensible language
The actual process act lower level defining minimum subset forth word used define additional forth word A full FORTH implementation defined base set
This sound like bootstrap process
The problem almost ever general purpose language compiler also fit FORTH metacompiler description
Just replace X common language C PASCAL COBOL FORTRAN ADA MODULA etc
And X would meta compiler according FORTH usage metacompiler
A metacompiler operates abstraction level compiler compiles
It operates compiler level compiling
One see problem definition metacompiler
It applied language
However examining concept programming FORTH adding new word dictionary extending language way metaprogramming
It metaprogramming forth make metacompiler
Programming FORTH adding new word language
Changing language way
FORTH metacompiler FORTH language specifically designed metaprogramming
Programming FORTH extending FORTH adding WORDS forth vocabulary creates new FORTH
FORTH specialized metacompiler language
Metacompilers played significant role computer science computer industry
The early history metacompilers closely tied history Working group Syntax Driven Compilers
The group started primarily effort Howard Metcalfe Los Angeles area
In fall Howard Metcalfe designed two interpreter
One used analysis technique based method described Ledley Wilson
The used approach based work glennie generate random English sentence grammar
At time Val Schorre described two meta machine
One generative one analytic
The generative machine implemented produced random algebraic expression
Meta I first metacompiler implemented Schorre IBM UCLA January
His original interpreter metamachines written directly language
however written metalanguage able describe compilation language
Lee Schmidt Bolt Beranek Newman wrote metacompiler March utilized CRT display
This compiler produced actual machine code rather interpretive code partially bootstrapped Meta Schorre bootstrapped Meta II Meta I Spring
The paper refined metacompiler system presented Philadelphia ACM conference first paper metacompiler available general reference
The syntax implementation technique Schorre system laid foundation system followed
The system implemented small used implement small language
Many similar system immediately followed
Roger Rutman Sparkplug developed implemented LOGIK language logical design simulation IBM January
This compiler used algorithm produced efficient code Boolean expression
Another paper ACM proceeding describes developed Johnson UCLA IBM
Meta III represents attempt produce efficient machine code large class language
Meta III implemented completely assembly language
Two compiler written Meta III CODOL demonstration compiler PUREGOL dialect ALGOL
It pure gall call ALGOL
Late Lee Schmidt bootstrapped metacompiler EQGEN Beckman
EQGEN logic equation generating language
In System Development Corporation began major effort development metacompilers
This effort includes powerful metacompilers Bookl written LISP extensive backup capability
An outgrowth one system SDC Meta
The Meta system incorporates backup input stream enough facility parse language
This system successfully released wide number user many application compiling
It many elaborate stack attribute setting testing facility output mechanism
The fact Meta successfully translates JOVIAL program program clearly demonstrates power flexibility
The LOT system developed Stanford Research Institute modeled closely Meta II
It new construct allowing generate compiler would turn able compile subset
This system extensive facility used study characteristic analysis
SIMPLE specialized translator system designed aid writing SIMPLE written composed three component An executive syntax analyzer semantic constructor
The compiler developed Stanford Research Institute Menlo Park California
April
The early metacompiler history well documented TREE META paralleled SDC development
Unlike earlier metacompilers separated semantics processing syntax processing
The syntax rule contained building operation combined recognized language element tree node
The tree structure representation input processed simple form unparse rule
The unparse rule used node recognition attribute testing matched resulted associated action performed
In addition like tree element could also tested unparse rule
Unparse rule also recursive language able call unparse rule passing element thee tree action unparse rule performed
The concept metarnachine originally put forth Glennie simple three hardware version designed one actually implemented
The latter Washington University Louis
This machine built component instruction code described Schorre
CWIC Compiler Writing Implementing Compilers last known Schorre metacompiler
It developed Systems Development Corporation Erwin Book Dewey Val Schorre Steven Sherman With full power lisp list processing language optimizing algorithm could operate syntax generated list tree code generation
CWIC also symbol table built language
With resurgence language need parser generator easy use easy understand easy maintain metacompilers becoming valuable tool advanced software engineering project
The earliest Schorre metacompilers META I META II developed Val Schorre UCLA
Other Schorre based metacompilers followed
Each adding improvement language analysis code generation
In programming common use programming language name refer compiler programming language
The context distinguishing meaning
A program compiled using compiler
That also applies following
For example META II compiler language
The metalanguage Schorre line metacompilers functional programming language use top grammar analyzing syntax equation embedded output transformation construct
A syntax equation compiled function returning
name function name
body form logical expression consisting test may grouped alternate output production
A like language
Defining programming language analytically top natural
For example program could defined Defining program sequence zero declaration
In Schorre META language driving rule
The program rule example driving rule
The program rule function call declaration rule return
The loop operator repeatedly calling declaration returned
The operator always successful even zero declaration occur
Above program would always return success
The character set early compiler limited
The character used alternant operator
A B written A Parentheses used grouping
Describes construct A followed B As boolean expression would A sequence X Y implied X Y meaning
grouping operator
The order evaluation always left right input character sequence specified ordering test
Special operator word whose first character
used clarity
used last alternate previous alternant need present
Indicates X optionally followed A B
This specific characteristic metalanguage programming language
Backtracking avoided
Other compiler constructor system may declared three possible sequence left parser figure
The characteristic metaprogramming metalanguage common Schorre metacompilers derived
META I hand compiled metacompiler used compile META II
Little else known META I except initial compilation META II produced nearly identical code hand coded META I compiler
Each rule consists optionally test operator output production
A rule match part input program source character stream returning success failure
On success input advanced matched character
On failure input advanced
Output production produced form assembly code directly syntax rule
introduced tree building operator moving output production transforms unparse rule
The tree building operator used grammar rule directly transforming input
Unparse rule also test function matched tree pattern
Unparse rule called grammar rule transformed output code
The building unparse rule allowed local optimization performed analyzing parse tree
Moving output production unparse rule made clear separation grammar analysis code production
This made programming easier read understand
In Erwin Book Dewey Val Schorre Steven Sherman developed CWIC
Compiler Writing Implementing Compilers CWIC system composed three language intended permit description certain aspect translation straightforward natural manner
The syntax language used describe recognition source text construction intermediate structure
The generator language used describe transformation appropriate object language
The syntax language similar Dewey Val Schorre line metacompilers
It resembles TREEMETA building operation syntax language
The unparse rule TREEMETA extended work object oriented generator language based
CWIC includes three language Generators Language semantics similar
The parse thought recursive list
The general form Generators Language function The code process given included feature general purpose programming language plus form stuff would emit stuff onto output file
A generator call may used
The generator passed element pattern placed return value listed
For example That parse look like ADD x would called return x
A variable unparse rule local variable used
called return
Of note generator call unparse rule passed element position occupies
Hopefully x register return
The last transforms intended load atomic register return register
The first production would used generate AR Add Register instruction appropriate value general register
The example part generator
Every generator expression evaluates value con processed
The last transform could well written In case load return first parameter register returned getreg
function load getreg CWIC generator
From author CWIC A metacompiler assist task automating noncreative aspect aspect regardless language produced compiler translate
This make possible design language appropriate specification particular problem
It reduces cost producing processor language point becomes economically feasible begin solution problem language design

Stack Exchange network consists Q A community including largest trusted online community developer learn share knowledge build career
I following quotation compiler course context graph coloring Because slow graph coloring tends used batch compiler linear scan tends used JIT compiler
I could find clear definition online
So make compiler batch compiler
A JIT compiler compiles code
program running
Therefore cost compilation part execution time program minimized
The opposite AOT compiler basically synonymous batch compiler
This convert source code machine code machine code distributed
Therefore compiler slow impact execution time resulting program
Nowadays people say compiler typically mean AOT compiler
Indeed term AOT compiler really started becoming popular relatively recently people started making AOT compiler JIT compiled language particularly JavaScript
Many language
C compile intermediate language VM JIT compiled machine code
The term AOT compiler connotation source code compiled directly machine code form JIT compilation required
Batch compiler bit archaic term point
The real contrast batch compiler term popular
Incremental compilation often associated language like Lisp REPL could interactively request language implementation compile specific function
If function executed whose compilation requested would typically interpreted
A batch compiler contrast compiled function
batch
The meaning implied within quote give
It stem computing term used task performed scheduled later execution operating system load often activity le
A batch compiler one compiling user waiting result compilation
It one would say using modern terminology done background
This converse JIT done live exact time needed without luxury spending extra time processing thoroughly
The slower speed batch compiling illustrated Or even By posting answer agree
asked viewed active site design logo Stack Exchange Inc user contribution licensed

This service advanced JavaScript available learn
There affiliation available Over million scientific document fingertip Springer International Publishing AG
Part

Revised The description Revised There confusion RFC
It basicly claim metacompiler written language translates
There many metacompilers written language translates self
The following statement confused issue November UTC Sorry Forth metacompiler claim confused issue
It seam originator topic advocate FORTH metacompiler claim
The part RFC link used explaining operation
followed FORTH description metacompiler
Computer science term used linked topic Wiki
The link description gibberish
A metacompiler defined set defining written specialized language Grammar linked production rule linked
Both bacicly formal grammer topic
The production link describes formal process build string formal grammar
It gibberish semantic process description implied phrase production rule
Many metacompiler take input analytic grammar production formal grammar
November UTC November UTC After RFC posted reference added line The reference pointing forth site claiming forth metacompilers
These
There thing Computer Science described fringe Forth language proponent
I find reference term Computer Science publication
It found Forth programming site
When SegForth group ACM supported SegPlan group made le SegPlan group
There fringe group Forth fanatic misguided conception forth metacompiler
The norm compiler self hosting compiling self
See
I feel description metacompiler used FORTH fringe
And thus reference feature set metacompilers apart compiler compiler removed
A defining definition along line metacompiler compiling metalanguage
The description metacompiler compiling metalanguage stated ACM document found ACM archive
Other document meta compiler also saying TREEMETA document Stanford Research Institute
And CWIC Systems Development Corporation
My opinion article unsubstantiated opinion one
It conflicting description well known metacompilers would exclude analytical parser language using generative parser stated article
All reference given analytical parser None metacompilers talked generative syntax description language
Our main argument idea metacompiler compiles self
There example even one compiler generative syntax language given
So please side removal Forth fringe misconceived idea metacompiler
His response suggested change I seriously doubt understand topic associated concept
Any change make Metacompiler Wikipedia page I consider act ignorant vandalism report I tired ignoramus coming know little somethin something think know everything Note I asked list metacompilers
Did get
No reference claim
I sorry I make RFC
But threat reported vandalism I must seek outside opiniones
November UTC Orrigional made October UTC The person filing RFC Steamerandy first started editing topic week ago addition accepted even though appeared erroneous
Unfortunately documentation challenge change US government therefor unavailable seriously I making CWIC became classified project SDC System Development Corporation research company Santa Monica lot work military
From Steamerandy Talk page So made change based manual none rest u access hey additional information topic always appreciated
A couple week passed I saw making change Wikipedia page related topic
All fine good Wikipedia always use knowledgeable editor
And also studied learned Wikipedia rule
But started insisting article wrong challenged title thought called Meta compiler instead Metacompiler single word
He repeatedly provided biography length several place Wikipedia different Talk page indication qualified speak topic
He claim done lot work technology vast amount expertise
And began wanting change everything Metacompiler article based view reality
His expertise largely based dead project year ago documentation classified secret therefore unavailable rest u
I call dead project government made Classified information project became available public
We pretty sure still continued research know
But others continued carry research metacompilers year since classified
Metacompilers play important part Domain Analysis language example
About week ago Steamerandy posted response talk page ridiculing technical answer I posted someone else question
I responded based standard computer science concept found Wikipedia topic
Not stand ridicule response posted technical biography proof knew talking claim I wrong
Not also showed User Talk page giving long technical biography past glory proceeded imply I know I talking additionally saw fit insult belittle experience
He wrote Looks like I programming born You youngster think know everything
see
By way I age almost many year active work computer field
I mind someone challenging I write based superior information seemed intent denigrating denying anything I wrote based background Computer Science includes Bachelors Masters degree Computer Science
Everything I write based education year experience academia industry
I maintain contact expert field check vet I written article
I continually tried respond Steamerandy complaint citing reference Wikipedia elsewhere web
His belligerence seemed escalate
He continually muddled misrepresented response reference
At one point seemed start researching Wikipedia dragging related topic claimed refuted stated article
He keep throwing random reference theory article concept claim counter I written
He even dispute basic terminology like metacompiler bootstrapping standard term art computer field least year
Steamerandy want get way
He strong proponent Schorre family metacompilers seems intent making article narrow group metacompilers
There long albeit thin line research application metacompilers Software Engineering
He even proposed changing title article Meta programming make solely Schorre family metacompilers
At first I understand coming I think I understand confusion
The first two metacompilers made Schorre called Meta
I believe Schorre named metacompiiler Meta term metacompiler Microsoft named word processing program Word
It seems Steamerandy belief opposite metacompiler named first program Schorre nothing special term metacompiler
He completely denies evidence I produced backing idea metacompiler basic concept long accepted Computer Science Compiler Development Software Engineering
For example Forth community long history using version metacompiler bootstrap language system onto new hardware
A link one many Forth website make clear Here Forth community us term metacompiler accepted year
Yet Steamerandy seems claim Meta family metacompilers Schorre metacompilers even dispute word metacompiler vaild term concept Computer Science
When I presented example Forth metacompilers confused different referenced product claimed really metacompilers
In completely ignored reference I included directly contradicts everything seems claiming
I usually welcome knowledgeable comment contributor read Steamerandy post RFC concern greatly
He seems intent imposing limited view wo accept fact others also created metacompilers continues deny concept long accepted Computer Science almost belief expert field heard something must exist bogus
For example first claim RFC request seems repeat even I presented I believe quote Forth webpage satisfies complaint
It clearly state metacompiler compiler process source code resulting executable version
Furthermore also dispute definition prefix keep claiming got wrong thus nullifying use term metacompiler
The Forth reference also show Forth community line metacompilers satisfying repeated request show example metacompilers besides one pushing
Despite providing evidence Steamerandy continues deny obfuscate obvious data countering claim
As second claim RFC request I excluding metacompilers based misunderstanding terminology compiler theory practice
He claim I believe misconstrues meaning grammar production mean something generative grammar instead analytical grammar
In fact term grammar production term art computer science referring transformation rule used kind grammar
It nothing generative anything far I know
I modified statement article help maybe future confusion changing grammar production grammar production rule
See Wiki page
So common pattern Steamerandy misconstrues misunderstands written article response based misunderstanding claim wrong
He dredge stuff Wikipedia page post response Talk page claim prof point
He us basis wanting change everything article make pet project interest
I also concerned far writing atrocious muddle thing together sometimes almost point gibberish
I degree stuff seems conflates formal theory parsing technology cutting pasting piece Wikipedia article claiming prove point fact nonsense
How respond
But additionally I seen make mistake atrocious mistake grammar spelling example
When I understand also seem flaw claim argument
And provided fact disputing say usually denies obfuscates fact sometimes change position incorporating new fact accepted along find reason find fault information presented
It almost important show I somehow wrong something
His latest attempt RFC attempt replacing I others written hacked together parochial view topic emphasis pet technology brand metacompilers detriment equally important valid technology
It way seek approval proof right I wrong
For personal skin I game I want see work Schorre made available accessible
He continually claim description metacompilers invalidates family program fond fact opposite
He continually misconstrues fact misrepresents theory implication frankly I think understands
And top constantly misrepresents I written compiler theory prove I wrong I know I talking
I taken undergraduate graduate class compiler theory well practicum class built little mini compiler experience see really done
And later I encountered derived metacompilers barely touched academic class I overwhelmed simple powerful concept
I used metacompiler tool software engineering work past year
That I promote technology
And I want see article muddled retired tech person want make personal history
If read comment see I time gruff response guy show immediately insult Talk page ridicule topic article ridicule sincere response I posted Talk page bluster everything done differently experience high IQ something like
And writes badly boot
And perspective ignorant gone computer science compiler technology since dead project year ago
I appreciate fact Steamerandy follows Wikipedia rule contributing
He obviously passionate topic albeit way
I even offered multiple time help current project call cc compiler compiler offering link webpage provide even help
But far seems intent changing proving wrong
Let summarize I add information I think
Please reject RFC I think based unwillingness consider evidence work others insistence narrow parochial view denies anything fall outside view
Thanks
October UTC The adversary appears agenda push minority definition metacompiler
What make think comment made Really said Ok
So I searched metacompiler
The concept meta compiler simply compiler compiles self
From referanced site When I checked forth reference Wikipedia I found forth compiling self recognized computer science mainstream metacompiler
So metacompiler take language input written forth
How different PASCAL compiler written PASCAL C compiler written C
My adversary appears investigate source
He say I misconstrue reference finding either talking metacompile match narrow view metacompiler
It seam
So I found reference adversary gave So adversary gave referances site thinking prove point
Can adversary get idea metacompiler forth
He tell My adversary keep saying I wish narrow topic Schorre work
But never shown actual case
The history metacompilers closely tied history Working group Syntax Driven Compilers
The group started
Los Angles area primarily effort Howard Metcalfe
As anyone see
Not one thing specific Schorre meta compiler definition I proposed
used many known metacompilers
I noted Schorre language several web page also saying thing
It limit metacompilers class parser
But Schorre specificly s adversary saying
I objection changing specific limitation
My intention limit parser type
But real jest change relegating self compiling much lower level
As year old definition metacompiler even include compiling self
Maybe I clear proposed change
I proposing change information page
Just definition part pertaining meaning metacompiler
The us I intend change
The explanation meta compiler used function would unchanged
I really changing actual meaning much
It rearrangement making discriminating attribute taking metalanguage input specifies directs transformation input language another form may executable code
October UTC The misguided idea The feature set metacompiler apart standard metacompiler written language translates
defining feature metacompiler
Many many compiler written language compiler
C ALGOL many compiler written compiled language
compiler language different process claimed special original definition
The real discerning feature metalanguage input
In metacompiler metalanguage directs compilation process defining syntax language transformation output code
The metalanguage programming language actually directs compiling process
This clamoring self compilation detracting essence elegant solution offer compiler writer
I hope following achieves goal Note
replace first part Metacompiler topic
The historic content changed
Mote Need find suitable string processing description
For part string processing comparing constant static string input
Symbols commonly type string
Symbols type string may string attribute
I think reason might wont definition excludes club
Or compiler compiler taking metalanguage input
In original proposed change I clear replaced
There intention replacing whole
Just part defined metacompiler
My adversary say I changing position
Sorry dumbshit ignoramus calling adversary blow much smoke trying cover real objection That definition would exclude metacompiler club
Note Wikipedia take My adversary limit metacompiler production grammar description ignorantly linking
And claim I one grammar term
Minor point
But show lack understanding language used lack understanding computer science compiler terminology
He say know lingo I
I pointed adversary reference talk metacompilers implemented language
One assembly another implemented
These written self
They compiler self
The one written assembly metacompiler implementation forth
Which I discovered actually reading reference adversary gave
And amount name dumbshit ignoramus calling adversary going change
To honest I say adversary intentionally biased metacompiler defamation investigate source
My adversary denies experience head language development group Kontron Electronics actually wrote commercial compiler immaterial
bootstraping compiler nothing From personal experience writing many compiler starting scratch
Writing program scratch prior art daunting task
All metacompilers I worked could compile self
But could PASCAL compiler I written
What difference PASCAL compiler written PASCAL compiling self META II compiling self
Is really difference PASCAL compile Writing interpreter scratch
Hand compiling PASCAL compiler
Compiling PASCAL compiler hand coded using hand coded compiler
Modifying PASCAL compiler generate assembly language creating run time support library
original PASCAL compiler machine executable compiler
Further modifying compiler adding linkage declaration making modular
The PASCAL compiler got attribute adversary claim make meta compiler different compiler compiler except take metalanguage input
I forgot step
A assembler written assembly assembly source binary load module
My adversary say I understand
It seam adversary one understand mouthing material understanding
Writing pascal scratch really different writing metacompiler scratch
In fact META II written pseudo machine interrupter four instruction
How hard write code instruction machine
Read response made Can remove usually NOTE
IP
adversary said response
said What topic Wikipedia say There developing compiler one language rewriting language etc
Just follow link see say
NOTE Again adversary understand computer science term keep saying I understand
Iterative development
Who dumbshit ignoramuse misunderstanding computer science terminology
The topic controversial
Seams objection
Years ago I student come help personal project
A simple command line calculator
It handle numeric algebraic expression hierarchy
This
So set coded assembly
Took half hour explaining exactly every steep
First imputing digit string converting binary
And output routine bit glue code testing inputting number outputting result
The unique machine bit register
Any could used stack pointer
Even call stack
So simple mater write recursive parser
It basically input number recognizing operator calling function implementing recursive decent parser
Anyway amazed
That amazement lead getting degree
Years later I visited old collage teaching
So talked bit
And old calculator project came
He said took year fully understand point could
He using teaching parsing student
He longer thought amazing
A fellow programmer I worked wrote binary tree balancer almost incomprehensible
This also
It used two separate call stack
It two called
Each function called function self one two stack depending code
It worked great
I used
I figured forgotten specific
Now
Following code one routine would return different stack called
Now really mind bending
But hay worked
Why I talk student
I think explains adversary find writing compiler scratch mind bending
He like student seeing first time
Which I think position metacompiler definition written
The amazing thing ease compiler language processing application written using metacompiler
And way calculator writing episode happened year ago
It take life time learn write compiler
I writing compiler year
I believe taking metalanguage source input one single difference separate metacompiler rest
The fact metacompiler take metalanguage defines syntax language also defines code produced language construct
That separate rest called compiler compiler
It metalanguage programming make metacompiler different say compiler written
The metalanguage designed right readable description parsing code generation process
There language designed express readable language compilation
That amazing
It amazing control tree generation
It simple matter generate right left handed tree
The difference rule written
Using recursion loop construct
You change complicated parser written C unsuited language task
But may specific Schorre work
The analytic grammar used Schorre metacompilers readable
This confusion started yacc Yet Another Compiler Compiler calling self compiler compiler
It really parser generator
As called compiler compiler
Maybe yacc rest parser generator kicked compiler compiler club
It would make compiler compiler sound like
A compiler producing executable compiler source language description
If go back early compiler development find many compiler compiler actually produced machine code output
Years yacc
Having never written commercial compiler adversary keep trying dump
I sure many game developer around used one compiler
Kontron development system used write many Atari game
Using assembler PASCAL cross compiler
I head language development group
Despite adversary say
My experience writing real world compiler credential
I concerned link metacompiler page
But show adversary lack understanding computer science terminology
He ca seam grasp I talking
I discovered problem proposed change
I check every link I used
My proposed change avoids problem
Anyway problem adversary use grammar
Follow grammar link described production grammar
My adversary myopic fails understand objection link
There many compiler use generative grammar defined
The Schorre line meta compiler use
I would say PEGs
Which fit
work well
There top analytic rule defining legal syntax construct language
In Schorre line metacompilers main driving syntax rule
Like main C
In Schorre compiler statement specified driving rule
PROGRAM specified PROGRAM driving rule
I copy definition advisory might better understand I talking
He misconstrues I resort
But referance
In theoretical linguistics refers particular approach study syntax
A generative grammar language attempt give set rule correctly predict combination word form grammatical sentence
A formal grammar set rule rewriting string along start symbol rewriting start
True except fact ACM publication describes CWIC gotten ACM archive
This lie
The reference given
Maybe already knew ACM document contained meta compiler definition contrary
OMG
mention metacompiler compiling self
How go page admitting knowing little change instance Unparsing Nonparsing
When unparse TREEMETA manual
Unparse rule disassemble parser tree thus unparsing parse tree
FROM TREEMETA manual unparse syntax It obvious blowing smoke
One doubt anything say
How change TREEMETA topic disagree termonolgy TREEMETA manual
Was ignorance agenda
vandalizes topic threatens
try changing page limited wrong myopic view consider vandalism
Actually check talk page
I need find report someone vandalism
People make mistake
Best figure made change ignorance
Exactly change talking
I gave reference CWIC ACM paper
There little information CWIC I put metacompiler page paper
It talk generator language able manipulate tree generating code
It example simple interpreter demo written entirely CWIC
I changed CWIC example use unparse rule exactly illustrated interpreter example ACM document
Well quite I use vector
True stated CWIC generator LISP
Others ACM meeting recognized Erwin acknowledged
In TREEMETA document I found metacompiler history explaining CDC metacompiler written LISP
In fact TREMETA document wealth information early metacommpilers
This example directly form public available ACM paper CWIC member student member
Figure IV Figure V Note I talk vectored pattern matching used
Where EVAL match ADD MPY node using CWIC vector operator
It obvious vector
Right
Note CWIC specifies driving rule SETUP PROGRAM
SETUP function called first calling PROGRAM
One greatest thing meta language readability ease extended
And maybe one defining factor
The example handled addition multiplication
What would take extend handle subtraction division
We would change EXP TERM syntax rule include new operator generate node How easy
Now would need change vector generator Almost anybody understand I
Hell I spent gob time writing explanation took change program line
It said recursive decent parser
Were example
Does anybody see recursion
Do peek
In FACTOR EXP In Schorre META grammar recursion available
Question
Is really recursive decent parser
If parsing nested language construct would reason recursion
To illustrate power metacompiler I using example developing COBOL compiler SLIC There incident COBOL compiler written SLIC
The COBOL syntax used program testing could done
When first released bug discovered
As turned DEC compiler exactly bug
DEC deviated language spec allowing FILE CONTAINS clause use RECORD spec required In program FILE CONTAINS clause followed RECORD CONTAINS clause
The file contains clause took RECORD record contains part file contains clause recognizing CONTAINS produced error
Less min fix
The file contains clause ended matching changed Added peek ahead checked RECORD CONTAINS clause
All fixed
There still problem COBOL programmer tested program using DEC COBOL compiler
But another story
What kind parser anyway
That quick fix get project going
After checking make sure safe look CONTAINS got changed I given example talk page code generation syntax language based personal knowledge
They illustrate easy hand compile analytically syntax rule used CWIC TREEMETA assembly code
The point It mind bending
In example called
The total code involved two page code
It simple compare char string function
The meta compiler compile code
So really metacompiler compile self executable program
There many line code compiler run time library metalanguage source metacompiler
I downloaded ACM CWIC paper
And learned thing CWIC I know
One SYNTAX language compiler separate compiler form generator compiler
SLIC single compiler handling five language form
The cc compiler
But I explained
I longer consider separate language
They separate language class declaration separate language
An analogy syntax input description like record definition COBOL
A lot complicated still input definition
This metacompiler I working
Basically updated implementation SLIC
For time I calling cc
I using naked void function assembly function container
The point amount code compiled compiler compiler
The parsing code generation compiled
But like language large amount support code get combined make executable program
This illustrates extent amount overhead code part real meta compiler complicated stack manipulation novice
probably say work likely wont understand
Admittedly exchanging function return address moving relative stack pointer commonly done
A majority programming assembly
But minor stack rearranging going trivial backtracking function
Anyway illustrate amount code involved supporting simple string match syntax language
naked remove preamble exit code function
There code function coded function source
EAX case contains current input stream character
The following code illustrate support code needed simple string match syntax specification
This assembly code A lot stack manipulation going
Fairly simple compared backtracking function
EBP used backtrack pointer syntax rule
Basicly nested longjmp backtracking support code
The point specific code
It amount complexity code
The metacompler generated code small part compiler code
The code specifically involved matching string input
The definition CHARCLASS classmap table indexed character code
Bits indexed location indicate character class membership
Class rule assign bit used class generate table entry
There four string test type similar string string compare string string
string All identical CWIC function execpt SLIC match character CWIC first skip character SLIC skip character searching first character
A character may explicitly matched SLIC cc
This example could match line break symbol
Assembly label often anchored front line
The following integer token rule
Note token rule CWIC example CWIC ACM paper
TOKEN rule defined operator
CWIC character class rule define character class used interger rule
And hand compiled integer token rule note integer rule expressed comment Deviation CWIC SLIC allowed single conversion call token rule
cc allow conversion call terminate outer
This mind bending
You simply start hand compiling source code
In process figure code generator need work
This hand compiling step learning process
I even trying write optimized code
If I I would recognize first character every alternate skip class character skip skip skipclass character trying match first token character
intercept return rule calling
On failure restores input stream state
On success creates symbol interceding conversion function called
MAKEINT MAKEHEX etx conversion function intercede making symbol
The following cc grammar rule token
The main driver rule already posted
Including rule matched operator call token rule
Experimenting repeat operator resent meta language
META II compiled interpreted code
The interpreter assembly many time number line code metalanguage source
That automagicly generated
The interpreter coded hand
The point show amount code compared metalanguage source code
All parsed matched entity allocated object
The object created sense point backtrack released backtrack failure
Backtracking function single element backtracking involving input stream
Token matching string matching similar restoring input stream state failure
Objects created success
The metacompiler designed generate binary code target machine architecture
So bit library
Numeric value indefinite precision object
For example target processor could bit machine compiler running bit machine
Multiprecision arithmetic library required
My adversary wrote There two thing wrong

The feature set metacompiler apart standard metacompiler written language translates

Is minor point link
I explained
It would problem suggested change
gave several reference site metacompilers written assembly proved point
gave number reference called metacompilers
On reading recearching I found metacompile metacompiler
freak consider meta compiler compiles self
FROM That say right
All reference removed
gave referance blog artical
It written metacompiler topic first posted
So probability repeating said
WRONG AGAIN
I interested getting rid ignorant idea meta compiler must compile self
It unfounded real computer science literature
FORTH dead fringe language
Bury sun shine
The legit definition metacompiler ACM archive given
That first definition ACM publication
Do recognize ACM
That lie
I like topic
The reason lie wrong blowing smoke tring make look bad
That comment made ignorant link
That one link would eliminate existing metacompilers
The statement keep reference metacompilers left
It eliminates Schorre metacompilers
They use analytically grammar
He obviously understand difference type grammar
He thought I talking code production rule
Really
He made change code production
It
posted
Does even degree
Again lie
This ignorance formal grammar grammar
What article subject
And sense think right grammar insist referencing claiming grammar used metacompilers
actually eliminated probably
So nothing fit narrow definition
think production grammar producing code
Well better go back school
A production grammar one valid string language
NOTE action
It analyze language construct correctness
Just opposite
BNF production grammar
I tried explain avail
He grasp basic concept
I see got computer science degree
It show
Does
I mean claimed Knowledge expertise
comprehend difference generative grammar analytic grammar
awe struck normal operation
Has misused definition
Showing lack computer science terminology expertise
Which boastfully claimed
post link site prove point like little child try blame using reference
Says I misconstrue reference
I see I way responsible post supporting argument
Apparently know flap jaw showing know
That FORTH FREAK characteristic
One would think learned individual able navigate web check reference gave
A computer scientist know grammar type
An experienced programmer worked compiler find initial process mind bending
See
The student became professor
Forth metacompiler
trying weasel acknowledged metacompiler
But seam know formal grammar
I sorry inform dead
Quit digging reference
Leave buried
If metacompiler every compiler written language
PASCAL C etc
There FORTRAN compiler writen FORTRAN
Lets get LISP club
OMG
WABOC
The situation seam opposite
think norm
It one code compiler scratch
A newbie reaction something seen
I vary different back ground worked operatoring system compiler year I programming
freak try run one disagrees
That done
Try run
What argument put actual proposed change
Oh thats right put forth
Or I say first
say I degree I authority
Look response fellow posted outlandish idea
look lack understanding computer science term I already pointed
say experience
If experience
Will say
He much programmer
This experience show level programmer
Writing code scratch
A level NB programmer
Give simple modification task
It become apparent authority metacompilers
Forth metacompiler LISP
They simply extensible language
By way I learned long long time ago
And forgotten
even know computer science history
We look back early book late nineteen fifty sixty find reference metalanguage
metacompiler show sixty
And guess
If earlier meta compiler META I
What documented
The TREEMETA document say META I first metacompiler
From early META II document written Val Schorre UCLA really understand metacompiler history
As Val Schorre explains META II meant metalanguage compiler A base develop metalanguage metacompiles
Stated claim metacompiler Forth programmer say FORTH metacompiler
Click word forth see Wikipedia forth TOPIC say
So let see said I believe quote webpage satisfies complaint
It clearly state metacompiler compiler process source code resulting executable version
I already went
I misconstrued actually digging compiler talking found He posted numerous site
Ultimately turned freak claiming meta compiler
The question
So claiming compiler compiles self meta compiler
That mean posted link
Oh wait PASCAL metacompiler
And FORTRAN
say want teach metacompilers
I wonder intend teach FORTH metacompiler
provided link site metacompiler written
And cry I misconstrue reference
What
Because I read
There early metacompilers written SDC
written LISP
I assume Erwin Book
The early history documented It fact extensible language LISP FORTH shear property metacompiler
But metacompilers
Is really option forth metacompiler October UTC November UTC To sum I listed meta compiler written language self
The feature set metacompiler apart standard metacompiler written language translates
unsubstantiated refuted claim therefore removed
November UTC I response Request Consensus
I sure I meant give view seems argument whether ought request consensus I give view
This article ought programmer call metacompilers
Some Forth programmer use term metacompiler idiosyncratic way
This might mentioned somewhere article certainly first paragraph
November UTC Summoned bot
For amount text written article metacompilers well written regardless definition
But rfc ca expect editor read whole talk page might well read book metacompilers
I know I first editor summoned expect others summoned even try
So ask author summarize point view le word editor assist
Linguistically metacompiler compiles compiler compiler compile would autocompiler
But common usage may deviated please summarise argument notability either definition
Note I computer scientist need understand summary
And please take discussion personal
November UTC

A used chiefly
They subset specialized class compiler writing tool called employ language
writing ability treat data
The input metacompiler written specialized designed chiefly purpose constructing
The language compiler produced called
The minimal input producing specifying grammar transformation
Metacompilers reduce task writing compiler automating aspect regardless
This make possible design appropriate specification particular problem
A metacompiler reduces cost producing point becomes economically feasible include solution problem design
Metacompiler powerful string symbol processing language also useful generating wide range software engineering analysis tool
Besides useful development metacompiler prime example language designed domain compiler writing
A metacompiler existing computer programming language
The process metacompiler written metalanguage compiling equivalent
Most common compiler written today
powerful tool many metacompilers allowing easy extension metaprogramming metalanguage
The feature separate metacompiler apart compiler compiler take input specialized language describes aspect compiler operation
A metaprogram produced metacompiler complete program written general
The powerful attribute allowing ease development computer programming language computer tool
Command line processor text string transforming analysis easily coded using metaprogramming metalanguage metacompilers
A full featured development package would include linker support library
Usually machine oriented language required writing support library
C could used machine oriented language
A library consisting support function required compilation process usually round full metacompiler package
In Computer Science
As data
Data describing data
A language used describe language
Meta may also mean
A operates higher level abstraction order describe property language
formal originally used define
weak describes say nothing meaning
writing ability treat data
A metacompiler take input written higher level abstraction specifically designed purpose
The output executable object program
An analogy drawn That compiler take input programming language program compiler take input program
Many advocate call process creating new implementation Forth constitutes metacompiler
The FORTH definition metacompiler This Forth use metacompiler disputed mainstream computer science
See
The actual Forth process compiling combination Forth sometimes long established terminology computer science
FORTH amazing language easy program although easy read sometimes
Metacompilers general compiler writing system
Besides FORTH metacompiler concept indistinguishable extensible language
The actual process act lower level defining minimum subset forth word used define additional forth word A full FORTH implementation defined base set
This sound like bootstrap process
The problem almost ever general purpose language compiler also fit FORTH metacompiler description
Just replace X common language C PASCAL COBOL FORTRAN ADA MODULA etc
And X would meta compiler according FORTH usage metacompiler
A metacompiler operates abstraction level compiler compiles
It operates compiler level compiling
One see problem definition metacompiler
It applied language
However examining concept programming FORTH adding new word dictionary extending language way metaprogramming
It metaprogramming forth make metacompiler
Programming FORTH adding new word language
Changing language way
FORTH metacompiler FORTH language specifically designed metaprogramming
Programming FORTH extending FORTH adding WORDS forth vocabulary creates new FORTH
FORTH specialized metacompiler language
Metacompilers played significant role computer science computer industry
The early history metacompilers closely tied history Working group Syntax Driven Compilers
The group started primarily effort Howard Metcalfe Los Angeles area
In fall Howard Metcalfe designed two interpreter
One used analysis technique based method described Ledley Wilson
The used approach based work glennie generate random English sentence grammar
At time Val Schorre described two meta machine
One generative one analytic
The generative machine implemented produced random algebraic expression
Meta I first metacompiler implemented Schorre IBM UCLA January
His original interpreter metamachines written directly language
Meta II however written metalanguage able describe compilation language
Lee Schmidt Bolt Beranek Newman wrote metacompiler March utilized CRT display
This compiler produced actual machine code rather interpretive code partially bootstrapped Meta Schorre bootstrapped Meta II Meta I Spring
The paper refined metacompiler system presented Philadelphia ACM conference first paper metacompiler available general reference
The syntax implementation technique Schorre system laid foundation system followed
The system implemented small used implement small language
Many similar system immediately followed
Roger Rutman Sparkplug developed implemented LOGIK language logical design simulation IBM January
This compiler used algorithm produced efficient code Boolean expression
Another paper ACM proceeding describes developed Johnson UCLA IBM
Meta III represents attempt produce efficient machine code large class language
Meta III implemented completely assembly language
Two compiler written Meta III CODOL demonstration compiler PUREGOL dialect ALGOL
It pure gall call ALGOL
Late Lee Schmidt bootstrapped metacompiler EQGEN Beckman
EQGEN logic equation generating language
In System Development Corporation began major effort development metacompilers
This effort includes powerful metacompilers Bookl written LISP extensive backup capability
An outgrowth one system SDC Meta
The Meta system incorporates backup input stream enough facility parse language
This system successfully released wide number user many application compiling
It many elaborate stack attribute setting testing facility output mechanism
The fact Meta successfully translates JOVIAL program program clearly demonstrates power flexibility
The LOT system developed Stanford Research Institute modeled closely Meta II
It new construct allowing generate compiler would turn able compile subset
This system extensive facility used study characteristic analysis
SIMPLE specialized translator system designed aid writing SIMPLE written composed three component An executive syntax analyzer semantic constructor
The compiler developed Stanford Research Institute Menlo Park California
April
The early metacompiler history well documented TREE META paralleled SDC development
Unlike earlier metacompilers separated semantics processing syntax processing
The syntax rule contained building operation combined recognized language element tree node
The tree structure representation input processed simple form unparse rule
The unparse rule used node recognition attribute testing matched resulted associated action performed
In addition like tree element could also tested unparse rule
Unparse rule also recursive language able call unparse rule passing element thee tree action unparse rule performed
The concept metarnachine originally put forth Glennie simple three hardware version designed one actually implemented
The latter Washington University Louis
This machine built component instruction code described Schorre
CWIC Compiler Writing Implementing Compilers last known Schorre metacompiler
It developed Systems Development Corporation Erwin Book Dewey Val Schorre Steven Sherman With full power lisp list processing language optimizing algorithm could operate syntax generated list tree code generation
CWIC also symbol table built language
With resurgence language need parser generator easy use easy understand easy maintain metacompilers becoming valuable tool advanced software engineering project
The earliest Schorre metacompilers META I META II developed Val Schorre UCLA
Other Schorre based metacompilers followed
Each adding improvement language analysis code generation
In programming common use programming language name refer compiler programming language
The context distinguishing meaning
A program compiled using compiler
That also applies following
For example META II compiler language
The metalanguage Schorre line metacompilers functional programming language use top grammar analyzing syntax rule embedded output transformation construct
A rule compiled function form equation returning
name function rule name
body form logical expression consisting test may grouped alternate output production
A like language
Defining programming language analytically top natural
For example program could defined Defining program sequence zero declaration
In Schorre META language driving rule
The program rule example driving rule
The program rule function call declaration rule return
The loop operator repeatedly calling declaration returned
The operator always successful even zero declaration occur
Above program would always return success
The character set early compiler limited
The character used alternant operator
A B written A B
used grouping
Describes construct A followed B As boolean expression would A sequence X Y implied X Y meaning
grouping operator
The order evaluation always left right input character sequence specified ordering test
Special operator word whose first character
used clarity
used last alternate previous alternant need present
Indicates X optionally followed A B
This specific charistric metalanguage programming language
Backtracking avoided
Other compiler constructor system may declared three posable sequence left parser figure
The charestricts metaprogramming metalanguage common Schorre metacompilers derived
META I hand compiled metacompiler used compile META II
Little else known META I except initial compilation META II produced nearly identical code hand coded META I compiler
Each rule consists optionally test operator output production
A rule match part input program source character stream returning success failure
On success input advanced matched character
On failure input advanced
Output production produced form assembly code directly syntax rule
introduced tree building operator moving output production transforms unparse rule
The tree building operator used grammar rule directly transforming input
Unparse rule also test function matched tree pattern
Unparse rule called grammar rule transformed output code
The building unparse rule allowed local optimization performed analyzing parse tree
Moving output production unparse rule made clear separation grammar analysis code production
This made programming easier read understand
In Erwin Book Dewey Val Schorre Steven Sherman developed CWIC
Compiler Writing Implementing Compilers CWIC system composed three language intended permit description certain aspect translation straightforward natural manner
The syntax language used describe recognition source text construction intermediate structure
The generator language used describe transformation appropriate object language
Machine Oriented system programming language IBM family computer used provide interface machine operating system
independently developed used develop ADEPT time sharing system
The syntax language similar Dewey Val Schorre line metacompilers
It resembles TREEMETA building operation syntax language
The unparse rule TREEMETA extended work object oriented generator language based
CWIC includes three language Generators Language semantics similar
The parse thought recursive list
The general form Generators Language function The code process given included feature general purpose programming language plus form stuff would emit stuff onto output file
A generator call may used
The generator passed element pattern placed return value listed
For example That parse look like ADD x would called return x
A variable unparse rule local variable used
called return
Of note generator call unparse rule passed element position occupies
Hopefully x register return
The last transforms intended load atomic register return register
The first production would used generate AR Add Register instruction appropriate value general register
The example part generator
Every generator expression evaluates value con processed
The last transform could well written In case load return first parameter register returned getreg
function load getreg CWIC generator
From author CWIC A metacompiler assist task automating noncreative aspect aspect regardless language produced compiler translate
This make possible design language appropriate specification particular problem
It reduces cost producing processor language point becomes economically feasible begin solution problem language design

All content website including dictionary thesaurus literature geography reference data informational purpose
This information considered complete date intended used place visit consultation advice legal medical professional

Computer science also strong connection discipline
Many problem science engineering health care business area solved effectively computer finding solution requires computer science expertise knowledge particular application domain
Thus computer scientist often become proficient subject
Finally computer science wide range specialty
These include computer architecture software system graphic artifical intelligence computational science software engineering
Drawing common core computer science knowledge specialty area focus particular challenge
Finally importantly computer scientist computer scientist fun
Not mention lucrative career opportunity
Computer Science The Profession Computer science discipline involves understanding design computer computational process
In general form concerned understanding information transfer transformation
Particular interest placed making process efficient endowing form intelligence
The discipline range theoretical study algorithm practical problem implementation term computational hardware software
A central focus process handling manipulating information
Thus discipline span advancing fundamental understanding algorithm information process general well practical design efficient reliable software hardware meet given specification
Computer science young discipline evolving rapidly beginning
As includes theoretical study experimental method engineering design one discipline
This differs radically physical science separate understanding advancement science application science field engineering design implementation
In computer science inherent intermingling theoretical concept computability algorithmic efficiency modern practical advancement electronics continue stimulate advance discipline
It close interaction theoretical design aspect field bind together single discipline
Because rapid evolution difficult provide complete list computer science area
Yet clear crucial area theory algorithm data structure programming methodology language computer element architecture
Other area include software engineering artificial intelligence computer networking communication database system parallel computation distributed computation interaction computer graphic operating system numerical symbolic computation
A professional computer scientist must firm foundation crucial area field likely knowledge one area discipline depending upon person particular area practice
Thus well educated computer scientist able apply fundamental concept technique computation algorithm computer design specific design problem
The work includes detailing specification analysis problem provides design function desired satisfactory performance reliable maintainable meet desired cost criterion
Clearly computer scientist must sufficient training computer science area able accomplish task must also firm understanding area mathematics science well broad education liberal study provide basis understanding societal implication work performed
Computer Science study principle application technology computing computer
It involves study data data structure algorithm process structure principle computer hardware software design methodology topic numerical analysis operation research artificial intelligence language design structure translation technique
Computer Science provides foundation knowledge student career objective wide range computing profession
The study efficient effective software development technique
Team work communication skill
An interest applying technology problem wide variety discipline
Computer Science concerned information much sense physic concerned energy devoted representation storage manipulation presentation information
Computer Science concerned study machine communication man machine application machine
Major area Computer Science include
Operating Systems concerned development structure complex program facilitate communication

Computational Science analysis numerical method solving mathematical problem computer

Programming Languages study design property language human communicate computer

Architecture study use mathematical logic design electronic circuit

Intelligent Systems concerned mean computer may perform task might characterized intelligent performed human

Automata Theory abstract study computer capability

Information Storage Retrieval study method storing vast amount data computer method searching retrieving data

Software Engineering study tool technique software design development testing maintenance

Stack Exchange network consists Q A community including largest trusted online community developer learn share knowledge build career
I trying understand compiler intrinsic function
I find I still kind fuzzy exactly
If someone could provide concrete example would definitely clarify issue
Any help appreciated
One example compiler intrinsic function floating point math function part standard C math library
On CPU architecture support floating point trigonometric function like compiler might replace function call series instruction achieve result using available CPU instruction instead
Another example replacement call C memory copying function
These might implemented directly using instruction available copying block memory many time faster
By posting answer agree
asked viewed active site design logo Stack Exchange Inc user contribution licensed

âãÏÓ obj endobj xref n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n trailer R R startxref EOF obj R R R R null null null R R R true endobj obj R endobj obj R endobj obj R R R R endobj obj R stream B F wg Ë ÒÌ endstream endobj obj endobj obj R R R R R R R R R R R R R R R R R R R endobj obj Bold R endobj obj Bold R endobj obj endobj obj R endobj obj R endobj obj endobj obj endobj obj R stream V µ þìXµ Åßÿ Á Ò q Xo F wB tÇ hþ On j R rnfl ìÀí zÐøåK Üó ñþÄg ã endstream endobj obj R endobj obj R endobj obj endobj obj R stream Ïèå jæÌ W ÚÛ LÔ p Ó ïVVU ã
ã oä äuéuPTè är endstream endobj obj BoldItalic R endobj obj BoldItalic R endobj obj endobj obj R stream ßÌp Þ wË ËÆÄ Oª
ú â Eíýº vÕî O KkÚ endstream endobj obj endobj obj R stream xK ùmAF n S î uØ ë D í ö TOßzÕÔóa ÙýP pEû Aä Fé Ëpë
ò ï endstream endobj obj endobj obj R stream Ó shÕ Ö Â í NàºØ Aû ñ Ñ wäçBb Ð n ÅyCÑ K à âûð endstream endobj obj endobj obj R stream öÊ õ ëuÊ ÆÊím VË Ñ
ËÂQçR gÈ ÕÈþ Úæ º ý ýz aqæÐ µö yz endstream endobj obj endobj obj R stream Ò pYüf L öBÇË áÉvI ñ ÚY Ê Gí J Ûâ mÈóTÎóÌ Ú

This service advanced JavaScript available learn
There affiliation available Over million scientific document fingertip Springer International Publishing AG
Part

