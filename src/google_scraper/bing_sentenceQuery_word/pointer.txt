In object whose value refers another value stored elsewhere using
A pointer location memory obtaining value stored location known pointer
As analogy page number book index could considered pointer corresponding page dereferencing pointer would done flipping page given page number reading text found indexed page
Pointers data significantly improve performance repetitive operation traversing structure
In particular often much cheaper time space copy dereference pointer copy access data pointer point
Pointers also used hold address entry point subroutine
In used often using called
A pointer simple concrete implementation abstract
Several language support type pointer although restriction use others
While pointer used refer reference general properly applies whose explicitly allows pointer manipulated arithmetically via memory address opposed possible
Because pointer allow protected unprotected access memory address risk associated using particularly latter case
Primitive pointer often stored format similar however attempting dereference look pointer whose value never valid memory address would cause program crash
To alleviate potential problem matter pointer considered separate type parameterized type data point even underlying representation integer
Other measure may also taken validation bound checking verify content pointer variable contain value valid memory address within numerical range processor capable addressing
credited invention pointer
In Lawson presented Computer Pioneer Award f inventing pointer variable introducing concept thus providing first time capability flexibly treat linked list high level language
According first appeared print technical memorandum
In pointer kind
A datum read written using one memory access instance primitive
A group primitive contiguous memory viewed collectively one datum instance aggregate could logically contiguous byte value represent coordinate point space
When aggregate entirely composed type primitive aggregate may called sense primitive array byte program use word way
In context definition smallest primitive specifies different byte
The memory address initial byte datum considered memory address entire datum
A primitive value intended used memory address said
It also said pointer value datum memory address
More generally pointer kind said obtain datum
The feature separate pointer kind reference pointer value meant interpreted memory address rather concept
References serve level indirection A pointer value determines memory address datum used calculation
Because indirection fundamental aspect algorithm pointer often expressed fundamental typed programming language pointer determines type datum pointer point
When setting like tree necessary pointer help manage structure implemented controlled
Typical example pointer start pointer end pointer pointer
These pointer either actual absolute start address base typically us fewer bit full address usually require one additional arithmetic operation resolve
Relative address form manual share many advantage disadvantage
A offset containing unsigned integer used provide relative addressing kilobyte data structure
This easily extended address pointed forced word boundary requiring additional shift left order adjust offset factor addition base address
Generally though scheme lot trouble convenience programmer absolute address underlying preferred
A one byte offset hexadecimal value character
used point alternative integer value index array

In way character efficiently translated usable sequential absolute address without
used control usually make extensive use pointer
The pointer usually embedded table entry may instance used hold entry point executed based certain condition defined table entry
The pointer however simply index separate associated table comprising array actual address address depending upon programming language construct available
They also used point earlier table entry loop processing forward skip table entry early exit loop
For latter purpose pointer may simply table entry number transformed actual address simple arithmetic
Pointers thin top addressing capability provided modern
In simplest scheme numeric assigned unit memory system unit typically either depending whether architecture effectively transforming memory large
The system would also provide operation retrieve value stored memory unit given address usually utilizing machine
In usual case pointer large enough hold address unit memory system
This introduces possibility program may attempt access address corresponds unit memory either enough memory installed
beyond range available memory architecture support address
The first case may certain platform architecture called segfault
The second case possible current implementation pointer bit long address extend bit
Pointers must conform certain rule canonical address pointer dereferenced processor raise
On hand system unit memory address
In case complex scheme employed use different part memory different time
The last incarnation architecture support bit physical memory address mapped linear address space paging mechanism
Thus possible total memory may accessed time
Another example computer family processor though supporting MB physical memory could access GB virtual memory combination address segment register made accessing KB one data structure cumbersome
In order provide consistent interface architecture provide allows address refer unit memory others refer device computer
There analogous concept file offset array index remote object reference serve purpose address type object
Pointers directly supported without restriction language implicitly
They primarily used constructing turn fundamental constructing nearly well passing data different part program
In functional programming language rely heavily list pointer reference managed abstractly language using internal construct like
When dealing array critical operation typically involves stage called involves constructing pointer desired data element array
In data structure pointer used reference explicitly tie one piece structure another
Pointers used pas parameter reference
This useful programmer want function modification parameter visible function caller
This also useful returning multiple value function
Pointers also used deallocate dynamic variable array memory
Since variable often become redundant served purpose waste memory keep therefore good practice deallocate using original pointer reference longer needed
Failure may result available free memory gradually severe case rapidly diminishes accumulation numerous redundant memory block
The basic define pointer This declares identifier object following type This usually stated succinctly pointer
Because C language specify implicit initialization object automatic storage duration care often taken ensure address point valid sometimes suggested pointer explicitly initialized value traditionally specified C standardized macro Dereferencing null pointer C produce could catastrophic
However implementation simply halt execution program question usually
However initializing pointer unnecessarily could hinder program analysis thereby hiding bug
In case pointer declared next logical step point something This assigns value address
For example stored memory location value assignment
To dereference pointer asterisk used This mean take content locate address memory set value
If later accessed new value
This example may clearer memory examined directly
Assume located address memory also assume machine int wide
The following would memory following code snippet executed The NULL pointer shown
By assigning address yield following memory value Then dereferencing coding computer take content address assign location yielding following memory Clearly accessing yield value previous instruction modified content way pointer
In C array indexing formally defined term pointer arithmetic language specification requires equivalent
Thus C array thought pointer consecutive area memory gap syntax accessing array identical used dereference pointer
For example array declared used following manner This allocates block five integer name block act pointer block
Another common use pointer point dynamically allocated memory return consecutive block memory le requested size used array
While operator array pointer equivalent result operator differs
In example evaluate size array evaluate size pointer
Default value array declared like If located memory starting address machine memory contain following value like address Represented five integer
These five integer occupy bit byte byte stored first stored consecutively starting address
The syntax C pointer The last example access content
Breaking Below example definition This definition essentially definition empty list cell type another link also type
The definition reference however use potentially confusing signal value
For reason data structure C usually dealt via carefully checked correctness
Pointers used pas variable address allowing value changed
For example consider following code In program required memory depends may enter
In case programmer need allocate memory dynamically
This done allocating memory rather variable usually stored
Variables also stored CPU register another matter Dynamic memory allocation made pointer name like common variable ca given
Pointers used store manage address block memory
Such block used store data object array object
Most structured language provide area memory called object dynamically allocated
The example C code illustrates structure object dynamically allocated referenced
The provides function allocating memory block heap
It take size object allocate parameter return pointer newly allocated block memory suitable storing object return null pointer allocation failed
The code illustrates memory object dynamically deallocated returned heap free store
The standard C library provides function deallocating previously allocated memory block returning back heap
On computing architecture pointer used directly manipulate memory device
Assigning address pointer invaluable tool programming
Below simple example declaring pointer type int initialising address example constant In mid using access video capability PCs slow
Applications typically used access video memory directly casting constant pointer array unsigned int value
Each value consisted code low byte colour high byte
Thus put letter row column bright white blue one would write code like following In many language pointer additional restriction object point specific
For example pointer may declared point language attempt prevent programmer pointing object integer eliminating error
For example C would integer pointer would char pointer
The following would yield compiler warning assignment incompatible pointer type declared different type
To suppress compiler warning must made explicit indeed wish make assignment say cast integer pointer char pointer assign
A draft C standard requires casting pointer derived one type one another type maintain alignment correctness type Pointers par
In language allow pointer arithmetic arithmetic pointer take account size type
For example adding integer number pointer produce another pointer point address higher number time size type
This allows u easily compute address element array given type shown C array example
When pointer one type cast another type different size programmer expect pointer arithmetic calculated differently
In C example array start byte whereas byte point would point
Other risk casting include loss data wide data written narrow location
unexpected result value comparison problem especially signed v unsigned value
Although impossible general determine cast safe language store used confirm dangerous cast valid runtime
Other language merely accept conservative approximation safe cast none
As pointer allows program attempt access object may defined pointer origin variety
However usefulness pointer great difficult perform programming task without
Consequently many language created construct designed provide useful feature pointer without also sometimes referred
In context pointer directly address memory used article referred contrast smart pointer variant
One major problem pointer long directly manipulated number made point unused address data used purpose
Many language including recent like replace pointer opaque type reference typically referred simply used refer object manipulated number preventing type error
Array indexing handled special case
A pointer address assigned called
Any attempt use uninitialized pointer cause unexpected behavior either initial value valid address using may damage part program
The result often used function pointer branch address
In system explicit memory allocation possible create deallocating memory region point
This type pointer dangerous subtle deallocated memory region may contain data deallocated may reallocated overwritten unrelated code unknown earlier code
Languages prevent type error deallocation performed automatically reference scope
Some language like support use simple form help track allocation dynamic memory addition acting reference
In absence reference cycle object refers indirectly sequence smart pointer eliminate possibility dangling pointer memory leak
string support reference counting natively
The introduces optimisation based around eliminate pointer bug without resorting
A value reserved indicating pointer refer valid object
Null pointer routinely used represent condition end unknown length failure perform action use null pointer compared value
An pointer whose value interpreted offset address pointer thus data structure autorelative pointer member point portion data structure data structure may relocated memory without update value auto relative pointer
The cited patent also us term mean thing
However meaning term used way A pointer whose value offset value another pointer
This used store load block data assigning address beginning block base pointer
In language pointer reference another pointer requiring multiple dereference operation get original value
While level indirection may add performance cost sometimes necessary order provide correct behavior complex
For example C typical define term element contains pointer next element list This implementation us pointer first element list surrogate entire list
If new value added beginning list changed point new element
Since C argument always passed value using double indirection allows insertion implemented correctly desirable eliminating special case code deal insertion front list In case value le caller properly updated address new item
A basic example argument given prototype variable pointer array string array array pointer string convention name program character string
In language pointer reference executable code point function method procedure
A store address function invoked
While facility used call function dynamically often favorite technique virus malicious software writer
A pointer point valid object consequently may make program crash behave oddly
In pointer specifically initialized may point unpredictable address memory
The following example code show dangling pointer Here may point anywhere memory performing assignment corrupt unknown area memory trigger
In doubly back pointer held element back item referring current element
These useful navigation manipulation expense greater memory use
These pointer declaration cover variant pointer declaration
Of course possible triple pointer main principle behind triple pointer already exist double pointer
The higher priority
Where pointer used address entry point program start also either uninitialized corrupted call nevertheless made address said occurred
The consequence usually unpredictable error may present several different way depending upon whether pointer valid address whether coincidentally valid instruction opcode address
The detection wild branch present one difficult frustrating debugging exercise since much evidence may already destroyed beforehand execution one inappropriate instruction branch location
If available usually detect wild branch take effect also provide complete partial trace history
It possible simulate pointer behavior using index normally array
Primarily language support pointer explicitly support array thought processed entire memory range within scope particular array index thought equivalent assembly language point individual byte whose actual value relative start array absolute address memory
Assuming array say contiguous character individual byte contiguous byte within array directly addressed manipulated using name array bit unsigned simulated pointer quite similar example shown
Pointer arithmetic simulated adding subtracting index minimal additional overhead compared genuine pointer arithmetic
It even theoretically possible using technique together suitable simulate intermediate another language support pointer example
To achieve code initially loaded contiguous byte array simulator read interpret action entirely within memory contained array
If necessary completely avoid problem usually actioned compiler hand coded simulator
strongly typed language pointer typed safe type conversion permitted
All pointer default initialized attempt access data pointer cause raised
Pointers Ada called
Ada permit arithmetic access type although many compiler vendor provided feature Ada support safe arithmetic access type via package
Several old version Windows platform support STRPTR return address string VARPTR return address variable
Visual Basic also support OBJPTR return address object interface ADDRESSOF operator return address function
The type integer value equivalent held pointer type
Newer dialect exhaustive pointer implementation however
In FreeBASIC arithmetic pointer equivalent C treated though pointer byte width
pointer dereferenced Also casting type pointer generate warning
In pointer variable store address
Each pointer type point one freely cast pointer type function pointer object pointer
A special pointer type called void pointer allows pointing object limited fact dereferenced directly shall cast
The address often directly manipulated casting pointer integral type sufficient size though result may indeed cause undefined behavior earlier C standard integral type guaranteed large enough specifies defined implementation need provide
fully support C pointer C typecasting
It also support new group typecasting operator help catch unintended dangerous cast
Since also provides used situation safer alternative primitive C pointer
also support another form reference quite different pointer called simply
ability modify pointer target address arithmetic operation well magnitude comparison restricted language standard remain within bound single array object otherwise invoke
Adding subtracting pointer move multiple size
For example adding pointer integer value increment pointer
This effect incrementing pointer point next element contiguous array often intended result
Pointer arithmetic performed pointer size thus pointed address added although compiler perform byte arithmetic extension treating
Pointer arithmetic provides programmer single way dealing different type adding subtracting number element required instead actual offset byte
Pointer arithmetic pointer us byte offset definition
In particular C definition explicitly declares syntax element array equivalent content element pointed
This implies equivalent one write equally well access fourth element array
While powerful pointer arithmetic source
It tends confuse novice forcing different context expression ordinary arithmetic one pointer arithmetic one sometimes easy mistake one
In response many modern computer language example permit direct access memory using address
Also safe C dialect address many issue pointer
See discussion
The supported ANSI C generic pointer type
A pointer store address object function C implicitly converted object pointer type assignment must explicitly cast dereferenced
C used pointer purpose ANSI C
allow implicit conversion pointer type even assignment
This design decision avoid careless even unintended cast though compiler output warning error encountering cast
In reference void complement pointer void reference behave like alias variable point never variable whose type
In pointer supported certain condition block code including pointer must marked keyword
Such block usually require higher security permission allowed run
The syntax essentially address pointed either memory
However pointer managed memory pointer managed object must declared using keyword prevents moving pointed object part memory management pointer scope thus keeping pointer address valid
An exception using structure safe managed equivalent require unsafe code
This type often returned using method example The framework includes many class method namespaces class convert type example many type pointer example allow communication
Most method security permission requirement unmanaged code since affect arbitrary place memory
The programming language support pointer variable
Primitive group record data object declared within program inherently memory allocated within program space address data item typically single memory word
In program source code data item used like variable content implicitly accessed indirectly pointer
Memory space data object typically using external statement via embedded extended language construct statement
Extended version COBOL also provide pointer variable declared clause
The value pointer variable established modified using statement
Some extended version COBOL also provide variable capable storing
The language provides full support pointer data type including pointer structure string handling extensive
quite leap forward compared programming language time
The derivative C fully support C pointer C typecasting
The employ value reference semantics without pointer arithmetic
Nevertheless pointer class provided
They offer pointer arithmetic typecasting explicit memory management interfacing software feature
introduced strongly typed pointer capability
Fortran pointer contain simple memory address
They also encapsulate lower upper bound array dimension stride example support arbitrary array section metadata
An used associate variable attribute
The statement may also used associate pointer block memory
For example following code might used define create linked list structure add support procedure pointer
Also part feature support intrinsic function converting pointer Fortran pointer back
pointer
Its declaration syntax equivalent C written way around ending type
Unlike C Go garbage collection disallows pointer arithmetic
Reference type like exist
Some type like map channel boxed
internally pointer mutable structure initialized using function
In approach unified syntax pointer arrow operator dropped dot operator pointer refers field method dereferenced object
This however work level indirection
Unlike explicit representation pointer
Instead complex data structure like implemented using
The language provide explicit pointer manipulation operator
It still possible code attempt dereference null reference null pointer however result thrown
The space occupied unreferenced memory object recovered automatically
Pointers implemented much Pascal parameter procedure call
even strongly typed Pascal fewer way escape type system
Some variant include garbage collection
Much pointer available
There still fewer way evade type system variant still safer respect pointer variant
As garbage collection part language specification
Unlike many language feature pointer standard allows pointer reference dynamically created variable anonymous allow reference standard static local variable
It pointer arithmetic
Pointers also must associated type pointer one type compatible pointer another type
pointer char compatible pointer integer
This help eliminate type security issue inherent pointer implementation particularly used
It also remove risk caused ability dynamically let go referenced space using standard procedure effect library function found mean risk dangling pointer entirely eliminated
However commercial open source Pascal derivative compiler implementation pointer allowed reference standard static local variable cast one pointer type another
Moreover pointer arithmetic unrestricted adding subtracting pointer move number byte either direction using standard procedure move pointer size point
An untyped pointer also provided name compatible pointer type
The support pointer although rarely used form pack unpack function
These intended simple interaction compiled OS library
In case Perl us typed allow form pointer arithmetic
They used construct complex data structure

Stack Exchange network consists Q A community including largest trusted online community developer learn share knowledge build career
In study class ah ha moment finally really understood pointer
Do explanation use beginner programmer seems particularly effective
For example beginner first encounter pointer C might add compiles I
Maybe picture really well motivated example made pointer click student
What try seem work
Were topic prerequisite
structs array
In word necessary understand meaning could use confidence
Learning syntax terminology use case enough point idea need internalized
I really like answer far please keep coming
There lot great perspective I think many good internalized concept
I looking detailed context circumstance dawned
I somewhat understood pointer syntactically I heard two friend explaining pointer another friend asked passed pointer
The first friend talked needed referenced modified short comment friend hit It also efficient
Passing byte instead byte final conceptual shift I needed
Please edit question limit specific problem enough detail identify adequate answer
Avoid asking multiple distinct question
See page help clarifying question
Usually I represent memory grid I make address highlight different memory space write cell value even binary representation link pointer memory value point
And still mention simplification
Usually ohhhh moment student
Then come stop forgetting use simple present way math physic calculation
If divide distance km time hour get speed
What need
Simple
Doing basic example visually represent explained comfort think understood give opportunity say ah I get one
Cover pointer simple type make sure understand difference addressing size data type structs array multiple level
Then start pointer arithmetic
I usually explain recursion similarly using visual representation
Have print alphabet using function writes single char ask print reverse order changing two line
Usually
moment add another parameter printf print numeric value indent step becomes sigh relief
I actually university showed student video explaining pointer memory access using paste
It incredibly clever well done though I never really used technique except young learner interested grasping programming usually I would lead towards language using pointer early
Basically using tiny ball attach bigger ball representing memory space combine together either link like linked data structure merge together contiguous memory space
Using different color memory space pointed pointer help well
But I still think thing work better clearly show pointing really matter addressing
Whereas mode still confuses thinking thing really touch memory
The Water Cup thing used directly colleague well I know came
It interesting approach I noticed many student left puzzled explanation
Something alike
But I think actually misleading one make student confuse container data structure pointer array
It might interesting approach explain array beginning I assume I would stick long
Someone much wiser I said The nun Wu Jincang asked Sixth Patriach Huineng I studied Mahaparinirvana sutra many year yet many area quite understand
Please enlighten
The patriach responded I illiterate
Please read character perhaps I able explain meaning
Said nun You even recognize character
How able understand meaning
Truth nothing word
Truth likened bright moon sky
Words case likened finger
The finger point location
However finger moon
To look moon necessary gaze beyond finger right
I found diagram helpful
Example This sort diagram helped see pointer variable contained value location another object
array string
Also done pencil I could use trace program paper
When I first learned pointer I sort thrust
My university made decision long time I enrolled center curriculum around Java Data Structures professor gave one lecture C asked u implement pointer I felt like I getting something head
I understood definition A pointer variable contains address variable But I still understand large part concept
Looking back I think centered three thing What exactly memory location
At time I take Computer Organization class The awkward syntax So um exactly defined like int subsequently I refer variable ip
How exactly beneficial store address variable rather use variable
It I purchased K R book completed every problem I really got grasp pointer
Besides fact I long completed Computer Organization class I think required learning C part fact I realized pointer used function array structs useful thing merely storage address ordinary variable
But aha moment far way K R explained awkward syntax defining simple pointer
I took note throughout book I rephrase point made book word order understanding one relating A pointer variable contains address variable
A pointer defined dereferenced yielding value stored memory location point operator expression mnemonic
I always felt I could fully grasp advanced concept pointer I something elementary ingrained head
It bothered endlessly assignment I well way exist right I thought I defined
Mastering essential advanced concept involving pointer like function pointer complicated definition like All I think concept pointer requires A basic understanding memory laid computer memory
Knowledge powerful pointer real world usage another abstract concept learn sake learning
Deciphering hieroglyphic colloquially known definition pointer So I think least aha moment learning pointer
I still student I thought appreciate viewpoint someone still relatively fresh learning concept
Pointer bit like application shortcut desktop
Delete shortcut target still exists
Start shortcut target get started
I always explain working simple creating txt file desktop two shortcut file
After copying deleting shortcut see people understand idea behind
Once group understands basic behind shortcut start explaining pointer anyway want
They probably understand pretty easily
year ago I taught intro C course community college
This always fun topic explore
What seemed work best discussing time use coffee cup hand
I used analogy coffee cup row array variable hold something
I used hand could also hold something extending index finger point coffee cup
A close hand null finger pointing head like mock gun dangling pointer
Then demonstration trip debugger clicked
I really get quite worried I hear get grasp pointer question
I always thought concept incredibly simple logical evolution language providing great power programmer
The thing worry I never found difficult understand concept pointer
So finally get start thinking Do I actually get
Maybe I never
Maybe reason concept seems tricky one keep telling everyone yet encounter pointer difficult hundred way learn
Just throwing idea course personally I love good diagram
I never much problem pointer C may I learn assembler first
It actually relief manage address
So maybe answer assuming something teaching give student emulated assembly language work
They figure process writing anything sophisticated Hello world
How I really learned pointer
By writing simple compiler freshman year college
How explain pointer layman term
I like dated
analogy library catalog stored index card
Each card pointer contains information book data located actually contain book
If modify card pointer arithmetic change book point impact book careful screw address might point book even wrong library
However follow address card go proper part library dereference pointer book
A pointer variable whose value memory address another variable
I shall assume someone going learn pointer know normal variable work Now let try define pointer They also variable different nature
Assume two layer variable space
The normal variable different type resides upper layer pointer lower layer
Like As name suggests pointer POINT something
Like finger point object
What thing point
These normal variable
In short Pointers point normal variable
So pointer declared
Almost like normal variable
You precede name asterisk
Then pointer associated variable
Using operator variable like How pointer used pointing variable
This also done preceding name asterisk
Then used place variable pointing instead Now play pointer code
Just get used characteristic pointer
Upto point talking pointer
Once ok start studying pointer pointing variable react normal arithmetic operation applied
Then go relation pointer array pointer pointer
That I shall suggest learning pointer
My path understanding I recall correctly went like
I simple experience assembly programming I still I concept memory bunch box see
This reinforced use array
However I going world C deal string meant pointer
In BASIC trivial assembler I never work classic C pointer stuff
Ah I scuttle back array null terminated string like All well good array char bit per character little world zero character end show end
The printf take array run printing
But I want pas string function
Is manual say
Hmm mean pointer char
OK lost
Then dawned make p equivalent
OK I use I still twigged pointer
I mean I set data one thing
Off manual As I write I saying declare pointer char set equal array character
Somehow pointer away need array
Guess compiler stuff change
So I change array pointer
I know I could use array version equivalent pointer speak
Off manual
I suppose simply mean content memory address
Which meant pointer p address bong
That sound enlightenment
I suddenly twigged pointer long time ago old timer grok later
It indirection
Original OK worth Imagine memory bunch box
Each box number side address
Each box contains number content
You work box way variable I want content box N pointer I want content box
Pointers simply indirection
And big answer cover everything ever need know
Get little block wood
add metal hook one end metal eye
linked list stuff play
Try explaining physical prop
I often wished I teaching pointer first year freshman student
The little metal hook pointer block wood thing pointed
I DEFY anyone get playing block
I made life easier I removed fluff started treating pointer variable rather magical entity long long ago grade know thing The rest syntactic sugar common Just write simple C program like implementing linked list library using pointer get hang
I cant quite remember circumstance around I retroactively refitted memory around understanding array

For reason I find immensely helpful view pointer array whenever I happen upon
Basically Gary Rowe introduced right model
Memory set box address number
Each box store value number
The idea pointer interpret value one box address another box
This value used specific box called
Thus process opening box refered
variable box statement I think server purpose introducing pointer something completely different
It concept hard grasp I kid
It always seemed like dark magic I never truly understood needed lot special character
The first time I understand I wrote small game using double indirection language pointer arithmetic
That enlightened
Pointers matter interpretation
I think explaining make thing lot easier
And pointer arithmetic extremely simple intuitive operation shown simple example memory variable
The explanation really grocked Consider city grid different house built piece land
In hand hold piece paper
On paper written David house So street
The piece paper pointer variable contains address David house
When want tell friend look David cool house much easier use pice paper reference house send actual two story building mail
As real pointer get trouble follow address piece paper
David could moved get find big hole ground
In case would better erase address paper David moved least change new one
You could also find go address enter think friend David living room time end complete stranger swimming pool
Someone else used space address something completely different
If want explain pointer explain memory first
I usually using graph paper row column
If student understands memory understand address
If got address got pointer
You play abstraction

write address number one square another square
Now draw arrow pointer square destination square
Now overwrite pointer
increment adjust arrow
Write address another square let student draw arrow Next step Give certain square like pointer name
Now explain dereferencing
That
Perhaps I work well analogy
So let say friend Foo want someone else different Bar contact reason
Foo could take go see Bar convenient moving being instance around
However Foo could send Bar phone number pointer
That way matter Foo know contact without find
And let say Bar acquaintance Baz also want get touch
But protective phone number want everyone Baz call Bar phone pointer forward call another pointer
And chain Baz friend friend friend
Pointers make sense studied assembly language computer architecture
I think I teach C class I would start couple week architecture explain memory model kind instruction processor actually executes
My aha
moment came tutorial To exact came chapter To even precise came sentence The parameter passed put pointer value pointer since parameter C passed value value pointer address point simply address
When I read cloud parted angel blew trumpet fanfare
For see every C tutorial book I read prior asserted C could pas value reference nefarious lie
The truth C always pass value sometimes value passed happens address
Within method copy made address like copy would made int passed
A copy made value pointer point
Thus using pointer within method access original value change
I never became C programmer I became programmer object object reference work way reference object passed value thus copied object copied
I worked around many programmer understand never learned pointer
The trick explain location thing thing like picture pipe
When move thing location change
The location remains thing put
A pointer sticky note tell something useful
It contains location thing tell big thing C anyway
So double pointer like sticky note say There six pack fridge
You actually go get six pack figure Coke Budweiser
declaring initializing simple variable creating point p variable v int pointer p declare pointer variable type int pointed p data p point address variable v represents literal value p This site great tutorial learning pointer memory management
I would suggest walk pointer basic pointer memory given site
You also look linked list problem given link strengthen pointer concept
The key explaining pointer making sure people explaining already understanding concept memory
Whilst would nice really understood low level believing memory exists massive array understanding access position array index location enough
The next step concept passing index location rather copying entire memory make sense people
And enough allow people understand pointer useful
final step understand pointer explain pas parameter memory index location method store index location data stored
I found step far people cope
Once someone grasped basic step straight forward grasp chain pointer indefinitely long keep track many time need look address find actual data object
Once someone grasped pointer next thing must grasp quickly difference heap memory stack memory pointer stack memory dangerous passed outside method
I remember book C puzzle similar I read purely one related book available library understanding C rudimentary
It threw C expresison asked explion getting complicated
When I university professor really neat powerpoint slide depicting point separate variable arrow memory location represented like array Linked Lists would showing arrow change pointer dereferenced etc way one could understand within couple minute
The concept really easy right applying practical program requires practice
Before I I explain programming everything us memory static variable allocation memory
I also explain memory address relation memory space memory address variable
Finally I explain integer data type variable string data type variable explaining special data type store memory address empty value like called
And finally dynamically allocated variable thru usage pointer
asked viewed active site design logo Stack Exchange Inc user contribution licensed

Hamlet Othello Romeo Juliet Julius Caesar Share Sparknote page Page Page Page Page Throughout introduction computer science class may hear reference made wonderful thing called pointer experience missing wonderful world possibility
Pointers necessary facet almost every computer program written whether personal academic commercial use
This tutorial explain use
What exactly pointer
Stated simply pointer nothing variable hold address computer memory
This pointer get name
A pointer variable hold address certain piece memory computer word pointer point specific location memory
In essence pointer nothing variable hold number address specific memory location
For let think memory big blob storage space put information later want retrieve far truth
Let say simple program follows What happens run program
First computer set aside little bit memory hold integer
It store value variable
Page Page Page Page Take Study Break
SparkNotes brought
Visit B N buy rent check tablet ereaders including
All Rights Reserved

Pointers often referred A contains address location
The location starting point allocated object object value type element array
Stay date latest development Internet terminology free weekly newsletter Webopedia
Join subscribe
The following fact statistic capture changing landscape cloud computing service provider customer keeping
The following computer science fact statistic provide quick introduction changing trend education related career
From ZZZ guide list text message online chat abbreviation help translate understand today texting lingo
Learn five generation computer major technology development led computing device use Computer architecture provides introduction system design basic computer science student
Networking fundamental teach building block modern network design
Learn different type network concept architecture

In address data
More commonly term refers contains said memory address
Pointers exist instruction level may also exist syntactic level HLLs
A pointer memory address A said
To manipulate memory referenced pointer P called
A fundamental strength pointer redefined single name refer many object
Pointers may also incremented decremented mean adjusted reference next previous object assuming object placed one another memory
The name data quite apt indeed bear quite resemblance physical structure
Although large variety data structure work one say general composed several piece object connected one another via pointer
Because pointer may redefined fundamentally mutability allows data structure change time
The method allows programmer manipulate pointer greatly affect style program written language
Some language allow nearly unrestricted manipulation pointer program written C often rely heavily pointer pointer arithmetic pointer
On extreme language variable actually implemented pointer though programmer notice syntactic distinction
Somewhere middle spectrum lay language employ form pointer restricted access compiler may still prove type correctness
In Standard ML majority data structure designed produce modified copy data structure instead modifying data structure pointer redefinition
In language unrestricted pointer manipulation pointer created reference value
This allows programmer maintain reference memory unsafe
Such language often allow programmer perform various arithmetic operation pointer addition subtraction unsafe difficult even advanced assure resulting pointer reference valid memory location
Additionally language often allow programmer perform pointer word allow programmer treat pointer object type O object type This unsafe since operation valid object type O unless specially crafted invalid object type Overall language introduce restriction programmer thus enable large class program bug detected compile time
Some argue lead le reliable software extended development time
Languages many restriction pointer manipulation generally agreed safer since programmer left fewer opportunity error
Additionally language category generally also feature garbage collection simplify memory issue
References explicitly created every created object stored typed pointer
In language pointer incremented decremented since large assumption indeed object stored sequential memory address
Finally typecasts pointer language restricted impossible cast rejected compile time cast checked type compatibility

Stack Exchange network consists Q A community including largest trusted online community developer learn share knowledge build career
Whist reading article outlining difference I came across function pointer
It since I completed Computer Science degree I looked pointer refresh memory
Pointers variable contain reference memory address
They considered point data contained memory address data exists
Or case article might indicate entry point section code used call code
Why different variable
Variables symbolic name memory address compiler replace name actual address
This mean variable contain reference memory location considered point data address data exists
If difference behaviour maybe pointer reassigned runtime assigned symbolic variable name value mean variable particular type pointer type
In way variable declared type integer restricted compile used
What I missing
Your question interesting several way requires careful distinction several issue
But vision seems essentially correct
I read reference writing answer avoid biasing answer
First statement almost correct confuses concept usual implementation
A variable actually container contain value changed
Usually container implemented computer bock memory space characterized address since variable may contain object require representation le information
But I consider mostly abstract point view semantics language independently implementation technique
So variable container abstract point view
Such container need name
However language often variable named associating identifier us variable expressed identifier
A variable actually several identifier various aliasing mechanism
A variable also subpart larger variable example cell array variable named specifying array variable index cell could well also associated identifier aliasing
I deliberately using word somewhat neutral avoid invoking word may semantically loaded technically
It actually close concept often confused memory address
The word often understood memory address I think meaningful considering language probably inappropriate discussion paper refer though address used inappropriately referring specific implementation
However appropriate language like C supposed much closer implementation concept machine architecture
Actually look variable value implementation level may several complex system indirection machine level pointer invisible user abstract point view I develop valid
For programming language user worry even know implementation implementation vary lot given language
This may true language C intentionally close machine architecture advanced substitute assembly language almost direct relation explicit binary coding far low level convenient use situation
What user language know sometimes even le value associated operation contained associated name naming system work new kind value defined etc
So another important concept identifier naming
Naming entity value done associating identifier value usually declaration
But value also obtained applying operation named value
Names reused rule scoping rule determine associated given identifier according context use
There also special name called litterals name value domain integer
boolean

The association unchanging value identifier usually called constant
Litterals constant sense
Value container also considered value association identifier variable usual naive sense using
So might say variable container constant
Now might wonder difference associating identifier value constant declaration assigning value variable
storing value container defined container constant
Essentially declaration may seen operation defines notation associate identifier syntactic entity value semantic entity
Assignment purely semantics operation modifies state
modifies value container
In sense declaration meta concept semantic effect providing naming
syntactic mechanism semantics entity
Actually assignment semantic operation occur dynamically program executed declaration syntactic nature usually interpreted text program independently execution
This static scoping
textual scoping usually natural way understand meaning identifier
After I say pointer value another name container pointer variable container variable
container constant contain another container possible limitation containing game imposed type system
Regarding code state
Actually quite true
A section code often meaningless alone high level implementation point view
From point view code usually contains identifier interpret identifier static context declared
But actually possible duplication static context due essentially recursion dynamic phenomenon code executed appropriate dynamic instance static context
This bit complex consequence proper concept closure associate piece code environment identifier interpreted
The closure proper semantic concept
properly definable semantic value
Then closure constant closure variable pointer closure container contain another container containing closure
A function closure usually parameter define initialise entity constant variable
I skipping many variation us mechanism
Closures used define OO structure imperative functional language
Actually early work OO style probably name done way
The paper reference I skimmed quickly seems interesting one written competent person possibly easy reading significant experience variety language underlying computational model
But remember many thing eye beholder long preserve consistent view
Points view may differ
Does answer question
The difference definition application pointer specialized variable hold memory address another variable OO term pointer would perhaps considered inherit behavior general class called variable
By posting answer agree
asked viewed active site design logo Stack Exchange Inc user contribution licensed

This action might possible undo
Are sure want continue
What Change Pointer available

Studypool value privacy
Only question posted visible website
want learn pointer example Brown University Tutors California Institute Technology Tutors Carnegie Mellon University Tutors Columbia University Tutors Dartmouth University Tutors Emory University Tutors Harvard University Tutors Massachusetts Institute Technology Tutors New York University Tutors Notre Dam University Tutors Oklahoma University Tutors Pennsylvania State University Tutors Princeton University Tutors Stanford University Tutors University California Tutors Oxford University Tutors Yale University Tutors Enter email address associated account email link reset password
Accounting Communications Geology Physics Algebra Computer Science Health Medical Political Science Art Design Economics History Programming Article Writing Engineering Law Psychology Biology English Management Python Business Finance Environmental Science Marketing SAT Calculus Film Mathematics Social Science Chemistry Foreign Languages Philosophy Sociology Statistics Science Website Design Writing Essay Writing Questions Archive Accounting Environmental Science Political Science Algebra Essay Writing Programming Art Design Film Psychology Article Writing Foreign Languages Python Biology Geology Questions Archive Business Finance Health Medical SAT Calculus History Science Chemistry Law Social Science Communications Management Sociology Computer Science Marketing Statistics Economics Mathematics Website Design Engineering Philosophy Writing English Physics Accounting Communications Geology Physics Statistics Algebra Computer Science Health Medical Political Science Science Art Design Economics History Programming Website Design Article Writing Engineering Law Psychology Writing Biology English Management Python Essay Writing Business Finance Environmental Science Marketing SAT Philosophy Calculus Film Mathematics Social Science Sociology Chemistry Foreign Languages Questions Archive Studypool powered Microtutoring Studypool inc California company

In serf element two principal operation The order element come stack give rise alternative name
Additionally operation may give access top without modifying stack
The name stack type structure come analogy set physical item stacked top make easy take item top stack getting item deeper stack may require taking multiple item first
Considered abstractly sequential collection push pop operation occur one end structure referred stack
This make possible implement stack pointer top element
A stack may implemented bounded capacity
If stack full contain enough space accept entity pushed stack considered state
The pop operation remove item top stack
Stacks entered computer science literature used term bury unbury mean calling returning subroutine
Subroutines already implemented proposed idea filed patent March Bauer received invention stack principle
The concept developed independently Australian first half
Stacks often described analogy stack plate cafeteria
Clean plate placed top stack pushing already
When plate removed stack one pop become new top
In many implementation stack operation push pop
An example top stack observes element without removing stack
Since done pop push data essential
An underflow condition occur stack top operation stack empty pop
Also implementation often function return whether stack empty
A stack easily implemented either
What identifies data structure stack either case implementation interface user allowed pop push item onto array linked list helper operation
The following demonstrate implementation using
An array used implement bounded stack follows
The first element usually bottom resulting first element pushed onto stack last element popped
The program must keep track size length stack using variable record number item pushed far therefore pointing place array next element inserted assuming index convention
Thus stack effectively implemented structure The operation add element increment index checking overflow Similarly decrement index checking underflow return item previously top one Using possible implement stack grow shrink much needed
The size stack simply size dynamic array efficient implementation stack since adding item removing item end dynamic array requires amortized O time
Another option implementing stack use
A stack pointer head list perhaps counter keep track size list Pushing popping item happens head list overflow possible implementation unless memory exhausted Some language make stack operation push pop available standard type
Some language notably family including designed around stack directly visible manipulated programmer
The following example manipulating stack Lisp interpreter prompt line starting interpreter response expression Several container type operation LIFO semantics additionally template class adapts existing container provide restricted operation
PHP class
Java library contains class specialization
Following example program language using class
A common use stack architecture level mean allocating accessing memory
A typical stack area computer memory fixed origin variable size
Initially size stack zero
A usually form hardware register point recently referenced location stack stack size zero stack pointer point origin stack
The two operation applicable stack There many variation basic principle stack operation
Every stack fixed location memory begin
As data item added stack stack pointer displaced indicate current extent stack expands away origin
Stack pointer may point origin stack limited range address either origin depending direction stack grows however stack pointer cross origin stack
In word origin stack address stack grows downwards towards address stack pointer must never incremented beyond etc
If pop operation stack cause stack pointer move past origin stack occurs
If push operation cause stack pointer increment decrement beyond maximum extent stack occurs
Some environment rely heavily stack may provide additional operation example Stacks often visualized growing bottom like stack
They may also visualized growing left right topmost becomes rightmost even growing top bottom
The important feature bottom stack fixed position
The illustration section example growth visualization top stack bottom since stack top item pushed popped
A move first element third position second first third second
Here two equivalent visualization process A stack usually represented computer block memory cell bottom fixed location stack pointer holding address current top cell stack
The top bottom terminology used irrespective whether stack actually grows towards lower memory address towards higher memory address
Pushing item stack adjusts stack pointer size item either decrementing incrementing depending direction stack grows memory pointing next cell copy new top item stack area
Depending exact implementation end push operation stack pointer may point next unused location stack may point topmost item stack
If stack point current topmost item stack pointer updated new item pushed onto stack point next available location stack updated new item pushed onto stack
Popping stack simply inverse pushing
The topmost item stack removed stack pointer updated opposite order used push operation
Many design including dedicated register use stack pointer dedicated call return push pop instruction implicitly update dedicated register thus increasing density
Some CISC processor like also typically stack pointer well
In contrast CPU design dedicated stack instruction therefore register may used stack pointer needed
The architecture example set register organised stack direct access individual register relative current top also possible
As machine general implicit argument allows small footprint good usage also prevents type optimization possible processor permitting two three operand
A stack structure also make implementation somewhat complex implement although still feasible exemplified modern implementation
example architecture using within another strategy avoid use slow main memory function argument return value
There also number small microprocessor implement stack directly hardware stack directly accessible
Examples line
Many microprocessor used implement programming language level
Stacks also used basis number mainframe mini computer
Such machine called famous
Calculators employing use stack structure hold value
Expressions represented prefix postfix infix notation conversion one form another may accomplished using stack
Many compiler use stack parsing syntax expression program block etc
translating low level code
Most programming language allowing parsed stack based machine
Another important application stack
Consider simple example finding correct path maze
There series point starting point destination
We start one point
To reach final destination several path
Suppose choose random path
After following certain path realise path chosen wrong
So need find way return beginning path
This done use stack
With help stack remember point reached
This done pushing point stack
In case end wrong path pop last point stack thus return last point continue quest find right path
This called backtracking
The prototypical example backtracking algorithm find vertex graph reached specified starting vertex
Other application backtracking involve searching space represent potential solution optimization problem
technique performing backtracking search without exhaustively searching potential solution space
A number meaning define basic operation adding two number printing character taking argument stack placing return value back stack
For example return stack operand stack also graphic state stack dictionary stack
Many also including
Almost way receive parameter return special stack hold information calling nesting order switch context called function restore caller function calling finish
The function follow runtime protocol caller callee save argument return value stack
Stacks important way supporting nested function call
This type stack used implicitly compiler support CALL RETURN statement equivalent manipulated directly programmer
Some programming language use stack store data local procedure
Space local data item allocated stack procedure entered deallocated procedure exit
The typically implemented way
Using stack data procedure call important security implication see programmer must aware order avoid introducing serious security bug program
Several use stack separate usual function call stack programming language principle organize information
These include Some computing environment use stack way may make vulnerable security breach attack
Programmers working environment must take special care avoid pitfall implementation
For example programming language use common stack store data local called procedure linking information allows procedure return caller
This mean program move data stack contains critical return address procedure call
If data moved wrong location stack oversized data item moved stack location large enough contain return information procedure call may corrupted causing program fail
Malicious party may attempt attack take advantage type implementation providing oversized data input program check length input
Such program may copy data entirety location stack may change return address procedure called
An attacker experiment find specific type data provided program return address current procedure reset point area within stack within data provided attacker turn contains instruction carry unauthorized operation
This type attack variation attack extremely frequent source security breach software mainly popular compiler use shared stack data procedure call verify length data item
Frequently programmer write code verify size data item either oversized undersized data item copied stack security breach may occur

Earn industry credential earn degree
As nonprofit university WGU put student first
Earn degree half cost online university
Western Governors University
All Rights Reserved WGU Indiana accredited online university offering online bachelor master degree program

You still full access site functionality may lost
For best experience upgrade browser following link

