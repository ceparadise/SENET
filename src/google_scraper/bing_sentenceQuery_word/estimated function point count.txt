A unit measurement express amount business functionality product provides user
Function point used compute functional size measurement FSM software
The cost dollar hour single unit calculated past project
As several recognized standard public specification sizing software based Function Point
open membership computer industry standard consortium adopted Automated Function Point AFP specification led
It provides standard automating Function Point counting according guideline International Function Point User Group However current implementation standard limitation able distinguish External Output EO External Inquiries EQ box without upfront configuration
Function point defined Allan Albrecht
The software identified one categorized one five type output inquiry input internal file external interface
Once function identified categorized type assessed complexity assigned number function point
Each functional user requirement map business function data entry Input user query Inquiry
This distinction important tends make function measured function point map easily requirement also tends hide internal function
algorithm also require resource implement
There currently ISO recognized FSM Method includes algorithmic complexity sizing result
Recently different approach proposed deal perceived weakness implemented several commercial software product
The variation IFPUG method designed make weakness include The use function point favor line code seek address several additional issue Albrecht observed research Function Points highly correlated line code resulted questioning value measure objective measure namely counting line code available
In addition multiple attempt address perceived shortcoming measure augmenting counting regimen
Others offered solution circumvent challenge developing alternative method create proxy amount functionality delivered

This action might possible undo
Are sure want continue
POM UMass D available

This action might possible undo
Are sure want continue
Function available

computer scientist Internet entrepreneur
He chief executive officer Sporcle
He best known early employee key technical contributor original Napster
Aydar bought Fanning first book programming language would use two year later build Napster software
January April American computer scientist
She founded Institute Women Technology Anita Borg Institute Women Technology
While Digital Equipment developed patented method generating complete address trace analyzing designing memory system
born August Canadian computer scientist best known work programming language compiler related algorithm textbook art science computer programming
Aho received
Engineering Physics University Toronto
born December Danish computer scientist notable creation development widely used programming language
He Distinguished Research Professor hold College Engineering Chair Computer Science
born October American business magnate philanthropist investor computer programmer inventor
Gates former chief executive chairman Microsoft world largest software company Paul Allen
born Minneapolis Minnesota American computer scientist
He graduated Purdue University BS EE started computing career wiring programming IBM hybrid mechanical electronic Card Programmed Allison Division General Motors
born American technologist creator JavaScript scripting language
He cofounded Mozilla project Mozilla Foundation Mozilla Corporation served Mozilla Corporation chief technical officer briefly chief executive officer
born American software engineer Distinguished Professor Computer Science Industrial Systems Engineering TRW Professor Software Engineering
He known many contribution area software engineering
born November The Hague Netherlands computer scientist
He studied mathematics University Groningen wrote PhD thesis Rapid user interface development script language Gist
In joined World Wide Web Consortium work Cascading Style Sheets CSS
born American Software Engineer worked Sun Microsystems later Oracle Corporation following acquisition Sun
Cantrill included list development DTrace function OS Solaris provides mean tracing diagnosis software
He currently Chief Technology Officer Joyent
FRS December October English polymath
He mathematician philosopher inventor mechanical engineer best remembered originating concept programmable computer
September October American computer scientist
He created C programming language colleague Ken Thompson Unix operating system
Ritchie Thompson received Turing Award ACM American computer scientist
He one small group helped develop system Stanford later resulted Sun Microsystems later founder Silicon Graphics
He define application binary interface Solaris Sun principal system software product
August April English computer scientist working IBM invented relational model database management theoretical basis relational database
He made valuable contribution computer science
born August American computer scientist pioneer field optimizing compiler
Her achievement include seminal work compiler code optimization parallelization
She also role intelligence work programming language
born August American electrical engineer manager
An early employee Digital Equipment Corporation DEC Bell designed several PDP machine later became Vice President Engineering overseeing development VAX
born
November Argentina mathematician computer scientist
Beginning late Chaitin made contribution algorithmic information theory metamathematics particular result equivalent Godel incompleteness theorem
OC born May Canadian computer scientist best known father Java programming language
In Gosling received Bachelor Science Computer Science University Calgary
December March American computer scientist
He directed team invented first widely used programming language FORTRAN inventor form BNF widely used notation define formal language syntax
born November Marconi Professor Communications Systems Computer Laboratory University Cambridge
Professor Jon Crowcroft distinguished many seminal contribution development Internet
His work satellite link interconnection technique paved way rural broadband
born March American business magnate computer scientist Google alongside Sergey Brin
On April Page succeeded Eric Schmidt chief executive officer Google
As Page personal wealth estimated US
billion ranking Forbes list billionaire
born September computer programmer author widely known creator Perl programming language Camelia spunky spokesbug Perl
Wall grew south Los Angeles Bremerton Washington starting higher education Seattle Pacific University
born December Finnish American software engineer well known architect development Linux kernel
He honored along Shinya Yamanaka Millennium Technology Prize Technology Academy Finland recognition creation new open source operating system computer leading widely used Linux kernel
born Guatemalan entrepreneur associate professor Computer Science Department Carnegie Mellon University
He known one pioneer crowdsourcing
He founder company reCAPTCHA sold Google CEO Duolingo popular platform
FRS Italian computer scientist Assistant Director Microsoft Research Cambridge UK
Cardelli well known research type theory operational semantics
Among contribution helped design implemented first compiler functional programming language ML
born February American business magnate investor philanthropist author
He known founder CEO Dell one world leading seller personal computer PCs
November August Professor Massachusetts Institute Technology Director
Laboratory Computer Science LCS
During Dertouzos term LCS innovated variety area including RSA encryption spreadsheet NuBus X Window System Internet
June November British computer scientist credited several important development computing
At time death Wilkes Emeritus Professor University Cambridge
He received number distinction
born Professor Artificial Intelligence University Bristol recipient Royal Society Wolfson Research Merit Award
His research contribution across different area machine learning artificial intelligence bioinformatics
Specifically work concentrated statistical analysis learning algorithm
June August known Don Estridge led development original IBM Personal Computer PC thus known father IBM PC
His decision dramatically changed computer industry resulting vast increase number personal computer sold bought
November Scharnhausen today part Ostfildern May Echterdingen today part German priest inventor
In devised precision sundial heliochronometer incorporated correction equation time
November July computer scientist known concurrent programming theory
In research computer science focused concurrent programming Inspired Dahl Kristen Nygaard programming language Simula invented monitor concept
born November Greenlandic programmer Canadian citizenship
He created PHP scripting language authoring first two version language participating development later version led group developer including Jim Winstead
born March American software freedom activist computer programmer
He best known launching GNU Project founding Free Software Foundation developing GNU Compiler Collection GNU Emacs writing GNU General Public License
retired professor computer science mathematics philosophy The University Texas Austin
He J Strother Moore invented string search algorithm particularly efficient string searching algorithm
He Moore also collaborated automated theorem prover Nqthm
born December Amercian engineer one father Internet sharing title American Internet pioneer Vint Cerf
In December Kahn Cerf received National Medal Technology founding developing Internet
Kahn protocol important communication protocol Internet
He responsible originating DARPA Internet program
In Kahn recipient prestigious ACM Alan Turing award
In received Presidential Medal Freedom highest civilian award United States
born Chandigarh December
He grew Bangalore early education Bishop School Pune St Joseph Boys High School Bangalore
Sabeer Bhatia Indian American entrepreneur founded Hotmail email service Jaxt
born August American computer scientist internet entrepreneur Larry Page Google one profitable Internet company
As June personal wealth estimated US billion
Together Brin Page percent company
computer scientist working area data management database theory finite model theory
He currently senior researcher Institute national de recherche en informatique et en automatique INRIA French national research institute focussing computer science related area professor College de France
Better known Apple Computers Steve Jobs American inventor pioneered microcomputer revolution
Born San Francisco California Jobs laid foundation Apple Computers along partner Steve Wozniak
Under Steve leadership Apple launched series revolutionary product iPhone iPod iPad major contribution modern technology
Steve also known architect Macintosh widely popular operating system catalyzed mass production computer GUI
Steve passed away long battle pancreatic cancer
born June also known TimBL British computer scientist best known inventor World Wide Web
Berners Lee director World Wide Web Consortium oversees Web continued development
born June American internet pioneer recognized one father Internet sharing title American engineer Bob Kahn
His contribution acknowledged lauded repeatedly
He instrumental development first commercial email system MCI Mail connected Internet
Copyright
All Rights Reserved

Software system unless thoroughly understood like ice berg
They becoming difficult understand
Improvement coding tool allows software developer produce large amount software meet ever expanding need user
As system grow method understand communicate size need used
Function Point Analysis structured technique problem solving
It method break system smaller component better understood analyzed
Function point unit measure software much like hour measuring time mile measuring distance Celsius measuring temperature
Function Points ordinal measure much like measure kilometer Fahrenheit hour forth Human being solve problem breaking smaller understandable piece
Problems may appear difficult simple broken smaller part dissected class
Classifying thing placing category familiar process
Everyone one time another shopkeeper take stock shelf librarian catalog book secretary file letter document
When object classified content system set definition rule must used place object appropriate category scheme classification
Function Point Analysis structured technique classifying component system
It method break system smaller component better understood analyzed
It provides structured technique problem solving
In world Function Point Analysis system divided five large class general system characteristic
The first three class component External Inputs External Outputs External Inquires component transact file therefore called transaction
The next two Internal Logical Files External Interface Files data stored combined form logical information
The general system characteristic ass general functionality system
Brief History Function Point Analysis developed first Allan Albrecht mid
It attempt overcome difficulty associated line code measure software size assist developing mechanism predict effort associated software development
The method first published later
In Albrecht refined method since International Function Point User Group IFPUG set several version Function Point Counting Practices Manual published IFPUG
The current version IFPUG Manual
A full downloaded website
Objectives Function Point Analysis Frequently term end user user used without specifying meant
In case user sophisticated user
Someone would understand system functional perspective likely someone would provide requirement acceptance testing
Since Function Points measure system functional perspective independent technology
Regardless language development method hardware platform used number function point system remain constant
The variable amount effort needed deliver given set function point therefore Function Point Analysis used determine whether tool environment language productive compared others within organization among organization
This critical point one greatest value Function Point Analysis
Function Point Analysis provide mechanism track monitor scope creep
Function Point Counts end requirement analysis design code testing implementation compared
The function point count end requirement design compared function point actually delivered
If project grown scope creep
The amount growth indication well requirement gathered communicated project team
If amount growth project decline time natural assumption communication user improved
Characteristic Quality Function Point Analysis Function Point Analysis performed trained experienced personnel
If Function Point Analysis conducted untrained personnel reasonable assume analysis done incorrectly
The personnel counting function point utilize current version Function Point Counting Practices Manual Current application documentation utilized complete function point count
For example screen format report layout listing interface system system logical preliminary physical data model assist Function Points Analysis
The task counting function point included part overall project plan
That counting function point scheduled planned
The first function point count developed provide sizing used estimating
The Five Major Components Since common computer system interact computer system boundary must drawn around system measured prior classifying component
This boundary must drawn according point view
In short boundary indicates border project application measured external application user domain
Once border established component classified ranked tallied
elementary process data cross boundary outside inside
This data may come data input screen another application
The data may used maintain one internal logical file
The data either control information business information
If data control information update internal logical file
The graphic represents simple EI update ILF FTR

elementary process derived data pass across boundary inside outside
Additionally EO may update ILF
The data creates report output file sent application
These report file created one internal logical file external interface file
The following graphic represents EO FTR derived information green derived ILF elementary process input output component result data retrieval one internal logical file external interface file
The input process update Internal Logical Files output side contain derived data
The graphic represents EQ two ILF derived data
user identifiable group logically related data resides entirely within application boundary maintained external input
user identifiable group logically related data used reference purpose
The data resides entirely outside application maintained another application
The external interface file internal logical file another application
After component classified one five major component ranking low average high assigned
For transaction ranking based upon number file updated referenced number data element type
For file ranking based upon record element type data element type
A record element type user recognizable subgroup data element within ILF EIF
A data element type unique user recognizable non recursive field
Each following table assist ranking process numerical rating parenthesis
For example EI reference update File Types Referenced data element would assigned ranking average associated rating
Where combined number Internal Logical Files referenced updated External Interface Files referenced
Like component rated scored
Basically EQ rated Low Average High like EO assigned value like EI
The rating based upon total number unique combined unique input side data element file type referenced combined unique input output side
If FTR used input output side counted one time
If DET used input output side counted one time
For number record element type number data element type used determine ranking low average high
A Record Element Type user recognizable subgroup data element within ILF EIF
A Data Element Type DET unique user recognizable non recursive field ILF EIF
The count level complexity type component entered table following one
Each count multiplied numerical rating shown determine rated value
The rated value row summed across table giving total value type component
These total summed across table giving total value type component
These total summoned arrive Total Number Unadjusted Function Points
The value adjustment factor VAF based general system characteristic GSC rate general functionality application counted
Each characteristic associated description help determine degree influence characteristic
The degree influence range scale zero five influence strong influence
The IFPUG Counting Practices Manual provides detailed evaluation criterion GSC table intended provide overview GSC
Brief Description Once answered tabulated using IFPUG Value Adjustment Equation VAF Ci degree influence General System Characteristic VAF Ci representing GSC
summation
The final Function Point Count obtained multiplying VAF time Unadjusted Function Point UAF
FP UAF VAF Summary benefit Function Point Analysis Function Points used size software application accurately
Sizing important component determining productivity
They counted different people different time obtain measure within reasonable margin error
Function Points easily understood non technical user
This help communicate sizing information user customer
Function Points used determine whether tool language environment productive compared others
For complete list us benefit FP please see online article
Conclusions Accurately predicting size software plagued software industry year
Function Points becoming widely accepted standard metric measuring software size
Now Function Points made adequate sizing possible anticipated overall rate progress software productivity software quality improve
Understanding software size key understanding productivity quality
Without reliable sizing metric relative change productivity Function Points per Work Month relative change quality Defects per Function Point calculated
If relative change productivity quality calculated plotted time focus put upon organization strength weakness
Most important attempt correct weakness measured effectiveness
For information Share copy distribute transmit work Remix adapt work make commercial use work

The rule Functional Size Measurement Method IFPUG standard Function Point Analysis Method CPM Unadjusted often referred IFPUG Function Point Analysis FPA
Functional Size Measurement FSM technique measuring software term functionality delivers
The standard Functional Size Measurement defines FSM mean quantifying Functional User Requirements
function user required delivered
The Functional Size used many purpose
However primarily used planning stage input project resource estimation algorithm cost effort schedule
At completion project used compare performance term cost effectiveness efficiency development support team
FSM measure functional requirement software
This mean applied development commences rather retrospectively case form software measurement counting line code physical object
This capability measure early enables accurate estimate made risk evaluated project scope negotiated final commitment made
FSM also enables comparison application project based size
Productivity rate application similar attribute profile compared benchmarking improvement purpose
Productivity rate past project also used predict effort project Functional Size determined
FSM used size software work product
This work product output software new development enhancement project
It software migrated production application project implementation
FPA IFPUG method functionally sizing commonly used Functional Size technique
The second common method sizing real time control software
IFPUG FPA used since late ass functionality delivered user based user external business view functional requirement
It measure logical view application compared measuring physically implemented view internal technical view
FPA measure functional requirement term The process performing Function Point Analysis called Point Count involves component
The weighting combined give functional size Unadjusted Function Point Count
An additional step involves assessing technical quality feature embedded software product adjusting functional size accordingly
The result referred Adjusted Function Point Count
The Function Point Analysis technique used ass functionality delivered software point unit measurement
The technique functional modelling functional functional decomposition used model relationship application whole
The mapped onto functional hierarchy application business activity contribute
The following criterion used possible check task determine unique elementary process logical business transaction
It counted unique logical transaction The technique data modelling information engineering entity relationship diagramming used identify relationship
The file mapped hierarchy access
logical master group data business user perspective
They group data tends created although part data may modified independently
They may business reference file
referenced transaction business entity maintained business transaction
NOT include file created technical performance security navigation reason
They permanent group data store temporary data
Once functional component identified classified depending type activity perform user
classified three type Once functional component identified classified evaluated functional complexity using set prescribed attribute
The function categorised either complexity
Functional component awarded Function Points according classification categorisation Once functional component identified classified type assessed complexity awarded point accumulated total The final step within IFPUG methodology adjust count quality technical characteristic using value adjustment factor range
However ISO standard IFPUG technique step optional functional size reported unadjusted value

Function Name Function Type Record Element Type Data Element Type File Types Referenced Unadjusted FPs Navigational data ILF Positional data EIF Navigational data add EI Navigational data change EI Navigational data delete EI Ground speed display EO Air speed display EO Calibrated air speed display EO Terrain clearance display EQ

The principal component project cost This difficult estimate control significant effect overall cost
Software costing carried objectively aim accurately predicting cost contractor developing software
Software cost estimation continuing activity start proposal stage continues throughout lifetime project
Projects normally budget continual cost estimation necessary ensure spending line budget
Effort measured Used known
Boehm discus seven technique software cost estimation A model developed using historical cost information relates software metric usually size project cost
An estimate made metric model predicts effort required
One expert software development technique used application domain consulted
They estimate project cost final cost estimate arrived consensus
This technique applicable project application domain completed
The cost new project estimated analogy completed project
Parkinson Law state work expands fill time available
In software costing mean cost determined available resource rather objective assessment
If software delivered month people available effort required estimated
The software cost estimated whatever customer available spend project
The estimated effort depends customer budget software functionality
A cost estimate established considering overall functionality product functionality provided interacting
Cost estimate made basis logical function rather component implementing function
The cost component estimated
All cost added produce final cost estimate
Each technique advantage disadvantage
For large project several cost estimation technique used parallel result compared
If predict radically different cost information sought costing process repeated
The process continue estimate converge
Cost model based fact firm set requirement drawn costing carried using requirement basis
However sometimes requirement may changed fixed cost exceeded
The commonly used metric cost estimation number line source code finished system course known
Size estimation may involve estimation analogy project estimation ranking size system component using known reference component estimate component size may simply question engineering judgement
Code size estimate uncertain depend hardware software choice use commercial database management system etc
An alternative using code size estimated product attribute use point related functionality software rather size
computed counting following software characteristic The function point count computed multiplying raw count estimated weight summing value multiplied project complexity factor consider overall complexity project according range factor degree distributed processing amount reuse performance
Function point count used conjunction line code estimation technique
The number function point used estimate final code size
Based historical data analysis average number line code particular language required implement function point estimated AVC
The estimated code size new application computed follows Code size AVC x Number function point The advantage approach number function point often estimated requirement specification early code size prediction made
Halstead Effort Model Technology constant C combine effect using tool language methodology quality assurance procedure
standard etc
It determined basis historical data past project
C determined project size area effort curve project duration
Rating C poor C good C excellent
Effort productivity change development time varies year Considers wide variety factor
Projects fall three category organic semidetached embedded characterized size
In model us source size There also model well size us
The intermediate model accurate basic model
All general characteristic require Before You Leap developed Gordon Group Wang Institute Cost Model developed Wang Institute developed Digital Equipment Corporation automated estimation tool based COCOMO
Each tool requires user provide preliminary LOC estimate
These estimate categorized programming language type adapted code reused code new code
The user also specifies value cost driver attribute
Each tool produce estimated elapsed project duration month effort average staffing per month average productivity cost per month
This data developed phase software engineering process individually entire project
automated costing system based Model
SLIM applies Putnam software model linear programming statistical simulation program evaluation review technique PERT scheduling method technique derive software project estimate
The system enables software planner perform following function interactive session local software development environment interpreting historical data supplied planner create software developed eliciting basic software characteristic personal attribute environmental consideration conduct software approach used SLIM sophisticated automated version LOC costing technique
Once software size LOC software function established SLIM computes size deviation indication estimation uncertainty indicates potential deviation cost effort consistency check data collected software system similar size
The planner invoke linear programming analysis considers development constraint cost effort provides distribution effort data collected software system similar size
estimation model us function point estimation method enhanced accommodate variety project personnel factor
The ESTIMACS tool contains set model enable planner estimate ESTIMACS develop staffing cost using life cycle data base provide work distribution deployment information
The target hardware configuration sized processor power storage capacity estimated using answer series question help planner evaluate transaction volume window application data
The level risk associated successful implementation proposed system determined based response questionnaire examines project factor size structure technology
developed Software Productivity Research user complete simple set multiple choice question address All tool implemented personal computer engineering workstation
Martin compared tool applying project
A large variation estimated result encountered predicted value sometimes significantly different actual value
This reinforces fact output estimation tool used one data point estimate derived source estimate

Stack Exchange network consists Q A community including largest trusted online community developer learn share knowledge build career
I performing function point analysis FPA project
I completely new process started login authentication module validate result I get
I think I understood data function well count internal logic file external interface file correct
I need guidance calculating transaction function EI EO EQ
Here process specification I counting essential part process External Inputs External Outputs Internal Logical file No External Queries External Interface Files
Despite weighing count low complexity I get UFPs SLOC Java SLOC per FP turn suprisingly high effort estimate using COCOMO II even lowest coefficient
My doubt related FP count complexity I concerned whether I choosing right thing EI EO
As far I understand FPA technique information entering boundary application counted EI logically login logout sign update setting forgot password input
Similarly Invalid login successful login invalid data related error message timeout information etc output
So I even EI EOs I counted output FP count go high unrealistically
Am I FPA correctly I misunderstand something
You generally Function Point Analysis correctly result look sensible
However For graphical user interface best think EIs EOs
Therefore login form one external input
You classifying validation error separate external output
I would since validation rate limiting etc
part login functionality
Instead I would weigh login functionality higher complexity special error handling
I would classify item That right External Outputs
But fair application really anything yet provides login
If separate screen viewing setting versus updating setting I count separate simple EO
I also assume various point login credential entered user share common code complexity handling password fairly simple
Using complexity weight simple EIs medium EIs complex EIs simple ILFs I arrive function point count C
This noticeably le estimate still ballpark
If use adjustment factor F might shift
The estimate describe time spent coding functionality
It estimate whole project duration includes amount analysis design testing
According lecture I heard topic estimated effort would development task
So FPs correspond effort roughly would development time
The estimate get COCOMO tend sound unbelievably long put context large organization differing skill level unexpected complication bug work necessary software development coding good reminder optimistic
Of course faster bet
When function point analysis done meticulously applied project FPA good fit number tend realistic order magnitude
Web development bit different
First many mature web framework library make easier create solid website quickly long already know framework
A single experienced person could probably implement requirement within day week login important basic web framework might actually teach application
Secondly web development tends involve far line code necessary difficult
If create login form hand write form HTML style CSS perhaps check JavaScript create URL login form POST create actual backend code check password
That might well line code total mean would take whole month
I therefore wary applying COCOMO web development since much code boilerplate written quickly
By posting answer agree
asked viewed active site design logo Stack Exchange Inc user contribution licensed

