In technique arranging complexity computer system
It work establishing level complexity person interacts system suppressing complex detail current level
The programmer work idealized interface usually well defined add additional level functionality would otherwise complex handle
For example programmer writing code involves numerical operation may interested way number represented underlying hardware
whether detail suppressed said leaving simply programmer work
In addition task sending email message across continent would extremely complex programmer start piece fiber optic cable basic hardware component
By using layer complexity created abstract away physical cable network layout presenting programmer virtual data channel task manageable
Abstraction apply control data abstraction action
The notion programming viewed way combine abstraction data code
The abstract definition used common family object different implementation behavior share meaning
The mechanism programming used define common interface
The recommendation programmer use abstraction whenever suitable order avoid duplication usually known
The requirement programming language provide suitable abstraction also called abstraction principle
Computing mostly operates independently concrete world The hardware implement interchangeable others
The software structured enable human create enormous system concentrating issue time
These architecture made specific choice abstraction
architecture inevitable complex
A central form abstraction computing language abstraction new artificial language developed express specific aspect system
help planning
processed computer
An example abstraction process generational development
Each stage used stepping stone next stage
The language abstraction continues example
Within programming language feature let programmer create new abstraction
These include
Some abstraction remain invisible operate design system
Some abstraction try limit range concept programmer need aware completely hiding abstraction turn built
The software engineer writer criticised effort claiming abstraction never completely hide detail however negate usefulness abstraction
Some abstraction designed interoperate abstraction example programming language may contain making call language
Different programming language provide different type abstraction depending intended application language
For example Analysts developed various method formally specify software system
Some known method include Specification language generally rely abstraction one kind another since specification typically defined earlier project abstract level eventual implementation
The specification language example allows definition class waterfall project remain abstract architecture specification phase project
Programming language offer control abstraction one main purpose use
Computer machine understand operation low level moving bit one location memory another location producing sum two sequence bit
Programming language allow done higher level
For example consider statement written fashion To human seems fairly simple obvious calculation
However step necessary carry evaluation return value assign value variable actually quite subtle complex
The value need converted binary representation often much complicated task one would think calculation decomposed compiler interpreter assembly instruction much le intuitive programmer operation shifting binary register left adding binary complement content one register another simply human think abstract arithmetical operation addition multiplication
Finally assigning resulting value variable labeled used later involves additional step looking variable label resultant location physical virtual memory storing binary representation memory location etc
Without control abstraction programmer would need specify step time simply wanted add multiply couple number assign result variable
Such duplication effort two serious negative consequence Structured programming involves splitting complex program task smaller piece clear interface component reduction complexity potential
In simple program may aim ensure loop single obvious exit point possible single exit point function procedure
In larger system may involve breaking complex task many different module
Consider system handle payroll ship shore office These layer produce effect isolating implementation detail one component assorted internal method others
programming embrace extends concept
Data abstraction enforces clear separation property detail implementation
The abstract property visible client code make use data data concrete implementation kept entirely private indeed change example incorporate efficiency improvement time
The idea change supposed impact client code since involve difference abstract behaviour
For example one could define called uniquely associate value may retrieved specifying corresponding key
Such lookup table may implemented various way even simple linear key value pair
As far client code concerned abstract property type case
Of course relies getting detail interface right first place since change major impact client code
As one way look interface form agreed behaviour data type client code anything spelled contract subject change without notice
In theory involves facility define object represent abstract actor perform work report change state communicate object system
The term refers hiding detail extending concept earlier programming language associate strongly data standardizing way different data type interact beginning
When abstraction proceeds operation defined enabling object different type substituted called
When proceeds opposite direction inside type class structuring simplify complex set relationship called
Various programming language offer similar facility abstraction support general strategy programming includes substitution one another similar role
Although generally supported image package may predetermine great many
This would leave minimum binding change
example feature le distinction use delegation
Individual object function abstracted flexibly better fit shared functional heritage
exemplifies another extreme relies heavily static binding turn certain flexibility problem
Although example offer alternate strategy achieving abstraction fundamentally alter need support abstract noun code programming relies ability abstract verb function noun data structure either process
Consider example sample fragment represent common farm animal level abstraction suitable model simple aspect hunger feeding
It defines class represent state animal function With definition one could create object type call method like In example class abstraction used place actual animal abstraction case generalisation
If one requires differentiated hierarchy animal differentiate say provide milk provide nothing except meat end life intermediary level abstraction probably DairyAnimal cow goat would eat food suitable giving good milk MeatAnimal pig steer would eat food give best
Such abstraction could remove need application coder specify type food could concentrate instead feeding schedule
The two class could related using stand alone programmer could define varying degree two type
These facility tend vary drastically language general achieve anything possible others
A great many operation overload data type data type effect degree inheritance mean achieve polymorphism
The class notation simply coder convenience
Decisions regarding abstract keep control coder become major concern design determining relevant relationship real world concern
In general determine appropriate abstraction one must make many small decision scope domain analysis determine system one must cooperate legacy analysis perform detailed analysis expressed within project time budget constraint design
In simple example domain barnyard live pig cow eating habit legacy constraint detailed analysis coder must flexibility feed animal available thus reason code type food class design single simple Animal class pig cow instance function
A decision differentiate DairyAnimal would change detailed analysis domain legacy analysis would entirely control programmer refer abstraction programming distinct abstraction domain legacy analysis
When discussing refers act considering le detailed safe definition observed program behavior
For instance one may observe final result program execution instead considering intermediate step execution
Abstraction defined precise model execution
Abstraction may respect property one answer question property equally well concrete abstract model
For instance wish know result evaluation mathematical expression involving integer worth need perform operation modulo familiar form abstraction
Abstractions however though necessarily
That possible get sound answer though abstraction may simply yield result
For instance may abstract student class minimal maximal age one asks whether certain person belongs class one may simply compare person age minimal maximal age age lie outside range one may safely answer person belong class one may answer I know
The level abstraction included programming language influence overall
The framework includes concept formalism
This framework allows designer programming language study abstraction characteristic design change abstraction influence language usability
Abstractions prove useful dealing computer program property computer program essentially see
As consequence automatic method deriving information behavior computer program either drop termination occasion may fail crash never yield result soundness may provide false information precision may answer I know question
Abstraction core concept
generally take place abstract version studied system
Computer science commonly present le commonly abstraction wherein level represents different model information process varying amount detail
Each level us system expression involving unique set object composition apply particular domain
Each relatively abstract higher level build relatively concrete lower level tends provide increasingly granular representation
For example gate build electronic circuit binary gate machine language binary programming language machine language application operating system programming language
Each level embodied determined level beneath making language description somewhat
Since many user database system lack familiarity computer database developer often hide complexity following level The lowest level abstraction describes system actually store data
The physical level describes complex data structure detail
The next higher level abstraction describes data database store relationship exist among data
The logical level thus describes entire database term small number relatively simple structure
Although implementation simple structure logical level may involve complex physical level structure user logical level need aware complexity
This referred
must decide information keep database use logical level abstraction
The highest level abstraction describes part entire database
Even though logical level us simpler structure complexity remains variety information stored large database
Many user database system need information instead need access part database
The view level abstraction exists simplify interaction system
The system may provide many database
The ability provide different level abstraction use
Some specifically generate design contain various level abstraction
Layered architecture partition concern application stacked group layer
It technique used designing computer software hardware communication system network component isolated layer change made one layer without affecting others

Still question
Ask

In separation distinct segment
Perhaps common example unpacking separation vowel plus nasal consonant borrowed language nasal vowel
This seen English borrowing French Portuguese word Portuguese occurs widely French balance
Here nasality vowel separated nasal consonant
If happen nasality would lost
Unpacking occurs borrowing within language time
syllabic ऋ become maintained syllabic feature separated vowel

Unpack mean original form
A packed file compressed take le area
Stay date latest development Internet terminology free weekly newsletter Webopedia
Join subscribe
The following fact statistic capture changing landscape cloud computing service provider customer keeping
The following computer science fact statistic provide quick introduction changing trend education related career
From ZZZ guide list text message online chat abbreviation help translate understand today texting lingo
Learn five generation computer major technology development led computing device use Computer architecture provides introduction system design basic computer science student
Networking fundamental teach building block modern network design
Learn different type network concept architecture

Gain access thousand additional definition advanced search free
First Known Use century See See It year since I moved I still book
I suitcase soon I arrived home
By time got hotel I tired
She good complex concept
These example sentence selected automatically various online news source reflect current usage word
Views expressed example represent opinion editor

century What made want look
Please tell u read heard including quote possible
Subscribe America largest dictionary get thousand definition advanced free
large elaborate party Get Word Day daily email
Naughty Nice Quiz Can spell commonly misspelled word
learn interesting thing along way
Subscribe America largest dictionary get thousand definition advanced free
Learn new word every day
Delivered inbox
OTHER DICTIONARIES FOLLOW US Incorporated

Stack Exchange network consists Q A community including largest trusted online community developer learn share knowledge build career
In parallel programming practical use
I searched practical example find use
By posting answer agree
asked viewed site design logo Stack Exchange Inc user contribution licensed

Stack Exchange network consists Q A community including largest trusted online community developer learn share knowledge build career
The older dictionary I include remove container meaning unpack
More recent dictionary list analyze nature examining detail analyze something component
tertiary meaning
When unpack start used mean analyze
The answer
That first example OED figurative meaning see
The OED include specific meaning relates computing
Its first reference fig
Nashe Haue sig
The strange phrase new vented vnpackt
Lamb Imperf
Sympathies Elia He brings total wealth company gravely unpacks
Miller Old Red Sandstone vi
The unpacked arranged uptilting agent
Philosophy XLI
If unpack meant come opinion individual people
Peacocke Creation World Sci

The theological enterprise always involved much unpacking elaborating image
Computers Automation Unpack separate packed item information separate machine word
Wrubel Primer Programming Digital Computers viii
If data consist significant digit two number single word
They transferred card machine word must subsequently appropriate program
Gregory Van Horn Automatic Syst
iii
The instruction given required unpack card set quantity bill calculation
Computer Jrnl
A formed one stream function unpacks word byte
Searching Google Ngram I assume typical example result suggest starting point usage really took
By posting answer agree
asked viewed active site design logo Stack Exchange Inc user contribution licensed

If interested Computer Science bachelor degree field sure exactly suggest take education one step develop better career opportunity increase knowledge field
A Master Computer Science great option
A Master Computer Science open door many new exciting job
A career Computer Science mean design analyze new computer system study robotics even research artificial intelligence
These area study student experience Master Computer Science
Here find Master Computer Science program
This page program field several country
You choose program Cyber Security Government Information Technology even Color Science
Pick Master Computer Science program liking begin path technological enlightenment today
This course aim introduce basic mathematical concept develop argument presented introductory section order provide student operational tool applied course course quantitative method used namely Financial Mathematics Statistics
At end course student mastered appropriate tool better understand mathematical quantitative aspect economic model
This course aim introduce basic mathematical concept develop argument presented introductory section order provide student operational tool applied course course quantitative method used namely Financial Mathematics Statistics
At end course student mastered appropriate tool better understand mathematical quantitative aspect economic model
Our master degree course aimed enabling graduate enter world work excellent level preparation
This qualification complete student previous study give competitive academic professional profile present business Barcelona also worldwide
The Master Data Science designed recent graduate interested management data analysis would like take role central business value creation
A Data Scientist already become one specialist professional world
The Master Data Science designed recent graduate interested management data analysis would like take role central business value creation
A Data Scientist already become one specialist professional world
The data business becoming key sector European economy development product service based data analysis data collected company public entity available social network
The aim obtain operational indication identify new business opportunity
Big Data big challenge today world training professional understand create value complex information
Companies fact need urgency manage acquisition presentation sharing analysis visualization data
The MRes Master Research Computer Science programme designed develop student understanding research process ability carry research
Overview The MRes Computer Science programme designed develop understanding research process
It graduate discipline wish investigate research possible career wish extend knowledge one particular facet computing
This programme provides MRes allows focus desired specialism whilst international staff provide necessary support
Graduates programme XJTLU master degree earn University Liverpool degree recognised Chinese Ministry Education
Knowledge skill The MRes Computer Science programme equip comprehensive knowledge understanding Everything want connected
Enter program shape new boundary computing
The study combine theoretical practical component view experience demanded computer industry significant portion program devoted practical software hardware design experiment prototyping
Theoretical knowledge engineering skill acquired Computer Systems Communication Networks Distributed Systems Machine Learning
Everything want connected
Enter program shape new boundary computing
The study combine theoretical practical component view experience demanded computer industry significant portion program devoted practical software hardware design experiment prototyping
Theoretical knowledge engineering skill acquired Computer Systems Communication Networks Distributed Systems Machine Learning
The program provides student broad foundation information technology IT understanding computer data communication modern networking
It includes course distributed system algorithm wireless networking software development data mining visualization
The computer network concentration course provide student comprehensive understanding network design implementation network performance analysis management network security latest networking technology
The thesis project performed company research facility university Thesis Master Science Program Computational Sciences Engineering Koc University Istanbul Turkey taught English

Computational Sciences Engineering Program description In program graduate student trained modern computational science technique application solve scientific engineering problem
New technological problem associated research challenge heavily depend computational modeling
Because availability powerful inexpensive computer computational experimentation standard approach analysis design complex system real experiment expensive infeasible
Graduates program capable formulating solution computational problem use multidisciplinary knowledge gained combination classroom laboratory experience basic science engineering
The MSc Data Science program designed desire deepen comprehension aspect data science
Applicants could graduate degree strong mathematical core continuing academic pursuit achieving BSc data science
This program taught ENGLISH
The data science new frontier human knowledge new domain discovery
Data scientist analytical programming skill needed extract valuable knowledge data
The burgeoning technology sector quickly becoming epicenter data science
The MSc program designed desire deepen comprehension aspect data science
Applicants could graduate degree strong mathematical core continuing academic pursuit achieving BSc data science
Students begin program foundational knowledge programming mathematics including data structure algorithm statistic machine learning
During first year knowledge mathematics programming data analysis significantly extended
The program also offer opportunity obtain key soft skill professional world including technical project management writing presenting
Finally student expected attend substantial amount talk workshop offered university well working Capstone project
The Master Applied Science MASc Electrical Computer Engineering Program student interested pursuing advanced study research Biomedical Technologies Communications Systems Computer Software Systems Energy Systems Micro Nano Technologies
Electrical Computer Engineers develop computing system chip architecture mobile application communication protocol well energy system allow device electrical system function
The discipline huge impact society help design system use everything health finance safety
The Master Applied Science MASc Electrical Computer Engineering Program student interested pursuing advanced study research Biomedical Technologies Communications Systems Computer Software Systems Energy Systems Micro Nano Technologies
Electrical Computer Engineers develop computing system chip architecture mobile application communication protocol well energy system allow device electrical system function
The discipline huge impact society help design system use everything health finance safety
In program student choose contribute research technology close already market technology early stage research quantum computing carbon nanotube
The Master Programme Management Data Science geared towards student wanting advance skill data analysis phenomenon
After completion programme graduate ability analyze massive complex data set design statistical model based latest information technology
The programme designed meet demand data scientist business public administration research
The Master Programme Management Data Science geared towards student wanting advance skill data analysis phenomenon
After completion programme graduate ability analyze massive complex data set design statistical model based latest information technology
The programme designed meet demand data scientist business public administration research
The rapid economic technological transformation occurring global economy transition industrial economy confront corporate leader new challenge
The rising flood data associated dynamic complexity today business environment longer handled traditional method manager personal experience alone
This degree programme delivers interdisciplinary learning research opportunity allows student gain knowledge practical management solution
Through integration management data analysis information system knowledge student able develop latest innovative solution managing organization We introducing Master Digital Marketing Web Analytics
In addition official title Inesdi Digital Business School get university degree University Nebrija
We introducing Master Digital Marketing Web Analytics
In addition official title Inesdi Digital Business School get university degree University Nebrija
Internet digital platform information technology transforming environment
Companies need professional profile line new market trend promoting Master Degree degree Nebrija University
With objective train professional provide solution digital transformation immersed company society general
This Master university degree Digital Marketing Web Analytics becomes concerning specialized training digital economy applied different area business organization
Students develop knowledge appropriate technique design implementation management analysis moderation Digital Marketing PlanIncluding also Strategy Plan measuring website
The SDM specialization train student become future Digital Leaders able innovate suggest new content new us new service based open source technology major publisher Microsoft Adobe etc
The SDM specialization train student become future Digital Leaders able innovate suggest new content new us new service based open source technology major publisher Microsoft Adobe etc
In global context digital technology becoming increasingly strategic SDM prepares developer gain knowledge system infrastructure database API programming well project management technique
At end student gain knowledge Data Basis mobile application video game development
They show technological diligence strong listening skill able manage human factor linked new us
The Master Science Data Science Public Policy joint degree offered Georgetown McCourt School Public Policy Georgetown Graduate Analytics program combining historic strength McCourt public policy analysis curriculum computational mathematical statistical method training Georgetown Analytics program
From smartphones credit card tweet car data everywhere everything
Even power line airport road drive data exist place even think
The smart intentional application data could allow u make better public policy decision find pattern effectively deliver critical service like healthcare education national security
In government around world nonprofit private sector demand data analyst scientist manager increasing quickly
The key position occupied Informatics various area business research requires foundation current knowledge exceeds basic job qualification
In Master Science program Informatics
acquire knowledge high level even point qualifying doctoral study Science
Master Applied Computer Science School Informatics The key position occupied Informatics various area business research requires foundation current knowledge exceeds basic job qualification
In Master Science program Informatics
acquire knowledge high level even point qualifying doctoral study Science
Program core objective The Faculty Mathematics Computer Science offer study program mathematics informatics around student
The Department Computer Science offer BSc study program Informatics Romanian English Applied Informatics Romanian MSc study program Artificial Intelligence Distributed Computing Romanian English Software Engineering Romanian Applied Informatics Science Technology Economics Romanian PhD program Cloud Computing High Performance Computing Artificial Intelligence Automated Reasoning Theoretical Computer Science also main research direction department member
The Faculty Mathematics Computer Science offer study program mathematics informatics around student
The Department Computer Science offer BSc study program Informatics Romanian English Applied Informatics Romanian MSc study program Artificial Intelligence Distributed Computing Romanian English Software Engineering Romanian Applied Informatics Science Technology Economics Romanian PhD program Cloud Computing High Performance Computing Artificial Intelligence Automated Reasoning Theoretical Computer Science also main research direction department member detail see http
This Master program strong orientation towards innovation research
It produce graduate thorough knowledge fundamental field computer science structure use computer system scientific research method
This Master program strong orientation towards innovation research
It produce graduate thorough knowledge fundamental field computer science structure use computer system scientific research method
Graduates understand use tool discrete continuous mathematics applied mathematics physic knowledge foundation technique method design development information system
They able provide effective solution range computational information management problem using mixture fundamental Computer Science technique prepared move international scene
Degree awarded Official Degree Data Science
The Master Data Science Barcelona Graduate School Economics offer thorough training predictive descriptive prescriptive analytics
With training graduate prepared design build system private public sector
The study program organized around following coordinate Courses taught leading academic field Statistics Economics Operations Research experienced professional Analytics industry
The study program also includes top guest speaker currently expanding frontier knowledge Analytics
The student learn put practice taught classroom using real data answering real business question wide array company different industry
Students opportunity solve entire Analytics project practicum local company

A question I gotten lot lately difference similarity Computer Science Computer Engineering
At risk difference I written guide explain Computer Science Computer Engineering alike differ
Computer Engineering marriage Computer Science Electrical Engineering
It focus computing form microprocessor embedded computing device laptop desktop system supercomputer
As concern electrical engineering consideration microprocessor function designed optimized data communicated among electronic component integrated system electronic component designed operate process instruction expressed software software written compiled optimized specific hardware platform
Therefore computer engineer electrical engineer specialize software design hardware design system design integrates
Computer Science study data instruction processed stored communicated computing device
A modern descendant Applied Mathematics Electrical Engineering Computer Science deal algorithm processing data symbolic representation data instruction design instruction language processing data technique writing software process data variety computing platform protocol communicating data reliably securely across network organization data database various type scale emulation human intelligence learning computer algorithm statistical modeling data large database support inference trend technique protecting content authenticity data
Therefore computer scientist scientist mathematician develop way process interpret store communicate secure data
Because Computer Engineers Computer Scientists ultimately work data attempt ultimately harness meaning significant overlap coursework student two field take well career pursue
This minimize distinctive nature two discipline
It simply acknowledges fact type computer professional find context purpose similar kind project different aspect kind project
Both Computer Engineers Computer Scientists advance computing technology solve problem using computing technology
If consider computing technology term scale Computer Engineers operate often microscopic macroscopic end spectrum whereas Computer Scientists work middle part spectrum
More specifically Computer Engineers deal physic semiconductor electronics may design hardware integrated circuit level small well integration hardware software optimized run realize complete computing system large
Computer Scientists write software design database devise algorithm format communication secure data processed hardware make integrated system function
Consider iPhone
Apple employ Computer Scientists Computer Engineers design new version iPhone
Computer Engineers Electrical Engineers designed chip house integrated circuit make iPhone various component cell radio screen control memory microprocessor function figured get various component work
That involves looking device microscopic level integrated system level
Computer Scientists wrote operating system manages memory concurrently running application apps app store run top operating system packing unpacking data packet network communication encrypting data prying eye see
The computer scientist provide glue piece bring turn computer engineer beginning product component design computer engineer end product device people text browse web play Angry Birds
From example easy imagine much dependence function realizing finished product significant overlap coursework Computer Engineers Computer Scientists take career opportunity pursue
I found website provides particularly helpful description Computer Engineering identifies kind job Computer Engineers work company hire salary earn
That page begin helpful list specialization area Computer Engineering
I copied list specialization I marked asterisk Computer Scientists also specialize
In case overlap Computer Scientists focus software development aspect specialization Computer Engineers study hardware design integration hardware software needed implement specialization
That website present number interesting data Computer Engineering
For example table express relationship among Electrical Engineering Computer Engineering Computer Science term class major take percentage class fall category hardware software
You see computer science software computer engineering hardware theme play table
That easiest way distinguish two field
And yet enough overlap ensure kind student find plenty opportunity wide range career computer field
Professor chair Mathematics Computer Science Director Master Science Information Security Lewis University
You find
Please also I would like ask difference Sc
Computer Science Sc
Mathematics Computer Science
I computer science social science natural science
That good question
There consensus kind science Computer Science
A good book subject The Science Computing Shaping Discipline Matti Tedre
Personally I see Computer Science engineering discipline
Like Electrical Engineering applies law Physics Math solve problem
Computer Engineering Computer Science mean different thing different people
I think article may explaining American view
In Spain degree time I called Computer Science Engineering literally translated lasted year
Actually amount work year degree number Credits standardized EU
They teach math quite bit database software hardware
I think equivalent Degree Master US
Now education Spain changed programme I date I know issued kind lightweight degree year
Later go buy master without knowing nearly much knew degree fundamental
What business built top education
I find bit shame actually
But give older engineer competitive advantage opinion
Greetings everyone I Computer Engineering Computer Science
The simplest way I think explain difference BSCE BSCS considering two degree following A BSCE degree include coursework also required BSEE electrical engineering degree
This prepare graduate work company develop product consisting software directly control hardware
Some example Motorola Nokia texas instrument
A BSCE degree include little hardware electrical engineering course required BSCE degree
Instead computer science coursework operating system design compiler theory advanced algorithm design taken instead
This best degree working company google amazon Citrix
Which best depends interest want work
In experience many company need kind
While engineer Citrix never need interface hardware develop window kernel mode device driver
good luck
Required field marked Kathrynne Skonicki Director Media Relations Office Marketing Communications

The philosophy computer science concerned ontological methodological ethical issue arise within academic discipline computer science well practice software development
Thus philosophy computer science share philosophical goal philosophy mathematics many subfields philosophy science philosophy biology philosophy social science
The philosophy computer science also considers analysis computational computing system focus method involved design specification programming verification implementation testing system
The abstract nature computer program resulting complexity implemented artifact coupled technological ambition computer science ensures many conceptual question philosophy computer science analogue philosophy empirical science
Other issue characterize philosophy computer science
We shall concentrate three tightly related group topic form spine subject
First discus topic related ontological analysis computational artifact Sections
Second discus topic involved methodology epistemology software development Sections
Third discus ethical issue arising computer science practice Section
Applications computer science briefly considered section
Computational artifact underpin Facebook page control air traffic around world ensure surprised snow
They applied algebra car manufacturing laser surgery banking gastronomy astronomy astrology
Indeed hard find area life fundamentally changed enhanced application
But applied
What thing give substance application
The trite answer entity computer scientist construct artifact computer science
Much philosophy computer science concerned nature specification design construction
Folklore computational artifact fall two camp hardware software
Presumably software includes compiler natural language understanding system whereas laptop tablet hardware
But distinction drawn How delineate take software take hardware
A standard way identifies distinction one see entry hardware taken physical software abstract
Unfortunately seem quite right
As Moor point program normally seen software therefore characterization abstract may also physical device
In particular program identified sequence physical lever pull push
There different reaction observation
Some suggested distinction
In particular Suber argues hardware special case software Moor argues distinction ontologically insignificant
On hand Duncan insists important difference one made within ontological framework support finer distinction simple one Smith
Irmak also think software hardware different software abstract artifact apparently standard one temporal property
Whether distinction made substantial writer agree although program taken abstract thing may also cashed sequence physical operation
Consequently Colburn Moor insist program dual nature abstract guise physical one
Indeed conceded would seem apply majority computational artifact
On one hand seem abstract guise enables u reflect reason independently physical manifestation
This certainly applies abstract data type Cardelli Wegner
For example list abstract data type consists carrier type together operation support formation manipulation list
Even made explicit determined several axiom fix property one add element head list form new list remove head old list returned
Similarly abstract stack determined axiom govern operation
Using property one may reason list stack mathematical way independently concrete implementation
And one need
One design program without reasoning one construct correct program without reasoning program intended
If right computational artifact abstract guise separable physical realization implementation
Indeed requirement entertain abstract device support reasoning physical one unique computer science
On hand must physical implementation enables used thing physical world
This obviously true machine equally program Programmers write program control physical device
A program abstract machine physical realization little use practical device performing humanly intractable computation
For instance program monitor heart rate must underpinned physical device actually performs task
The computer scientist Dijkstra put follows
A programmer design algorithm intended mechanical execution intended control existing conceivable computer equipment
Dijkstra On duality view computer science abstract mathematical discipline independent physical world
To used thing must physical substance
And observation made clear link central notion philosophy technology Kroes Franssen et al
turn
Technical artifact include common object everyday life toilet paper clip tablet dog collar
They intentionally produced thing
This essential part
For example physical object accidentally carry arithmetic calculator
This teleological aspect distinguishes physical object led philosopher argue technical artifact dual nature fixed two set property Kroes Meijers Thomasson Vermaas Houkes functional property structural property
Functional property say artifact
For example kettle boiling water car transportation
On hand structural property pertain physical makeup
They include weight color size shape chemical constitution etc
For example might say car red white seat
The notion technical artifact help conceptualize organize central question issue philosophy computer science
We begin concept underpins much activity subject
Indeed initial expression functional property
In computer science artifact initially laid functional specification Sommerville Vliet
Indeed way final device whole series pair varying degree abstractness come existence
The activity specification implementation correctness raise collection overlapping conceptual question problem
Smith Turner Franssen et al

Specifications expressed variety way including ordinary vernacular
But trend computer science towards formal precise form expression
Indeed specialized language developed range designed primarily program specification VDM Jones Z Woodcock Davies B Abrial wide spectrum language UML Fowler specialized one aimed architectural description Rapide Luckham Darwin Distributed Software Engineering Wright Allen
They differ respect underlying ontology mean articulating requirement
Z based upon predicate logic set theory
It largely employed specification suite individual program module simple device
UML Fowler rich ontology wide variety expression mechanism
For example class language allows specification software pattern Gamma et al

In general architectural description language used precisely specify architecture software system Bass et al

Typically language employ ontology includes notion
In particular architectural description written Rapide Darwin Wright precise expression formalism defined using underlying mathematical semantics
But logical function expression language
On face expression formal language
However underlying ontology made explicit language reveals formal ontology may naturally cast type theory Turner
Under interpretation expression stipulative definition Gupta
As defines new abstract object within formal ontology system
However taken definition need specification anything may form part mathematical exploration
So definition act specification
Presumably case definition taken point beyond construction artifact
It intentional act giving governance definition property device system turn mere definition specification
The definition determines whether device system built correctly
It provides criterion correctness malfunction
From perspective role specification normative one
If one asks whether device work definition functioning specification tell u whether
Indeed without question would moot
At level abstraction see logical role specification always It provides criterion correctness malfunction
This perspective argued Turner
Indeed normative role taken part general theory function Kroes
It go without saying idealization
A specification fixed throughout design construction process
It may changed client change mind requirement
Furthermore may turn variety reason artifact impossible build
The underlying physical law may prohibit matter
There may also cost limitation prevent construction
Indeed underlying definition may logically absurd
In case current specification given
But central normative role specification remains intact
Unlike functional description specification taken prescribed advance artifact construction guide implementer
This might taken suggest substantive role specification provide method construction artifact
However method arrive artifact separate issue specification
The latter dictate method
There logical difference functional specification functional description logically provide criterion correctness
Software produced series layer decreasing level abstraction early layer specification artifact abstract Brooks Sommerville Irmak
For example specification written logical notation might taken specification linguistic program
In turn linguistic program associated semantics might taken specification physical device
In word admit abstract entity artifact
This characteristic feature software development Vliet
It distinguishes technology general
The introduction abstract intermediate artifact essential Brooks Sommerville
Without logically complex computational artifact would impossible construct
So happens duality thesis
It still hold good structural description necessarily provide physical property another abstract device
For example abstract stack act specification concrete one given structural description programming language array
But array physical thing abstract one
Its structural description use physical property abstract one axiom
Of course eventually array get implemented physical store
However perspective implementer attempting implement stack programming language array data type artifact abstract array programming language
Consequently duality thesis must generalized allow abstract artifact
Exactly physical intentional conceptualization world related remains vexing problem long history problem philosophy testifies
This situation also affect understanding technical artifact conceptual framework combine physical intentional functional aspect technical artifact still lacking
Kroes Meijers The literature technical artifact Kroes Meijers Thomasson Vermaas Houkes contains two main theory two conceptualization related theory intentional one
theory insist actual physical capacity determine function
Cummins theory functional analysis Cummins influential example theory
The underlying intuition without physical thing actual property artifact
The main criticism theory concern location correctness criterion
If physical device independent measure correctness Kroes The function fixed device actually
Causal role tendency let function coincide actual physical capacity structure function become almost identical
The main drawback approach account malfunctioning technical artifact artifact lack actual capacity performing intended function definition function
The intention associated artifact become irrelevant attributing function
Kroes This criticism flavor made Kripke discussion rule following
Intentional theory insist agent ascribe function artifact
Objects component posse function insofar contribute realization goal
Good example approach McLaughlin Searle
But exactly function get fixed desire agent
One interpretation function determined mental state agent designer user technical artifact
In crude form theory difficulty accounting impose constraint upon actual thing artifact
If function seen primarily pattern mental state hand exist speak head designer user artifact becomes somewhat mysterious function relates physical substrate particular artifact
Kroes For example mental state agent fix function device intended perform addition
This question posed rather different context Kripke
Given everything mental history compatible conclusion I meant plus conclusion I meant quus clear skeptical challenge really epistemological one
It purport show nothing mental history past even omniscient God would establish whether I meant plus quus
But appears follow fact constituted meant plus rather quus
Kripke Of course one might also insist artifact actually accord specification help expression function located mental state agent
This version intentional theory really special case causal theory physical device function located
However alternative interpretation intentional approach
On commentary Wittgenstein notion acting intentionally Wittgenstein David Pears suggests anyone act intentionally must know two thing
Firstly must know activity engaged
Secondly must know succeeded Pears
According perspective establishing correctness externally observable activity
The relation definition artifact manifest using definition canon correctness device
I must able justify reason thinking work If I asked work I must able justify reference abstract definition
The content function laid abstract definition intention take specification manifest using one
Broadly speaking implementation realization specification
Examples includes implementation UML specification Java implementation abstract algorithm program C implementation abstract data type Miranda implementation whole programming language
Moreover implementation often indirect process involves many stage physical bedrock involves pairing notion implementation
But implementation
Is one notion many
The detailed philosophical study implementation given Rapaport
He argues implementation involves two domain syntactic one abstraction semantic one implementation
Indeed suggests full explication notion requires third hidden term medium implementation implementation medium
Here semantic component abstraction medium implementation
He allows target medium abstract physical
This line claim artifact may abstract concrete
Superficially seems right
In example cited medium implementation actual thing implementation carved
Perhaps clearest example implementation programming language
Here syntactic domain actual language semantic one interpretation abstract machine medium interpretation
He suggests implement algorithm express computer programming language implement abstract data type express concrete one
Examples mention might include UML definition design pattern implemented Java Gamma et al

He argues intrinsic difference domain semantic syntactic
This determined asymmetry implementation mapping
For example physical computer process implement program play role semantics linguistic program linguistic program play role semantic domain algorithm
This asymmetry parallel connection
On face little cause dissension
It straightforward description actual use term implementation
However additional conceptual claim le clear
Apparently semantic domain name suggests always taken syntactic one close gap abstraction implementation implementation fill detail
This referential view semantics syntactic domain refers another domain provides meaning
Indeed strong tradition computer science take referential denotational semantics fundamental Stoy Milne Strachey Gordon
We shall examine claim later consider semantics programming language detail
For moment concerned central role kind semantics
One view semantics insists must normative
Although exact form normative constraint Glüer Wikforss Miller Wright debated good deal agreement minimal requirement semantic account must fix use expression correctly
The fact expression mean something implies whole set normative truth behavior expression namely use correct application certain object application
The normativity meaning turn word simply new name familiar fact regardless whether one think meaning term meaningful expression posse condition correct use
Kripke insight realize observation may converted condition adequacy theory determination meaning proposed candidate property virtue expression meaning must ground normativity ought possible read alleged meaning constituting property word correct use word
Boghossian On assumption minimal requirement satisfied adequate semantic theory implementation always even ever semantic interpretation
Are two notion odds
One standard instance implementation concern interpretation one language another
Here abstraction semantic domain language
Unfortunately provide criterion correctness unless already fixed semantics target language
While translating language taken implementation indeed paradigm case present criterion semantic interpretation
It satisfies correctness criterion target language independently given notion correctness
This may achieved informal mathematical way
But must end another uninterpreted language
So paradigm case implementation appear satisfy normative constraint required semantic interpretation
On hand Rapaport argues providing recursive definition implementation requires base case process must end uninterpreted language
However language interpreted mapping symbol either different symbol language
Next consider case abstraction language semantic medium set theory
This would case denotational semantics Stoy
This provide notion correctness
Our shared agreed understanding set theory provides
Unfortunately would normally taken implementation
Certainly would implementation something eventually physically realizable
Now consider case syntactic component abstract stack semantic one array
Here must ask mean say implementation correct
Does medium array fix correct use stack
It would seem The array provide criterion deciding whether correct axiom stack whether used correctly particular application
Rather stack providing correctness criterion implementation array
Instead axiom provide fundamental meaning construct
While array implementation stack provide notion correctness The cart horse interchanged
Finally suppose semantic domain physical machine syntactic one abstract one
The suggestion physical machine provides semantic interpretation abstract one
But semantic interpretation must provide u notion correctness malfunction compelling argument closely related causal theory function
This issue carefully examined section consider programming language semantics
Given semantic account language must supply correctness criterion term semantics bite serious obstacle view implementation semantic interpretation
There several phenomenon rolled one
If objection along right line relationship source target semantic interpretation
Of course one may counter arguing correctness requirement semantic theory
An alternative analysis implementation implicit Turner
Consider case data type finite set implemented data type list
Each structure governed simple axiom
The implementation represents finite set list union operation set list concatenation equality set extensional equality list etc
This mathematical relationship axiom set act specification artifact case implemented medium list
It would appear logical connection two specification artifact
The mapping direct simple correspondence list property implemented operation must satisfy given set axiom
In standard mathematical term list medium must provide mathematical model sense model theory Hodges set axiom
The case one language implemented another similar fleshed semantic definition two language
Finally consider case medium implementation physical device abstract stack implemented physical one
Once abstract stack must provide correctness criterion physical device
This happens practice
We check physical operation satisfy abstract demand given axiom stack
There issue adequacy notion correctness
We shall discus carefully consider computer science notion correctness
If analysis along right line implementation best described relation specification artifact
Implementation semantic interpretation indeed requires independent semantic account order formulate notion implementation correctness
So taken semantic interpretation computer science
How semantic account programming language given
What main conceptual issue surround semantic enterprise
There many different semantic candidate literature Gordon Gunter Fernández Milne Strachey
One important distinction center upon difference operational denotational semantics Turner White
Operational semantics began life Landin
In logical guise Fernández provides mechanism evaluation simplest form evaluation relation represented follows
P This express idea program converges given
The classical case reduction process occurs lambda calculus reduction given reduction rule calculus canonical form none reduction rule apply
The following simple example z This usually called semantics
It normally given term rule provide evaluation complex program term evaluation part
For example simple rule sequencing would take form These canonical normal form term programming language reduced given rule
But term language
For reason operational approach often said unsatisfactory
According criticism point interpretation process semantics formal language must mathematical
We apparently get quite long way expounding property language purely syntactic rule One language Lambda Calculus shall see presented solely formal system syntactic conversion rule But must remember working like manipulating idea talking
To solve real problem must give semantic interpretation
We must say example symbol represent integer
Stoy In contrast operational semantics taken
In particular even one canonical form relation relates syntactic object
This get talking
Unless constant language independently given mathematical meaning point process reach semantic bedrock reducing one syntactic object another yield normative semantics
This lead demand mathematical approach
Apparently programming language refer notation abstract mathematical object syntactic one Strachey McGettrick Stoy
In particular denotational semantics provides syntactic object one
Moreover generally compositional way Complex program denotation fixed term denotation syntactic part
These mathematical object might set theoretic category theoretic type theoretic
But whichever method chosen program taken refer abstract mathematical thing
However position relies clear distinction syntactic mathematical object
Mathematical theory set theory category theory axiomatic theory
And make mathematical
This implicit modern axiomatic treatment mathematics encouraged Bourbaki championed Hilbert
It worth pointing axiomatic account long precise support mathematical reasoning need formal
If one accepts necessary condition mathematical status rule operational account
would seem
Apparently program reduced canonical constant axiomatic definition
But Turner argues look wrong place axiomatization latter resides interpreting constant rule evaluation theory reduction given axiomatic relation
Given denotational operational semantics define matter axiomatically matter take define language formal mathematical theory
Unfortunately always agree The notion equality provided operational account although preserved denotational one often fine grained
This led special form denotational semantics based upon game Abramsky McCusker Abramsky et al

However clear practitioner take operational account fundamental witnessed fact seek devise denotational account agreement operational one
Not metaphysical difference set theoretic account operational one latter taken definitive one
This view programming language perspective theoretical computer science Programming language via operational definition mathematical theory computation
However programming language combinatorial nature
They working tool elegant mathematical theory hard explore mathematically
Does prevent mathematical theory
There little discussion issue literature Turner Strachey exception
On face Strachey see mathematical object pure simple
Turner little cautious argues actual programming language often complex explored mathematical theory contain core theory computation may conservatively extended full language
However Turner argues programming language even core mathematical object
He argues best conceptualized technical artifact
While axiomatic definition provides function also require implementation
In language technical artifact structural description language must say achieved It must spell construct language implemented
To illustrate simplest case consider assignment instruction
x A physical implementation might take following form
This description assignment physically realized
It physical description process evaluation
Of course complete description spell presumably actual machine made one assumes would part structural description underlying computer medium implementation
The task structural description describe process implementation family similarly structured physical machine
Building stipulate complex construct language implemented
For example execute command sequence could add physical stack arranges processing sequence
Of course matter seldom straightforward
Constructs iteration recursion require sophisticated treatment
Indeed interpretation compilation may involve many layer process
However end must interpretation medium physical machine
Turner concludes programming language complex package syntax semantics function together implementation structure
Some suggested physical implementation actually defines semantics language
Indeed common perspective philosophy computer science literature
We already seen Rapaport see implementation semantic interpretation
Fetzer observes program different semantic significance theorem
In particular asserts supposed posse semantic significance theorem seem lack
For sequence line compose program intended stand operation procedure performed machine whereas sequence line constitute proof
Fetzer This seems say physical property implementation contribute meaning program written language
Colburn explicit writes simple assignment statement A semantically ambiguous something like abstract account given physical one given physical memory location receives value physically computing time
Colburn The phrase physically computing seems imply physical machine actually semantically significant
actually determines contributes meaning assignment
Is taken imply fix assignment mean carry physical computation
However actual physical machine taken contribute way meaning construct language meaning dependent upon contingency physical device
In particular meaning simple assignment statement may well vary physical state device contingency nothing semantics language power cut
Under interpretation multiplication mean multiplication rather physical machine actually simulates multiplication
This criticism parallel causal theory function
The nature program subject good amount philosophical legal reflection
What kind thing
Are abstract perhaps mathematical symbolic object concrete physical thing
Indeed legal literature even contains suggestion program constitute new kind legal entity
The exact nature computer program difficult determine
On one hand related technological matter
On hand hardly compared usual type invention
They involve neither process physical nature physical product rather method organization administration
They thus reminiscent literary work even though addressed machine
Neither industrial property law copyright law traditional role seems appropriate instrument protection program protection designed used protect different type creation
The unique nature computer program led broad support creation sui generis legislation
Loewenheim This highlight curious legal status program
Indeed raise tricky ontological question nature program software appear abstract even mathematical object complex structure yet aimed physical device
In section examine philosophical issue arisen regarding nature program software
What content claim program mathematical object
In legal literature debate seems center notion program symbolic object formally manipulated Groklaw
Indeed branch theoretical computer science called formal language theory treat grammar object mathematical study Hopcroft Ullman
While give substance claim important sense program mathematical
This pertains semantics programming language taken axiomatic theory
This perspective locates program element theory computation Turner
While agreeing program abstract guise much philosophical literature Colburn Moor also posse concrete physical manifestation facilitates use physical machine
For example Moor observes It important remember computer program understood physical level well symbolic level
The programming early digital computer commonly done plugging wire throwing switch
Some analogue computer still programmed way
The resulting program clearly physical much part computer system part
Today digital machine usually store program internally speed execution program
A program form certainly physical part computer system
Moor The following recent origin explicitly articulates duality thesis claim software abstract physical guise
Many philosopher computer scientist share intuition software dual nature Moor Colburn
It appears software algorithm set instruction concrete object physical causal process
Irmak Anyone persuaded duality program obligation say something relationship two form existence
This major philosophical concern parallel question technical artifact general
One immediate suggestion program textual object mechanical process
The idea seems somehow textual object physically cause mechanical process
Colburn denies symbolic text causal effect physical manifestation thing disk effect
For software medium description text abstraction medium execution concrete implementation semiconductor
The duality unpacked way parallel found philosophy mind see entry physical device taken semantic interpretation abstract one
This close perspective Rapaport
However already alluded problem approach
A slightly different account found Fetzer
He suggests abstract program something like scientific theory A program seen theory physical In particular simple assignment statement semantics theory physical store behaves
If right program turn accurate description physical device implementation program must changed If theory enshrined program fit physical device changed
But seem happens practice
While program may changed instigated lack accord physical realization independent abstract semantics assignment
If correct abstract semantics appears theory concrete implementation
The alternative picture abstract program determined semantics provides function artifact physical artifact rather description provides structure
It function program expressed semantics fix physical implementation provides criterion correctness malfunction
Programs computational artifact abstract aspect somehow fix physical aspect enables cause physical thing happen
What difference programming specification
One suggestion specification tell u without actually saying
For instance following specification written VDM Jones
real real This specification square root function precondition input positive
It functional description say must without saying achieved
One way unpack difference term distinction
Programs imperative say achieve goal whereas specification declarative describe behavior intended program
Certainly imperative programming paradigm seems capture substantive difference
But appropriate
For example logic functional programming language Thompson obviously governed
The problem programming language evolved point way describing distinction marked style paradigm programming language
Indeed practice program written Haskell Thompson could act specification program written C Huss
A fundamental difference concern direction governance normative partner relationship submissive one
In case specification square root function artifact linguistic program
When program taken specification artifact next level code concrete implementation
This accord Rapaport notion asymmetry implementation
One crucial part software development process verification After computational artifact specified instantiated programming language implemented hardware developer involved activity evaluating whether artifact correct respect provided program specification
Correctness evaluation method roughly sorted two main group formal verification testing
Formal verification Monin involves mathematical proof correctness software testing Ammann Offutt rather implies running implemented program observing whether performed execution comply comply advanced specification behavior program
In many practical case formal method testing used together verification purpose see instance Callahan et al

Formal verification method include construction piece software verified set program specification
In see Van Leeuwen program represented term axiomatic system set rule inference program transition condition proof correctness provided deriving opportunely formalized specification set axiom
In Baier Katoen program represented term state transition system program property specification represented term temporal logic formula Kröger Merz proof correctness achieved search algorithm check whether temporal logic formula hold state transition system
Axiomatic system state transition system used evaluate whether execution represented computational artifact conform conform behavior prescribed specification understood represented system used predict explain future behavior system
In particular state transition system model checking compared methodological basis scientific model empirical science Angius Tamburrini
For instance Kripke Structures compliance Suppes definition scientific model structure establishing proper mapping relation model data collected mean experiment target empirical system see also entry
A Kripke Structure M R L model composed set state together set initial state total state transition relation R S function L S AP labeling state subset set atomic proposition
Kripke Structures state transition system utilized formal verification method often called system specification
They distinguished common specification also called property specification
The latter specify required behavioral property artifact encoded must instantiate former specify principle potential execution already encoded program thus allowing algorithmic check trace Clarke et al

In order achieve goal system specification considered structure set potential execution target computational artifact basis program code allowed state transition Angius
Indeed temporal logic formula checked hold hold modeled Kripke Structure represented program empirically tested behavioral property corresponding checked formula evaluate whether adequate representation target artifact
Accordingly property specification system specification differ also intentional stance Turner Property specification requirement program encoded system specification hypothetical description encoded program
The descriptive abductive character state transition system model checking additional essential feature putting state transition system par scientific model
The agile method software development make extensive use software testing evaluate dependability implemented computational artifact
Testing empirical process launching program observing execution evaluate whether comply comply supplied property specification
Philosophers computer scientist analyzed software testing technique light traditional methodological approach scientific discovery Snelting Gagliardi Northover et al
Angius questioned whether software test acknowledged evaluating correctness program Schiaffonati Verdicchio Schiaffonati Tedre
Dijkstra dictum Program testing used show presence bug never show absence Dijkstra introduces Popper principle computer science Snelting
Testing program advanced property specification given interval time may exhibit failure failure executed observing running program one conclude program correct
An incorrect execution might observed next system test
The reason tester launch program finite subset potential program input set finite interval time accordingly potential execution artifact tested empirically observed
For reason aim software testing detect program fault assure absence Ammann Offutt
A program falsifiable test reveal Northover et al

Given computational artifact property specification test akin scientific experiment observing system behavior try falsify hypothesis program correct respect interested specification
However one careful note methodological epistemological trait characterizing scientific experiment shared software test
A first methodological distinction recognized falsifying test lead revision artifact hypothesis case testing scientific hypothesis
This due difference intentional stance specification empirical hypothesis science Turner
Specifications requirement whose violation demand program revision program becomes correct instantiation specification
Accordingly notion scientific experiment traditionally examined philosophy empirical science need somehow stretched order applied software testing activity Schiaffonati
experiment characterizing experimental science find counterpart actual computer science practice
Indeed one excludes case wherein testing combined formal method experiment performed software engineer rather An experiment explorative aimed exploring realm possibility pertaining functioning artefact interaction environment absence proper theory theoretical background
Schiaffonati Software tester often theoretical control experiment perform exploration behavior artifact interacting user environment rather provides tester theoretical generalization observed behavior
Explorative experiment computer science also characterized fact program often tested environment wherein tester play role user
However essential feature experiment experimenter take part experiment carried
As result software testing activity closer experimental activity one find empirical science others rather define new typology experiment turn belong software development process
Five typology experiment distinguished process specifying implementing evaluating computing artifact Tedre
performed evaluate whether artifact interest performs function specified user stakeholder specific experiment carried evaluate isolated capability system given set initial condition performed real environment simulated one test similar artifact instantiating different way function evaluate instantiation better performs desired function real environment finally used appraise advanced hypothesis behavior testing artifact
Only controlled experiment par scientific experiment carried basis theoretical hypothesis evaluation
A software test considered successful miscomputations detected assuming computational artifact correct
The successive step find caused execution incorrect rather correct trace back fault familiarly named bug proceeding debugging phase testing system
In word observed miscomputation advanced
Efforts spent analyzing explanation computer science Piccinini Piccinini Craver Piccinini Angius Tamburrini forthcoming relation different model explanation elaborated philosophy science
In particular computational explanation understood specific kind Glennan Machamer et al
Bechtel Abrahamsen insofar computing process analyzed mechanism Piccinini see also entry
A mechanism defined term entity activity organized productive regular change start finish termination condition Machamer et al
word set component functional capability organization enabling bring empirical phenomenon
And mechanistic explanation phenomenon turn description mechanism brings phenomenon description involved component functional organization
A computing mechanism defined mechanism whose functional organization brings computational process
A computational process understood general term manipulation string leading input string output string mean operation intermediate string
Consider processor executing instruction
The involved process understood mechanism whose component state combinatory element processor instantiating function prescribed relevant hardware specification specification register Arithmetic Logic Unit etc
organized way capable carrying observed execution
Accordingly providing description mechanism word describing functional organization hardware component count advancing mechanist explanation observed computation explanation operational malfunction
For every type miscomputation defined corresponding mechanist explanation defined adequate level abstraction respect set specification characterizing level abstraction
Indeed abstract description mechanism still supply one mechanist explanation form mechanism defined truncated abstract description mechanism filled description known component part activity Machamer et al

For instance suppose common case machine miscomputes executing program containing syntax error called slip
The computing machine unable correctly implement functional requirement provided program specification
However explanatory purpose would redundant provide explanation occurred slip hardware level abstraction advancing detailed description hardware component functional organization
In case satisfactory explanation may consist showing program code correct instantiation provided program specification Angius Tamburrini forthcoming
In case order explain mechanistically occurred miscomputation may sufficient provide description incorrect program abstracting rest computing mechanism Piccinini Craver
Abstraction virtue software development specification also explanation computational artifact behavior
One earliest philosophical dispute computer science center upon nature program correctness
The overall dispute set motion two paper De Millo et al
Fetzer carried discussion forum ACM Ashenhurst Technical Correspondence
The pivotal issue derives duality program exactly claimed correct relative
Presumably program taken mathematical thing mathematical property
But seen technical artifact physical one
On face Hoare seems committed shall call correctness mathematical affair establishing program correct relative specification involves mathematical proof
Computer programming exact science property program consequence executing given environment principle found text program mean purely deductive reasoning
Hoare Consider specification square root function
What mean program satisfy
Presumably relative abstract semantics every program P carves relationship input output extension
The correctness condition insists relation satisfies specification This demand abstract program determined semantic interpretation language satisfies specification
The statement C mathematical assertion two abstract object principle correctness maybe established mathematically
A mathematical relationship kind surely Hoare mind term abstract guise program little disagree
However several concern
One complexity modern software challenge nature physical correctness challenge
Programmers always surrounded complexity avoid
Our application complex ambitious use computer ever sophisticated way
Programming complex large number conflicting objective programming project
If basic tool language design code program also complicated language becomes part problem rather part solution
Hoare Within appropriate mathematical framework proving correctness linguistic program relative specification theoretically possible
However real software complex
In case proving correctness might infeasible practically
One might attempt gain ground advocating classical correctness proof carried theorem prover least one employed somewhere process
However latter must proven correct
While may reduce correctness problem single program still mean left correctness problem large program
Moreover completely solve problem
For theoretical practical reason practice human involvement completely eliminated
In case proof constructed hand aid interactive proof system
Even rigorous proof correctness rarely forthcoming
One might require individual correctness proof checked computer rather human
But course need checking
Arkoudas Bringsjord argue since one correctness proof need checked namely proof checker possibility mistake significantly reduced
This much practical issue
However deeper conceptual one
Are proof program correctness genuine mathematical proof proof par standard mathematical one
De Millo et al
claim correctness proof unlike proof mathematics
The latter conceptually interesting compelling attract attention mathematician want study build upon
This argument parallel graspability argument made philosophy mathematics
Proofs long cumbersome uninteresting bearer kind certainty attributed standard mathematical proof
The nature knowledge obtained correctness proof said different knowledge may gleaned standard proof mathematics
In order taken proof must graspable
Indeed Wittgenstein would proof graspable act norm mathematical proof Wittgenstein
Mathematical proof proof Gödel incompleteness theorem also long complicated
But grasped
What render complicated proof transparent interesting graspable involves use modularity technique lemma use abstraction act mathematical creation
The introduction new concept enables proof constructed gradually thereby making proof
Mathematics progress inventing new mathematical concept facilitate construction proof would far complex even impossible without
Mathematics proof also involves abstraction creation new concept notation
In contrast formal correctness proof seem involve creation new concept notation
While computer science involve abstraction quite way
One way addressing complexity problem change nature game
The classical notion correctness link formal specification program formal semantic representation
It one end mathematical spectrum
However chain pairing positioned varying degree abstraction governed different notion correctness
For example approach connection UML specification Java program little type checking
The correctness criterion involve structural similarity identity Gamma et al

Here demand one infinite mathematical relation extensionally governed another
At higher level abstraction may connection structure
These still mathematical relationship
However method involve le work may even automatically verified establish much le
The notion program verification appears trade upon equivocation
Algorithms logical structure appropriate subject deductive verification
Programs causal model structure
The success program verification generally applicable completely reliable method guaranteeing program performance even theoretical possibility
Fetzer In fact issue alluded Hoare text Fetzer employ characterize Hoare mathematical stance correctness
When correctness program compiler hardware computer established mathematical certainty possible place great reliance result program predict property confidence limited reliability electronics
Hoare All seemed agreed computational system bottom physical system unpredictable behavior may arise causal connection
Indeed even theorem provers proof checker used result still yield empirical knowledge
A proof checker program running physical machine
It program implemented result depend upon physical computation
Consequently level shall need show physical machine operation meet specification
Testing verification seem yield empirical evidence
Indeed complexity program proving led programmer take physical testing evidence abstract program meet specification
Here assumption underlying implementation correct
But empirical evidence
In apparent contrast Burge argues knowledge computer proof taken knowledge
According Burge knowledge depend justification sensory experience
However allows knowledge may depend possibility sensory experience knowledge red color may even though knowledge requires sensory experience red order concept required even formulate idea
If correct close gap claim correctness proof redrawing boundary knowledge empirical assertion fall former category
For discussion nature use computer mathematical proof see Hales Harrison Tymoczko
Unfortunately practice often even get far
Generally software engineer construct classical correctness proof hand even automatically
Testing software specification suite test case best normally achieved
Of course never yield correctness mathematical sense
Test case never exhaustive Dijkstra
Furthermore hidden assumption underlying implementation correct best empirical method tell u something whole system
Indeed size state space system may large complex even direct testing infeasible
In practice construction mathematical model approximate behavior complex system best
The whole correctness debate carried forum ACM Ashenhurst Technical Correspondence put perspective program considered technical artifact
But leaf one topic When reached physical structure notion correctness operates
What physical device meet specification
What physical implementation
The starting point much contemporary analysis often referred
According simple mapping account physical system performs correct implementation abstract specification case mapping state ascribed physical description state defined abstract specification ii state transition physical state mirror state transition abstract state
Clause ii requires abstract state transition form system physical state map onto go physical state map onto
To illustrate simple mapping account amount consider example abstract machine employ instance machine two location two possible value
Subsequently four possible state
The computation table update operation may easily computed hand take form table pairing
For example sends state state
The simple mapping account demand physical system mapped onto abstract one way abstract state transition duplicated physical version
Unfortunately device easy come Almost anything enough thing play role physical state satisfy quite weak demand implementation
For example collection colored stone arranged update table taken implement table
The simple mapping account demand extensional agreement
It demand
This lead form pancomputationalism almost physical system implement computation
The danger pancomputationalism driven author
Chalmers Egan Sprevak attempt provide account implementation somehow restricts class possible interpretation
In particular certain author
Chalmers Copeland seek impose causal constraint interpretation
One suggestion replace material conditional counterfactual one
In contrast semantic account insists computation must associated semantic aspect specifies computation achieve Sprevak
For example physical device could interpreted AND gate OR gate
It would seem depend upon take definition device
Without way fixing artifact
The syntactic account demand physical state qualify syntactic may mapped onto computational description thereby qualifying computational state
If state lack syntactic structure computational
Of course remains seen count syntactic state
A good overview found Piccinini see also entry
Turner argues abstract structure physical structure linked agreement also intention take former normative governance latter
On account computation technical artifact whose function fixed abstract specification
This relationship neither theory physical object syntactic thing semantic interpretation
But ambiguity reflected debate argue semantic interpretation Sprevak argue Piccinini
Consider program
What function program
Is fixed semantic interpretation fixed specification
The ambiguity concern function program part programming language role part larger system
As program language fixed semantics language whole
However use program part larger system one need know
The function program part larger system given specification
When computation picked specification exactly program achieves specification irrelevant system designer
The specification act level abstraction employed system designer central
It follows said far correctness implemented program automatically establish computational artifact
Turing already distinguished
The former caused faulty implementation unable execute instruction language program
Errors conclusion characterize correct abstract machine nonetheless fail carry task supposed accomplish
This may happen case specification program correctly instantiating properly express user requirement program
In case machine implementing correct program still said miscompute
Turing distinction error functioning error conclusion expanded complete taxonomy miscomputations Fresco Primiero
The provided classification established basis many different level abstraction one may identify software development process
The functional specification level refers functional requirement computational artifact fulfill advanced user company software architect general stakeholder expressing constraint allowed behavior system realized
At design specification level requirement formally expressed term system design description detailing system state condition allowing transition among state
A design specification level specification turn instantiated proper algorithm usually using programming language algorithm design level
At algorithm implementation level algorithm implemented either software mean assembly language machine code instruction directly hardware latter case many special purpose machine
Finally algorithm execution level refers runtime execution
Errors
Conceptual error violate validity condition requiring consistency specification expressed propositional conjunctive normal form material error violate correctness requirement program respect set specification performable error arise physical constraint breached faulty implementing hardware
Performable error clearly emerge algorithm execution level correspond Turing error functioning also called
Conceptual material error may arise level abstraction functional specification level algorithm implementation level
Conceptual error engender material error induce
For instance mistake functional specification level consists inconsistent set requirement algorithm implementation level may correspond invalid hardware design choice logic gate connective
And failure occurring design specification level may due design deemed incomplete respect set functional requirement expressed functional specification level failure algorithm design level occurs frequent case program found fulfill specification
Beyond mistake failure operational malfunction source miscomputations algorithm implementation level
Slips may conceptual material error due respectively syntactic semantic flaw software implementation algorithm
Conceptual slip appear case syntactical rule programming language violated material slip involve violation semantic rule programming language variable used initialized
Abstract machine incapable error functioning
In sense truly say machine never make mistake
Errors conclusion arise meaning attached output signal machine
Turing On basis Turing remark distinction made technical artifact Floridi Fresco Primiero
Software misfunction ever dysfunction
An artifact token dysfunction able perform task designed artifact token misfunctions case able perform required task prone manifest undesired
Software development characterized level abstraction one find artifact production cycle
Typical artifact production involves functional specification level design specification level design technical artifact physically implemented
As seen software development also characterized algorithm implementation level designed algorithm instantiated language program hardware implementation
An artifact token dysfunction case physical implementation fails satisfy functional specification design specification
Dysfunctions apply single token since token dysfunction behave token type respect implemented function
For reason dysfunction apply functional specification level design specification level
On contrary artifact type token misfunction since misfunctions depend comparison token type able perform implemented function
Misfunction token usually depends dysfunction component misfunction type often due poor design
A software token dysfunction token given type implement function specified functional specification level design specification level way
This due fact function implemented algorithm implementation level performed algorithm execution level case correct implementation token behave correctly algorithm execution level provided operational malfunction occurs
For reason software token misfunction since equal implementation design specification algorithm implementation level
Only software type misfunction case poor design misfunctioning software type able correctly perform function may also produce undesired
Abstraction facilitates computer science
Without would progressed programming numerical algorithm software sophistication air traffic control system interactive proof development framework computer game
It manifested rich type structure contemporary programming specification language underpins design language mechanism abstraction
It driven invention notion polymorphism data abstraction class schema design pattern inheritance
But nature abstraction computer science
Is one form
Is notion find mathematics
Computer science abstraction take many different form
We shall attempt describe systematic way
However Goguen Goguen Burstall describes variety following example instance
One kind involves idea repeated code A program text possibly parameter given name
In Skemp term procedure brings new concept existence similarity structure common code
Formally abstraction lambda calculus see entry
The parameter might even type lead various mechanism polymorphism may formalized mathematical theory second order lambda calculus Hankin
Recursion early example operation mechanism abstraction It abstract away mechanism underlying machine
In turn facilitates solution complex problem without aware operation machine
For example recursion implemented device stack principle user recursion need know
The type structure programming specification language determines ontology language kind entity disposal representation problem solving
To large extent type determine level abstraction language
A rich set type constructor provides expressive system representation
Abstract recursive type common example
In design pattern Gamma et al
abstracted common structure found software system
Here abstraction mean interfacing It dissociates implementation object specification
For example abstract class act interface providing nothing type structure method
In addition mathematics Mitchelmore White computer science philosophy Floridi level abstraction
Abstractions mathematics piled upon search abstract concept
Likewise computer science deal design construction artifact complex process involving sequence artifact decreasing level abstractness one arrives actual physical device
In mathematics abstraction established physical device left behind
On account abstraction An abstract mathematical object take meaning system within defined
The constraint new object related consistent system operated without reference previous meaning
paramount
There leak
Some argue respect least abstraction computer science fundamentally different abstraction mathematics Colburn Shute
They claim computational abstraction must leave behind implementation trace
Information hidden destroyed
Any detail ignored one level abstraction programmer need worry precise location memory associated particular variable must ignored one lower level abstraction virtual machine handle memory allocation
At level computational artifact crucially depend upon existence implementation
For example even though class hide implementation detail method except abstract one must implementation
This keeping view computational artifact function structure Computational abstraction abstract guise implementation
However matter quite clean cut
While true abstraction mathematics generates object whose meaning defined relationship computer science
Abstract notion could normative function unless independent meaning
Moreover certain form resembles computer science implementation trace one must always able recover implementation information proof
Of course case classical mathematics
Moreover many would argue mathematical abstraction completely leave behind physical root
One aspect usefulness mathematics facility calculation made You need exchange coin calculate shopping bill simulate rocket journey without ever firing one
Increasingly powerful mathematical theory mention computer led steady gain efficiency reliability
But calculational facility would useless result predict reality
Predictions successful extent mathematical model appropriate aspect reality whether appropriate validated experience
Mitchelmore White How axiomatic method successful way
The answer large part axiom indeed capture meaningful correct pattern
There nothing prevent anyone writing arbitrary list postulate proceeding prove theorem
But chance theorem practical application slim indeed
Many fundamental mathematical object especially elementary one number operation clearly model reality
Later development combinatorics differential equation built fundamental idea also reflect reality even indirectly
Hence mathematics link back reality
Devlin If would appear difference abstraction computer science abstraction mathematics sharp
However appears important conceptual difference
If Turner right computer science abstract partner dominant one relationship It determines correctness
In case applied mathematics thing reversed The mathematics model world must model accurately
In computer science relationship abstraction source relationship mathematics one hand model theory hand reality
When thing go wrong blame laid different place artifact computer science model mathematics
The problem defining epistemological status computer science arose soon computer science became independent discipline distinct mathematics Tedre
Since clear computer science considered partially mathematical discipline partially scientific discipline partially engineering discipline insofar make use mathematical empirical engineering method Tedre Sutien
Nonetheless debate took place concerning whether computer science considered mathematical discipline branch engineering scientific discipline
Each epistemological characterization computer science based ontological methodological epistemological commitment assumption nature computational artifact method involved software development process kind reasoning thereby involved whether deductive inductive combination Eden
Holders mathematical nature computer science assume program mathematical entity one pursue purely deductive reasoning provided formal method theoretical computer science
As examined Dijkstra Hoare explicit stating program instruction acknowledged mathematical sentence formal semantics programming language given term axiomatic system Hoare
Provided program specification advanced formal language provided program code represented formal language formal semantics provide mean correctness
Accordingly knowledge behavior computational artifact acquired deductive reasoning involved mathematical proof correctness
The reason basis rationalist optimism Eden known computing system artifact system one predict behavior certainty Knuth
The original motivation mathematical analysis computation came mathematical logic
Its origin found Hilbert question concerning decidability predicate calculus Hilbert Ackermann could algorithm procedure deciding arbitrary sentence logic whether provable The
In order address question rigorous model informal concept effective mechanical method logic mathematics required
Providing first foremost mathematical endeavor one develop mathematical analogue informal notion
Although central concern theoretical computer science topic computability complexity covered existing entry
In growing complexity program increasing number application software system everyday context consequent booming market demand caused deviation interest computer scientist academic practitioner proof program correctness method managing complexity system evaluating reliability Wegner
Indeed providing formal specification modular program representing highly complex program formal language providing input system often embedded interacting user practically impossible
It turned providing mathematical proof correctness mostly unfeasible
Computer science research rather developed toward testing technique able provide statistical evaluation correctness often called reliability Littlewood Strigini term estimation distribution error program code
Computer science evaluates reliability computing system way civil engineering bridge aerospace engineering airplane DeMillo et al

In particular whereas empirical science examine exists computer science focus exist produce artifact therefore acknowledged engineering mathematics Hartmanis
Similarly whereas scientific inquiry involved discovering law concerning studied phenomenon one identify proper law computer science practice insofar latter rather involved phenomenon studied concerning computational artifact Brooks
Software testing reliability measuring technique nonetheless known incapability assuring absence code fault Dijkstra
In many case especially evaluation system controller airplane rocket nuclear plant etc
formal method empirical testing used evaluate correctness dependability computational artifact
Computer science accordingly understood scientific discipline make use deductive inductive probabilistic reasoning examine computational artifact Denning et al
Denning Tichy Colburn
Indeed examined verification testing method often jointly involved advancing hypothesis behavior implemented computing system providing evidence either algorithmically empirically support hypothesis
The thesis computer science methodological viewpoint par empirical science trace back Newell Perlis Simon letter Newell et al
dominated Wegner
In Turning award lecture Newell Simon argued Computer science empirical discipline
We would called experimental science like astronomy economics geology unique form observation experience fit narrow stereotype experimental method
Nonetheless experiment
Each new machine built experiment
Actually constructing machine pose question nature listen answer observing machine operation analyzing analytical measurement mean available
Newell Simon Since Newell Simon Turing award lecture clear computer science understood empirical science special sort related nature experiment computing
Indeed much current debate epistemological status computer science concern problem defining kind science Tedre particular nature experiment computer science Schiaffonati Verdicchio nature law theorem computing Hartmanis Rombach Seelish methodological relation computer science software engineering Gruner
Computer ethic analysis nature social impact computer technology corresponding formulation justification policy ethical use technology
Moor Computer ethic subfield information ethic concerning ethical social political issue arising widespread application information technology analysis computer ethic information ethic see entry
Computer ethic root Norbert Wiener book rapidly developed urgent prominent subfield applied ethic see Bynum overview computer ethic historical development
Interestingly Wiener book currently discussed topic computer ethic already put forward security responsibility programmer information network
Other issue include privacy social network software ownership mention
Computer ethic developed independent discipline distinct applied ethic philosophy computer science
In section two topic computer ethic analyzed since philosophy computer science provides rather different perspective
In particular ontology software system affect debate property right program methodology software development help clarifying distinguishing moral responsibility developer
One main ongoing debate computer ethic concern ethical social legal aspect software ownership deal problem whether programmer software company exert intellectual property right computational artifact ownership protected whether copyright patent whether extent copyright patent system allow reuse copying source code whether software free copyrighted
Three main argument advanced arguing property extended also intellectual entity restricted physical good Moore
The argument harks back Hegel Philosophy Right maintain product physical intellectual labor actualization laborer feeling character ability
Insofar feeling character ability owned laborer externalization intellectual product poem song computer program owned laborer Moore
Critics argument claim externalization author feeling ability transfer use right intellectual product property right intellectual product also protected modification may injury author reputation Hughes
The argument hold protecting computer program copyright patent system result increase innovation new product corresponding social utility Moore
Opponents approach intellectual property right challenge thesis copyrighting patenting software foster innovation production
First argue innovation directly supported governmental funding research project academic industry level mean reward model Shavell Ypersele
Secondly software copyright patent often allow monopoly company impedes rather foster innovation order keep monopoly
Most debate concerning intellectually property right software focus John Locke argument property provided Second Treatise Government Locke see also entry
Locke famously argued state nature natural good common mixing common good one labor one could claim ownership good
Locke philosophy basis liberalist tradition western country
One main difference material intellectual object latter duplicated especially software
Some philosopher argue Locke argument justify intellectual property right software others maintain contrary Locke philosophy rather support view
In Locke philosophy ownership material good justified though labor enough good left others Locke section owner benefit acquisition loss others Moore
Possession intellectual entity exclusive material one An intellectual object mathematical function program specification owned many people time whereas one owns car car owned one neighbor
Accordingly possession say language program constitute loss others Locke proviso enough good left others always satisfied
On hand according Locke ownership material good justifiable material entity finite feasible anybody posse whatever would like Kimppa
However intellectual object shared many people concurrently without deprivation Kinsella
Locke argument property coherent Free Software Foundation view software copyright software sold purchased buyer owns software whatever want including giving free copy modifying see Free Software Foundation
Indeed software intellectual good shared without loss owner
Problems arise reasoning software property protection either copyright patent law
In United States legislation protects author original work realm literature music drama visual art architectural work written depicted sculptured built etc
Copyright confers author receive permission former right duplicate reproduce perform sell share copy create work based upon protected original work
Ideas theory procedure method excluded copyright protection
safeguard inventor prohibiting others selling using producing invention
In particular utility patent include protection process machine manufacture design patent cover new original design manufacture plant patent concern production new variety plant
Copyrights give author right copy given Whereas idea copyrightable idea expressed text
According copyright appropriate tool protect software ownership Mooers
Whereas algorithm abstract mathematical idea copyrighted language program textual expression algorithm copyrighted
It objected claim simplistic take consideration proper ontology software Rapaport see
Indeed computational artifact examined many level abstraction hierarchy layer implementation layer one find upper hierarchy
The main problem understanding copyrightable whether function algorithm program machine implementation program
For instance algorithm considered expression function implement consequently copyrightable
Another difficulty concern copyright infringement
If program considered protected expression algorithm copyright infringement occurs case similar program code
However consider case two program behaviorally equivalent similar obtained implementing different program instantiating different algorithm
According Mooers approach software copyright infringement ascribed case Rapaport chapter see
Similar problem arise patent
Allen Newell opposed software patent available model computation inadequate defining patentable
He argued algorithm patentable reason mathematical statement physical law
Only process computing machine carrying process patentable
However degree abstraction hierarchy defining given artifact always allow algorithm distinguished program implementation This instance case algorithm directly executable machine
Computer science considered discipline Gotterbarn
When miscomputations displayed computational artifact interacting within environment developer often blame client able supply developer adequate specification appeal fact software testing assure absence error generally blame program complexity
In case computing practitioner accept responsibility
In fail recognize process developing software instantiating specification implementing program additionally providing service society
A distinction made Ladd
Negative responsibility avoids blame legal responsibility characterizes software developer pursue development artifact without considering potential effect influence artifact society
By contrast positive responsibility considers consequence developed machine may among user
A correct computing system may still harmful undesired behavior inhibited set specification provided client positive responsible programmer feel obliged retreat specification client case aware deficiency
Liability adequate regulate moral behavior computing practitioner Edgar ch

Indeed blaming someone breaking law requires causality condition condition intention
The causality condition involves identifying person caused illegal event murderer pulled trigger condition intention demand ascertaining intention person whether person pulled trigger intended kill victim
It difficult satisfy condition computing
No single person blamed causing computing artifact miscompute harm people
It follows definition miscomputation many people involved causal chain brings harmful miscomputation including client designer programmer engineer
It also difficult identify anyone among intended develop harmful artifact
In particular practitioner develops system subsequently used evil intention practitioner legally blamed however may responsible aware evil potentiality artifact
Moral responsibility computing professional include responsibility different group people Loui Miller
Responsibilities require implementing artifact correct reliable also used undesirable effect user
Responsibilities require taking advantage personal political secret information employer may share computing professional assigning given task
Responsibilities include fulfillment professional standard working team well respect colleague work
Finally responsibility require computational artifact aimed society construction potentially dangerous artifact affecting public welfare impeded professional even required employer like required encode program gain private information data system
These moral responsibility computing professional codified one software engineering code ethic
For instance Software Engineering Code Ethics Professional Practice see developed ACM IEEE Computer Society indicates eight principle clause expressing fulfill principle concrete situation Gotterbarn Miller Rogerson Applying code ethic straightforward may concrete situation one may find principle trade Gotterbarn Miller
Common case include time needed test given artifact assure error absence conflict client employer pressure satisfy market timing delicate case client employer request given computing system implemented conflict public safety health welfare
The eight principle listed according priority hierarchy code case provide guideline solve conflict among competing moral principle
In particular Public top list mean computing practitioner morally committed always refuse client employer request realize artifact may go public interest Gotterbarn Miller
A final issue worth mentioning approach Nissenbaum
Computational artifact fulfill moral value together common functional requirement
Beside correctness reliability safety computing system instantiate moral value including justice autonomy liberty trust privacy security friendship freedom comfort equality
For instance system satisfying equality biased program artifact certain individual group individual favor others instance flight reservation system list flight company alphabetic order shown favor company top list Friedman Nissenbaum
Whereas everybody would agree computing artifact satisfy moral value value design approach hold value treated par functional requirement software development Flanagan Howe Nissenbaum
This requires identifying set moral value given artifact fulfill taking consideration context artifact going used ii define value could formalized design specification subsequently implemented iii verifying whether implemented artifact fulfill fulfill specified value using common software testing technique particular internal testing among developer user testing restricted environment using prototype interview survey
We concentrated philosophical concern core discipline computer science
We said little nothing actual application subject application many would argue give discipline potency
Applications include technological one system run nuclear power station guide missile target scientific one involved computational biology
However matter useful impressive application specialized goal
Presumably goal computational biology biological cognitive science psychological
In contrast core philosophy computer science goal particular application
It concerned generic activity programming computer
However one application central often taken part core subject artificial intelligence
In contributed much development core including design programming language Lisp Prolog
Moreover raise many philosophical concern strong connection philosophy mind cognitive science
Indeed philosophical concern artificial intelligence much older pedigree Copeland Fetzer
There much material include entry devoted generic activity discipline
Fortunately already entry devoted role subject subject future entry philosophy artificial intelligence
View site another server The Stanford Encyclopedia Philosophy Center Study Language Information CSLI Stanford University Library Congress Catalog Data ISSN

