A computer program performs translation program written given program another computer language target language without losing functional logical structure original code essence program
These include translation computer language language similar level language different well
The term also used translator software implementation implementation program software description microchip needed build
Examples widely used type computer language translator include

There many programming language
To execute compiled interpreted
An IDE integrated development environment used write code test error translate program
Translators usually included within programming convert
Translators
assembler translates assembly language machine code
language written mnemonic closely reflects operation
An interpreter CPU instruction interpreter move translate next instruction
Interpreted code show error soon hit problem easier code
An interpreter create independent final set source code created time run
Interpreted code slower execute compiled code
Interpreted language include JavaScript PHP Python Ruby
Interpreted language also called language
These ideal using within web application
They used coding small program executed within
A compiler
It difficult test individual line compiled code compared interpreted language reported program compiled
The saved stored separately code
Compilation slow machine code executed quickly
Java compiled programming language
Java programming language compiled produce interpreted
Bytecode code compiled interpreted
You need JavaScript enabled play audio clip
Jackson Gabbard explains Facebook us compiler Sign choose GCSE subject see content tailored

Used Occasionally
computer science one commonly used word Collins dictionary View usage

The different type computer translator interpreter compiler standard compiler decompilers assembler disassemblers
Interpreters translate programming language intermediate code immediately executed
compiler translate computer language another computer language
Standard compiler translate computer language language
Decompilers translate machine code source code readable programming language
Assemblers translate assembly language machine code
Disassemblers translate machine code assembly language

WordReference Dictionary Forum discussion word computer science title In language

follow The report also name administrator one targeted directory German student named Sebastian Hahn
He leveraged earlier experience knocked degree park graduating high honor
One great irony mathematical science Omohundro said
He hope go Stanford major juggle homework online vigilante persona
The site run student Bordeaux us official Elys√©e Palace photograph
Each girl college degree ranging Russian
Fekri Gassar young lookalike funeral degree
In engineering earlier gain appear stalled even shifted reverse
They fruit set parallel separate innovation Google quickly putting work
He returned Poland pursued master degree Institute

In directly
instruction written without requiring previously program
An interpreter generally us one following strategy program execution Early version would example first type
example second example third type
Source program compiled ahead time stored machine independent code executed interpreter compiler system
Some system contemporary version may also combine two three
Interpreters various type also constructed many language traditionally associated compilation Algol Fortran Cobol
While interpretation compilation two main mean programming language implemented mutually exclusive interpreting system also perform translation work like compiler
The term signify canonical implementation language interpreter compiler respectively
A ideally independent particular implementation
The first interpreted language
Lisp first implemented computer
Russell read paper realized McCarthy surprise Lisp function could implemented machine code
The result working Lisp interpreter could used run Lisp program properly evaluate Lisp expression
Programs written either directly executed kind interpreter converted compiler execute
While compiler assembler generally produce machine code directly executable computer hardware often optionally produce intermediate form called
This basically machine specific code augmented symbol table name tag make executable block module identifiable relocatable
Compiled program typically use building block function kept library object code module
A used combine library file object file application form single executable file
The object file used generate executable file thus often produced different time sometimes even different language capable generating object format
A simple interpreter written low level language
may similar machine code block implementing function high level language stored executed function entry look table point code
However interpreter written high level language typically us another approach generating walking generating executing intermediate instruction
Thus compiler interpreter generally turn source code text file token may may generate parse tree may generate immediate instruction mean
The basic difference compiler system including built separate linker generates program interpreter system instead action described high level program
A compiler thus make almost conversion source code semantics machine level
program changed interpreter conversion work every time statement function executed
However efficient interpreter much translation work including analysis type similar factored done first time program module function even statement run thus quite akin compiler work
However compiled program still run much faster circumstance part compiler designed optimize code may given ample time
This especially true simpler high level language without many dynamic data structure check
In traditional compilation executable output linkers file file library see picture typically relocatable run general operating system much like object code module difference relocation done dynamically run time
program loaded execution
On hand compiled linked program small typically statically allocated often hard coded memory often secondary storage operating system sense
Historically editor built
This becoming common also compiler often called although programmer prefer use editor choice run compiler linker tool manually
Historically compiler predate interpreter hardware time could support interpreter interpreted code typical batch environment time limited advantage interpretation
During programmer make frequent change source code
When using compiler time change made source code must wait compiler translate altered source file binary code file together program executed
The larger program longer wait
By contrast programmer using interpreter lot le waiting interpreter usually need translate code worked intermediate representation translate thus requiring much le time change tested
Effects evident upon saving source code reloading program
Compiled code generally le readily debugged editing compiling linking sequential process conducted proper sequence proper set command
For reason many compiler also executive aid known file program
The Make file list compiler linker command line program source code file might take simple command line menu input
Make selects third group set instruction issue command compiler linker feeding specified source code file
A convert source code binary instruction specific processor architecture thus making le portable
This conversion made developer environment binary distributed user machine executed without translation
A generate binary code user machine even different processor machine code compiled
An interpreted program distributed source code
It need translated final machine take time make program distribution independent machine architecture
However portability interpreted source code dependent target machine actually suitable interpreter
If interpreter need supplied along source overall installation process complex delivery monolithic executable since interpreter part need installed
The fact interpreted code easily read copied human concern point view
However various system exist
Delivery intermediate code bytecode similar effect obfuscation bytecode could decoded
The main disadvantage interpreter interpreted program typically run slower
The difference speed could tiny great often order magnitude sometimes
It generally take longer run program interpreter run compiled code take le time interpret total time required compile run
This especially important prototyping testing code cycle often much shorter cycle
Interpreting code slower running compiled code interpreter must analyze program time executed perform desired action whereas compiled code performs action within fixed context determined compilation
This analysis known interpretive overhead
Access variable also slower interpreter mapping identifier storage location must done repeatedly rather
There various compromise using interpreter execution speed using compiler
Some system allow interpreted compiled code call share variable
This mean routine tested debugged interpreter compiled thus benefit faster execution routine developed
Many interpreter execute source code stand convert compact internal form
Many interpreter replace single used find instruction
A interpreter interpreter achieve even higher level program compaction using rather program memory structure command token occupy perhaps bit nominally constant stored requiring bit address operand include bit offset
Many BASIC interpreter store read back tokenized internal representation
An interpreter might well use compiler interpret resulting
Example data type definition latter toy interpreter syntax tree obtained C expression shown box
Interpretation used sole method execution even though interpreter interpreted directly executed program needed somewhere bottom stack code interpreted definition machine code CPU execute
There spectrum possibility interpreting compiling depending amount analysis performed program executed
For example compiled highly compressed optimized representation Lisp source machine code therefore tied particular hardware
This compiled code interpreted bytecode interpreter written
The compiled code case machine code implemented hardware bytecode interpreter
Such compiling interpreter sometimes also called
In bytecode interpreter instruction start byte therefore bytecode interpreter instruction although may used
Some bytecodes may take multiple byte may arbitrarily complicated
necessarily ever need pas compiling phase dictate appropriate algorithmic via customized interpreter similar fashion bytecode interpreter
Threaded code interpreter similar bytecode interpreter instead byte use pointer
Each instruction word point function instruction sequence possibly followed parameter
The threaded code interpreter either loop fetching instruction calling function point fetch first instruction jump every instruction sequence end fetch jump next instruction
Unlike bytecode effective limit number different instruction available memory address space
The classic example threaded code code used system source language compiled F code bytecode interpreted
In spectrum interpreting compiling another approach transform source code optimized abstract syntax tree AST execute program following tree structure use generate native code
In approach sentence need parsed
As advantage bytecode AST keep global program structure relation statement lost bytecode representation compressed provides compact representation
Thus using AST proposed better intermediate format compiler bytecode
Also allows system perform better analysis runtime
However interpreter AST cause overhead bytecode interpreter node related syntax performing useful work le sequential representation requiring traversal pointer overhead visiting tree
Further blurring distinction interpreter bytecode interpreter compilation compilation JIT technique intermediate representation compiled native runtime
This confers efficiency running native code cost startup time increased memory use bytecode AST first compiled
complementary technique interpreter profile running program compiles frequently executed part native code
Both technique decade old appearing language
compilation gained mainstream attention amongst language implementers recent year modern implementation including JITs
A interpreter written programming language interpret example interpreter written BASIC
related
If exists language interpreted creating requires implementation language host language may another programming language
By first interpreter system new version interpreter developed language
It way developed TANGLE interpreter language industrial standard
Defining computer language usually done relation abstract machine mathematical function
A language may also defined interpreter semantics host language given
The definition language define language tell reader expressiveness elegance language
It also enables interpreter interpret source code first step towards reflective interpreting
An important design dimension implementation whether feature interpreted language implemented feature interpreter host language
An example whether language implemented using closure interpreter language implemented manually data structure explicitly storing environment
The feature implemented feature host language le control programmer interpreter different behavior dealing number overflow realized arithmetic operation delegated corresponding operation host language
Some language elegant
Much research particularly reflective interpreter conducted dialect Lisp
In general however language allows writing interpreter
Lisp language Lisp program list symbol list
XSLT language XSLT program written XML
A writing DSLs
Clive Gifford introduced measure quality eigenratio limit ratio computer time spent running stack time spent run stack go infinity
This value depend program run
The book present example Scheme dialect
Other example language
Microcode commonly used technique imposes interpreter hardware architectural level computer
As microcode layer instruction implement instruction internal sequencing many element
Microcode used well specialized processor hardware
Microcode typically resides special memory translates machine instruction data input sequence detailed operation
It separate machine instruction underlying instruction designed altered freely
It also facilitates building complex instruction reducing complexity computer circuit
Writing microcode often called microcode particular processor implementation sometimes called
More extensive microcoding allows small simple powerful architecture wider relatively simple way achieve software compatibility different product processor family

Earn industry credential earn degree
As nonprofit university WGU put student first
Earn degree half cost online university
Western Governors University
All Rights Reserved WGU Indiana accredited online university offering online bachelor master degree program

You still full access site functionality may lost
For best experience upgrade browser following link

