In enables program indirectly access particular value
The reference said datum accessing datum called reference
A reference distinct datum
Typically reference data stored memory given system reference implemented data stored memory storage device
For reason reference often erroneously confused said point data
However reference may also implemented way offset difference datum address fixed base address abstractly
More broadly networking reference may address
The concept reference must confused value uniquely identify data item give access operation
References widely used especially efficiently pas large mutable data share data among various us
In particular reference may point variable record contains reference data
This idea basis many
References cause significant complexity program partially due possibility partially data reference whose analysis quite complicated
References increase flexibility object stored allocated passed area code
As long one access reference data one access data data need moved
They also make sharing data different code area easier keep reference
The mechanism reference varying implementation fundamental programming language feature common nearly modern programming language
Even language support direct use reference internal implicit use
For example calling convention implemented either explicit implicit use reference
primitive
Due intimate relationship underlying hardware one powerful efficient type reference
However also due relationship pointer require strong understanding programmer detail memory architecture
Because pointer store memory location address instead value directly inappropriate use pointer lead program particularly due
act like pointer accessed particular method
A abstract reference may represented various way
A common example FILE data structure used abstract file content
It usually represents file requesting file specific position within file content reading file
In reference may contain address identifier may also include embedded specification network protocol used locate access referenced object way information encoded serialized
Thus example description remote web service viewed form reference includes complete specification locate bind particular
A reference another example complete specification construct small software component called subsequently engage interaction local machine may gain access data replicated exists weakly consistent message stream
In case reference includes full set instruction recipe access data sense serf purpose identifier address memory
More generally reference considered piece data allows unique retrieval another piece data
This includes key
If set key set data object function defines type reference image key referring anything meaningful
An alternative representation function directed graph called
Here datum represented vertex edge datum refers datum
The maximum one
These graph valuable used separate accessible
In many data structure large complex object composed smaller object
These object typically stored one two way Internal storage usually efficient space cost reference metadata time cost associated dereferencing reference allocating memory smaller object
Internal storage also enhances keeping different part large object close together memory
However variety situation external storage preferred Some language support internal storage
In language object uniformly accessed reference
In first language used typical express reference using either raw memory address index table
These work somewhat tricky use address tell nothing value point even large interpret information encoded program logic
The result misinterpretation occur incorrect program causing bewildering error
One earliest opaque reference language simply containing two reference Lisp object including possibly con cell
This simple structure commonly used build singly also used build simple dotted list terminate null reference value
Another early language Fortran explicit representation reference use implicitly calling semantics
The still one popular type reference today
It similar assembly representation raw address except carry static used ensure data refers misinterpreted
However C violated using explicit conversion various pointer type pointer type integer misinterpretation still possible difficult
Its successor tried increase pointer new cast operator smart pointer still retained ability circumvent safety mechanism compatibility
A number popular mainstream language today adopted much opaque type reference usually referred simply
These reference type like C pointer indicating interpret data reference typesafe interpreted raw address unsafe conversion permitted
A reference best thought another object scalar variable row column array
There syntax dereference reference manipulate content referent directly
Fortran reference null
As language reference facilitate processing dynamic structure linked list queue tree
In setting concept data modified often make implicit use reference
In many functional language value persistent modified assignment
Assignable reference cell serve unavoidable purpose mutable reference imperative language make capability modified explicit
Such reference cell hold value given type replaced type value pointed
These mutable reference pointed different object lifetime
For example permit building circular data structure
The reference cell functionally equivalent array length
To preserve safety efficient implementation reference ML pointer arithmetic performed
It important note functional paradigm many structure would represented using pointer language like C represented using facility powerful mechanism
The programmer able enjoy certain property guarantee immutability programming even though compiler often us machine pointer hood
Some language like support string value contain name variable
When value regular reference dereferenced Perl considers symbolic reference give variable name given value
similar feature form syntax
Many object oriented language make extensive use reference
They may use reference access object
References also used call message passing frequently used perform unused object

Stack Exchange network consists Q A community including largest trusted online community developer learn share knowledge build career
From Googling appears call similar call reference change value caller different change take place callee exit variable passed one argument treated separate value callee instead value call reference
Neither fact help explain call produce different output call reference following code Edit understanding thing The insight CBR line point thing assigning update
But CBVR point different thing line update remains
Then CBR update right away end outside
But CBVR update whatever end even though line exit changed
An addendum want simulate call Pascal another language support call reference use trick A simple method visualize happening inserting procedure point called CALL BY REFERENCE CALL BY I familiar Pascal scoping issue
The line modifies global variable
When pas reference line also modifies global
When pas value line modify global line still using local value global
If using debugger actually step code like instructive
Using analogy
On call value loaded function box
It receives value
Here box
In case get box
Instead tell box work In case box called
As see one box two name
I lied initially
A variable box name one
By posting answer agree
asked viewed active site design logo Stack Exchange Inc user contribution licensed

Stack Exchange network consists Q A community including largest trusted online community developer learn share knowledge build career
Does semantics remote procedure call RPC real use case
Why RPC exist
Is useful anything
Is scenario ca job
In simple sentence Do need call reference RPC protocol
yes Why
Background implemented RPC
For instance one implementation strategy copy restore value copied client server make call copied back afterwards
There way implement well
The able modify argument
FORTRAN used always used mathematically clean hard implement surprising corner case Pascal distinguishes get variable
But surprise introducing aliasing variable
Thus Ada offer
If caller callee reside different machine performance gain copying argument using pointer lost
Even worse quite inefficient need copy back forth time something change
If defining I ditch fight user tooth nail keep
By posting answer agree
asked viewed active site design logo Stack Exchange Inc user contribution licensed

When function called parameter passed two way value actual parameter given corresponding formal parameter
The change made formal parameter function executes reflected corresponding actual parameter
In program value given
After execution becomes remains
address actual parameter given corresponding formal parameter formal parameter pointer
The change made formal parameter function execution reflected corresponding actual parameter
In program address sum given change made directly reflecting sum therefore share memory location
Series Innovations solution learning technical stuff online
It online portal give enhanced way learning guidance various field engineering include robotics electronics communication computer science embedded system real life application

When writing software code spend lot time defining reading changing variable
Using variable mean use descriptive word code hold information number text object etc
This descriptive word title stored information
For example Variables give comfort know data stored computer memory
You define variable make calculation pas variable one function another operating system automatically deal data physically located
However sometimes useful know happens behind variable
Especially language example Assembler C circumstance sometimes even necessary know value stored memory
This article explain variable passed around function specifically explains work Java
In Java slight important difference passing value passing reference
The term passing variable used function called variable defined previously
Let look following example The variable passed function
The function use variable example There two possibility could passed variable function
The term pas value pas reference used describe variable passed
To make short pas value mean actual value passed
Pass reference mean number called address passed defines value stored
A basic knowledge memory work variable stored memory help better understand topic
Since actual physical memory hard draw different memory type look different hard disc RAM example useful abstract simple way imagine memory look like
To make simple let think memory many block next
Each block number memory address
If define variable code value variable stored somewhere memory operating system automatically decide best storage place
The illustration right show part memory
The gray number top block show address block memory colored number bottom show value stored memory
Taking previous example variable defined code stored memory shown illustration right
As example value stored address value stored address
Passing value mean value function parameter copied another location memory accessing modifying variable within function copy original value left untouched
Passing value value passed time
The following example show variable passed value As soon software start processing function value copied somewhere else computer memory
To make clear variable within function named example
Everything happening affect value outside function scope
When passing variable value way update source variable using returning value function
This mean one value changed outside function
A simple function demonstration In code source variable updated return value function
The variable hold value see illustration right
Passing reference mean memory address variable pointer memory location passed function
This unlike passing value value variable passed
In example memory address
When passing function variable used within function example still point memory address original variable Hint symbol front function parameter used many programming language get variable
When calling function value changed directly reference
The value
With passing reference possible change one variable given function parameter
In addition one variable returned function return value often status important variable
For example The symbol return address variable symbol return stored address value reversing symbol To make decision whether use pas reference pas value two simple general rule Pass reference often avoided using array structure object language
Java programming language
This mean normal circumstance worry happens memory previous topic essential Java programming useful general understanding
Mainly primitive like int double etc
always passed value operator Java get address
Furthermore variable often packed object object variable passed around
Regarding topic variable passing Java one simple statement Java ALWAYS pass value
If assign value object parameter variable within method variable outside method still value object
Here simple example test When running code object data output time even though variable modified within method
This simple test show variable passed value reference
It show variable must different location memory value changed value source variable stay unchanged
A false argument used often explain Java pas reference object modified within method example This however change object property value variable
The value variable stay
To explore subject object variable must looked detail
An object variable would something like The applies object like Strings example
The detail variable hold object variable pointer object
For example shown illustration right using single memory block simplicity value
This confusing calling method like number passed method look like pas reference
However stored variable passed pointer value stored memory
An implementation example On first line passed variable object object name changed
Then new object object assigned variable color change clarity following line new object name set
The variable still name
This brings another statement addition earlier statement In Java object reference pointer passed value This close topic variable passing Java
When working pointer abstract thinking often needed understand program logic surprising thing happen modifying pointer instead value
This higher level programming language try hide complexity let focus thing
All Rights Reserved

µµµµ obj endobj obj endobj obj R endobj obj stream
ÇdK çÿý IÂ Ý Z b Ó à WHüG j ò TKÌ nÛQ q M ËÊçÊuÍüÒ ØäõÒ ë Ä áåÁ ûRíf ü g äeäåh
R R ÿ àÞÉâØ
ßqÑ aÃa ÿåáçìÿ
èOS üXåÇý v endstream endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj R endobj obj endobj obj endobj obj endobj obj R endobj obj stream
AäE òß ÿ ú ò FÍ
ËÉhV pKØ É Y õÉ N æØÆôûÕÐÉnwË LîÒßåxØÀÏò u F ü k ÙoÄìÁWßßbÜ Êpñ c ÈÅ Ý endstream endobj obj endobj obj R endobj obj stream E ü Læ þ îü
èI
Á ÔÌ èêß V v ø pà ûï ü é ïÀíx òwþkS î ØoÑZnÑ þ ë Vwar endstream endobj obj endobj obj R endobj obj stream Éd Y Ì ÖÉ
Ïä èÁÕ wl ÐK ÂîSs
Èe ÛZ fd ê YD nª c ïï ççÍTÖ Q

Let friend Comment Join DZone community get full member experience
A introduction framework container
Brought partnership
Uglier Windows backslash odder common PHP unfortunate CORS disappointing Java generic inconsistent XMLHttpRequest confusing C preprocessor flakier MongoDB regrettable worst mistake computer science introduced I call At time I designing first comprehensive type system reference language
My goal ensure use reference absolutely safe checking performed automatically compiler
But I resist temptation put null reference simply easy implement
This led innumerable error vulnerability system crash probably caused billion dollar pain damage last forty year
Tony Hoare inventor ALGOL In commemoration anniversary Sir Hoare null article explains null terrible avoid
The short answer NULL value value
And problem
It festered popular language time known many name NULL nil null None Nothing Nil nullptr
Each language nuance
Some problem caused NULL apply particular language others universal simply different facet single issue
Statically typed language check us type program without actually executing providing certain guarantee program behavior
For example Java I write compiler inspect type x
If known type check succeeds known type check fails
Static type checking powerful aid writing large complex software
But Java wonderful check suffer fatal flaw reference null calling method null produce
Thus Java culprit many type system flaw including course AGOL In languges NULL type check
It slip silently waiting runtime finally burst free shower error
NULL nothing simultaneously everything
There many time make sense null
Unfortunately language permit anything null well anything null
Java programmer risk carpal tunnel writing It common idiom C add Abhorrent
Every time write code conflates null string empty string Guava team weeps
Well said
But type system
Java C allows NULL everywhere reliably exclude possibility NULL nearly inevitable wind conflated somewhere
The ubiquitous possibility null posed problem Java added annotation try retroactively fix flaw type system
Given NULL function value value NULL naturally becomes subject various form special treatment
For example consider myChar meaning
memory
The compiler verifies
Therefore following invalid Since guaranteed address compilation fails
However change number NULL compiler pass As NULL actually address
Yet time compiler permit NULL special case
Yet another special case happens C string
This bit different example pointer reference
But idea value value still present form char char
A sequence byte whose end marked NUL byte
Thus character possible byte except NUL character
Not make string length operation even worse mean used ASCII extended ASCII
Instead used unusual ASCIIZ
This exception singular NUL character caused innumerable error API weirdness security vulnerability buffer overflow
NULL worst CS mistake specifically string
For next example journey land language NULL prove terrible mistake
Suppose create Ruby class act store
This may cache interface database etc
We make API simple We imagine analog many language Python JavaScript Java C etc
Now suppose program slow way finding someone phone contacting web service
To improve performance use local cache mapping person name phone number
However people phone number
phone number nil
We still cache information repopulate later
But meaning result ambiguous
It could mean One circumstance requires expensive recomputation instantaneous answer
But code insufficiently sophisticated distinguish two
In real code situation like come frequently complex subtle way
Thus simple generic APIs suddenly become confusing source sloppy nullish behavior
Patching Store class method might help
But introduces redundant lookup causing reduced performance race condition
JavaScript issue
If property object exist JS return value indicate absence
The designer JavaScript could chosen value
But instead worried case property exists set value In stroke ungenius JavaScript added distinguish null property one
But property exists set value
Oddly JavaScript stop
Thus JavaScript wound one form NULL
Java silently convert reference primitive type
Add null thing get even weirder
For example compile This compile though throw NullPointerException run
It bad enough member method called null even worse never even see method called
great example troublesome NULL
Calling member function NULL pointer necessarily crash program
It much worse crash program
When I compile gcc first call succeeds second call fails
Why
known compiler avoids runtime vtable lookup transforms static call like first argument
Since dereference NULL pointer succeeds
But cause segmentation fault
But suppose instead made virtual
This mean implementation may overridden subclass
As virtual function vtable lookup runtime type case bar overridden
Since NULL program crash instead made function virtual
NULL made debugging code extraordinarily difficult unintuitive programmer
Granted dereferencing NULL undefined standard technically surprised happened
Still common simple example one many way NULL capricious practice
Programming language built around composability ability apply one abstraction another abstraction
This perhaps single important feature language library framework paradigm API design pattern ability used orthogonally feature
In fact composibility really fundamental issue behind many problem
For example API returning value composable storing phone number
C address problem NULL
You include optionality nullability type
But suffers critical flaw apply It apply For example make problem better
NULL become pervasive many assume necessary
We long many language seems essential like integer arithmetic
Not
You entire programming language without NULL
The problem NULL value sentinel special case lumped everything else
Instead need entity contains information whether contains value contained value exists
And able contain type
This idea Haskell Maybe Java Optional Swift Optional etc
For example Scala hold value type hold value
These two subtypes may may hold value
The reader unfamiliar may think substituted one form absence NULL another form absence None
But difference subtle crucially important
In statically typed language bypass type system substituting None value
A None used expected Option
Optionality explicitly represented type
And dynamically typed language confuse usage contained value
Let revisit earlier time using
The class return Some value exists None
And phone number Some phone number None phone number
Thus outer Maybe indicates presence Store inner Maybe indicates presence phone number name
We successfully composed Maybes something could nil
The essential difference nonsensical union present value absence
Let continue example code
Suppose Java integer may may exist exist print
This good
But implementation including Java support even better functional approach Not functional way succinct also little safer
Remember produce error value present
In earlier example guarded
In example obviates need
It make obviously bug rather obvious bug
Options thought collection max size
For example double value exists leave empty otherwise
We optionally perform operation return optional value flatten result
We provide default value none exists In summary real value NULL terrible design flaw one continues cause constant immeasurable pain
Only language managed avoid terror
If choose language NULL least posse wisdom avoid awfulness code use equivalent
NULL common language Language NULL Maybe NULL Score C NULL NULL boost C null Clojure nil Common Lisp nil maybe F null Go nil Groovy null Haskell Maybe Java null JavaScript ECMAScript null undefined Maybe npm maybe Objective C nil Nil NULL NSNull Maybe SVMaybe OCaml option Perl undef PHP NULL Maybe Python None Maybe PyMonad Ruby nil Maybe Rust Option Scala null Standard ML option Swift Optional Visual Basic Nothing Scores according Does NULL
Has NULL
Has alternative language standard library
Has NULL
Has alternative community library
Has NULL
Programmer worst nightmare
Multiple NULLs
Don take rating seriously
The real point summarize state NULL various language show alternative NULL rank language generally
The info language corrected
Some language sort null pointer compatibility reason runtimes really usable language
It deserves mention special value size like NULL useful cutting CPU cycle trading code quality performance
This handy language like C really matter really left
The general issue NULL sentinel value value treated others entirely different semantics
Returning either integer index integer good example
string another
This post focus mostly NULL given ubiquity effect Sauron mere servent Morgoth NULL mere manifestation underlying problem sentinel
Asynchronous Application Design
Brought partnership
Free DZone Refcard Comment Published DZone permission Paul Draper
Opinions expressed DZone contributor


learn share knowledge build career
What difference Could give example please
When parameter caller callee parameter
If callee modifies parameter variable effect visible caller variable
When parameter caller callee value
If callee modifies parameter variable effect visible caller
value question mutable object otherwise indirectly reference value environment callee modifies object value pointed object modification visible caller
But emulation exactly since modification visible
This lead contorted explanation like call value value reference
This somewhat confusing state affair many popular programming language work today therefore people often confuse passing mutable object value
For explanation see answer
For long time answer used say Say I want share web page
If I tell URL passing reference
You use URL see web page I see
If page changed see change
If delete URL destroying reference page deleting actual page
If I print page give printout I passing value
Your page disconnected copy original
You wo see subsequent change change make
scribbling printout show original page
If destroy printout actually destroyed copy object original web page remains intact
It simple analogy easy understand got post hundred upvotes
However analogy flawed like URLs
A language like C like URL see detail
But thing
Since analogy actually correct removed answer
See also comment discussed
It way pas argument function
Passing reference mean called function parameter caller passed argument value identity variable
Pass value mean called function parameter copy caller passed argument
The value identity variable different
Thus change parameter done called function one case change argument passed case change value parameter called function copy
In quick hurry Codes Since language use And example Java wo hurt Wikipedia This guy pretty much nail Here example Many answer particular highly upvoted answer factually incorrect since misunderstand call reference really mean
Here attempt set matter straight
In simplest term In metaphoric term Note concept completely independent orthogonal concept Java type subtypes C type concept like C semantically equivalent Java reference type simply different syntax
The notion corresponds URL piece information information
You many copy URL different place change website link website updated every URL copy still lead updated information
Conversely changing URL one place wo affect written copy URL
Note notion reference
like Java C reference type like call reference
Java C reference type type Python like C call pointer type

OK longer formal explanation
To start I want highlight important bit terminology help clarify answer ensure referring idea using word
In practice I believe vast majority confusion topic stem using word way fully communicate meaning intended
To start example language function declaration And example calling function Using example I want define important bit terminology There two important set concept distinguish
The first versus The important pair concept distinguish versus In function formal parameter variable newly created function invocation initialized argument
This work exactly way kind variable initialized value
For example Here completely independent variable value change independently
However point declared initialized hold value hold
Since independent variable change affect This exactly relationship example I repeat symmetry It exactly written code way That defining characteristic mean callee case receives argument separate value variable caller case
Going back metaphor I I call I hand piece paper written
You call piece paper
That value value I written notebook local variable variable I call
As aside depending hardware operating system various call one function another
The calling convention like u deciding whether I write value piece paper hand piece paper I write I write wall front u
This interesting subject well far beyond scope already long answer
In function formal parameter simply variable caller supply argument
Going back example equivalent Since another name change reflected
This fundamental way call reference differs call value
Very language support call reference like In case actually different name observe incremented
Note Java JavaScript C Python nearly popular language today work
This mean language call reference call value
If actual value value interesting
C integer size interesting value
If reference type pointer point interesting effect possible modify value caller observe change value even though caller observe change pointer
To borrow analogy URL fact I gave URL website particularly interesting thing care website URL
The fact scribbling copy URL affect copy URL thing care fact language like Java Python URL reference type value ca modified thing pointed
Barbara Liskov invented CLU programming language semantics realized existing term call value call reference particularly useful describing semantics new language
So invented new term
When discussing language technically call value common type use reference pointer type nearly every modern imperative programming language I find lot le confusing simply avoid talking
Stick simply nobody confused
Before understanding term understand following
Every object thing make distinguished
So say know thing
Its value also location memory hexadecimal number maybe like
Depending language architecture class struct etc
object would either transferring Passing considered passing value
Passing considered passing reference
Anyone pointing memory location access value
For I recommend read also Comparing Value Reference The local parameter copy original argument passed function variable The local parameter reference storage location original argument passed
variable function No copy made overhead copying time storage saved The simplest way get Excel file
say example two number cell accordingly want find sum third cell let say
You two way
Either typing cell
In case value cell change sum remains
Or typing
In case value cell change sum change
When passing ref basically passing pointer variable
Pass value passing copy variable
In basic usage normally mean pas ref change variable seen calling method pas value wont
Pass value sends COPY data stored variable specify pas reference sends direct link variable
So pas variable reference change variable inside block passed original variable changed
If simply pas value original variable able changed block passed get copy whatever contained time call
Pass value The function copy variable work copy change anything original variable Pass reference The function us original variable change variable function change original variable
Example copy see Keep simple peep
Walls text bad habit
A major difference variable store value specifying variable method call pass copy variable value method
variable store reference object specifying variable argument pass method copy actual reference refers object
Even though reference passed value method still use reference receives interact possibly original object
Similarly returning information method via return statement method return copy value stored variable copy reference stored variable
When reference returned calling method use reference interact referenced object
So effect object always passed reference
In c pas variable reference called method modify variable C provides keywords ref
Applying ref keyword parameter declaration allows pas variable method called method able modify original variable caller
The ref keyword used variable already initialized calling method
Normally method call contains uninitialized variable argument compiler generates error
Preceding parameter keyword creates output parameter
This indicates compiler argument passed called method reference called method assign value original variable caller
If method assign value output parameter every possible path execution compiler generates error
This also prevents compiler generating error message uninitialized variable passed argument method
A method return one value caller via return statement return many value specifying multiple output ref parameter
see c discussion example In short Passed value WHAT passed reference WHERE
If value Happy Guy
see Happy Guy
If change Happy Gal
wo know
If passed reference change
By definition pas value mean making copy memory actual parameter value passed copy content actual parameter
Use pas value using parameter computation changing client program
In pas reference also called pas address copy address actual parameter stored
Use pas reference changing parameter passed client program
pas value mean pas value function making use argument
pas value copy data stored variable specify slower pas reference bcse data copied
make change copied data original data affected
nd pas refernce pas address send direct link variable
passing pointer variable
faster bcse le time consumed If want change value original variable passing function function constructed parameter
Then function ONLY value address passed variable
Without variable address code inside function change variable value seen outside function
But want give function change value seen outside need use
As value address reference passed available inside function
Examples generally best
You incur construction destruction penalty
If reference const interface suggesting change passed data
Here example demonstrates difference The method
If parameter declared preceded sign corresponding
An actual parameter referring formal parameter may general allowed use variable also literal even function invocation result
The function able place value something variable
It assign new value literal force expression change result
argument passed value method mean copy actual variable sent method actual one change applied inside method actually affecting copy version
When argument passed reference mean reference pointer actual variable passed method actual variable data
Check example
Thank interest question
Because attracted spam answer removed posting answer requires site
Would like answer one instead
asked viewed active site design logo Stack Exchange Inc user contribution licensed

study theory experimentation engineering form basic design use computer
It scientific practical approach application systematic study feasibility structure expression mechanization methodical underlie acquisition representation processing storage communication access information
An alternate succinct definition computer science study automating algorithmic process scale
A specializes theory computation design computational system
Its field divided variety theoretical
Some field explores fundamental property intractable problem highly abstract field emphasize visual application
Other field still focus challenge implementing computation
For example considers various approach description computation study investigates various aspect use
considers challenge making computer computation useful usable human
The earliest foundation would become computer science predate invention modern
Machines calculating fixed numerical task existed since antiquity aiding computation multiplication division
Further performing computation existed since antiquity even development sophisticated computing equipment
designed constructed first working
In demonstrated digital mechanical calculator called
He may considered first computer scientist information theorist among reason documenting binary number system
In launched industry released simplified first calculating machine strong enough reliable enough used daily office environment
started design first eventually gave idea first
He started developing machine le two year sketched many salient feature modern computer
A crucial step adoption punched card system derived making infinitely programmable
In translation French article Analytical Engine wrote one many note included algorithm compute considered first computer program
Around invented used process statistical information eventually company became part
In one hundred year Babbage impossible dream convinced IBM making kind punched card equipment also calculator business develop giant programmable calculator based Babbage Analytical Engine used card central computing unit
When machine finished hailed Babbage dream come true
During new powerful machine developed term came refer machine rather human predecessor
As became clear computer could used mathematical calculation field computer science broadened study general
Computer science began established distinct academic discipline early
The world first computer science degree program began
The first computer science degree program United States formed
Since practical computer became available many application computing become distinct area study right
Although many initially believed impossible computer could actually scientific field study late fifty gradually became accepted among greater academic population
It brand formed part computer science revolution time
IBM short International Business Machines released IBM later IBM computer widely used exploration period device
Still working IBM computer frustrating misplaced much one letter one instruction program would crash would start whole process
During late computer science discipline much developmental stage issue commonplace
Time seen significant improvement usability effectiveness
Modern society seen significant shift user computer technology usage expert professional user base
Initially computer quite costly degree human aid needed efficient part professional computer operator
As computer adoption became widespread affordable le human assistance needed common usage
Despite short history formal academic discipline computer science made number fundamental contribution science fact along founding science current epoch human history called driver seen third major leap human technological progress CE BC
These contribution include Although first proposed term computer science appears article Louis Fein argues creation analogous creation justifying name arguing like subject applied interdisciplinary nature characteristic typical academic discipline
His effort others rewarded university went create program starting Purdue
Despite name significant amount computer science involve study computer
Because several alternative name proposed
Certain department major university prefer term emphasize precisely difference
Danish scientist suggested term reflect fact scientific discipline revolves around data data treatment necessarily involving computer
The first scientific institution use term Department Datalogy University Copenhagen founded Peter Naur first professor datalogy
The term used mainly Scandinavian country
An alternative term also proposed Naur used distinct field data analysis including statistic database
Also early day computing number term practitioner field computing suggested
Three month later journal suggested followed next year
The term also suggested
In Europe term derived contracted translation expression automatic information
informazione automatica Italian information mathematics often used
French German Italian Dutch Spanish Portuguese mean informatics
Similar word also adopted UK
In however linked applied computing computing context another domain
A folkloric quotation often attributed almost certainly first formulated state computer science computer astronomy telescope
The design deployment computer computer system generally considered province discipline computer science
For example study computer hardware usually considered part study commercial deployment often called information technology
However much idea various discipline
Computer science research also often intersects discipline philosophy
Computer science considered much closer relationship mathematics many scientific discipline observer saying computing mathematical science
Early computer science strongly influenced work mathematician continues useful interchange idea two field area
The relationship computer science software engineering contentious issue muddied term software engineering mean computer science defined
taking cue relationship engineering science discipline claimed principal focus computer science studying property computation general principal focus software engineering design specific computation achieve practical goal making two separate complementary discipline
The academic political funding aspect computer science tend depend whether department formed mathematical emphasis engineering emphasis
Computer science department mathematics emphasis numerical orientation consider alignment
Both type department tend make effort bridge field educationally across research
A number computer scientist argued distinction three separate paradigm computer science
argued paradigm science technology mathematics
working group argued theory abstraction modeling design
Amnon Eden described rationalist paradigm treat computer science branch mathematics prevalent theoretical computer science mainly employ technocratic paradigm might found engineering approach prominently software engineering scientific paradigm approach artifact empirical perspective identifiable branch
As discipline computer science span range topic theoretical study algorithm limit computation practical issue implementing computing system hardware software
formerly called Computing Sciences Accreditation made representative ACM IEEE CS four area considers crucial discipline computer science
In addition four area CSAB also identifies field software engineering artificial intelligence computer networking communication database system parallel computation distributed computation interaction computer graphic operating system numerical symbolic computation important area computer science
mathematical abstract spirit derives motivation practical everyday computation
Its aim understand nature consequence understanding provide efficient methodology
All study related mathematical logic formal concept method could considered theoretical computer science provided motivation clearly drawn field
Data structure algorithm study commonly used computational method computational efficiency
According fundamental question underlying computer science What efficiently automated
Theory computation focused answering fundamental question computed amount resource required perform computation
In effort answer first question examines computational problem solvable various theoretical
The second question addressed study time space cost associated different approach solving multitude computational problem
The famous problem one open problem theory computation
Information theory related quantification information
This developed find fundamental limit operation compressing data reliably storing communicating data
Coding theory study property system converting information one form another fitness specific application
Codes used recently also
Codes studied purpose designing efficient reliable method
Programming language theory branch computer science deal design implementation analysis characterization classification individual
It fall within discipline computer science depending affecting software engineering
It active research area numerous dedicated academic journal
Formal method particular kind based technique development software system
The use formal method software hardware design motivated expectation engineering discipline performing appropriate mathematical analysis contribute reliability robustness design
They form important theoretical underpinning software engineering especially safety security involved
Formal method useful adjunct software testing since help avoid error also give framework testing
For industrial use tool support required
However high cost using formal method mean usually used development safety utmost importance
Formal method best described application fairly broad variety fundamental particular calculus also problem software hardware specification verification
Computer architecture digital computer organization conceptual design fundamental operational structure computer system
It focus largely way central processing unit performs internally access address memory
The field often involves discipline computer engineering electrical engineering selecting interconnecting hardware component create computer meet functional performance cost goal
Computer performance analysis study work flowing computer general goal improving controlling using resource efficiently eliminating predicting performance anticipated peak load
Concurrency property system several computation executing simultaneously potentially interacting
A number mathematical model developed general concurrent computation including model
A distributed system extends idea concurrency onto multiple computer connected network
Computers within distributed system private memory information often exchanged among achieve common goal
This branch computer science aim manage network computer worldwide
Computer security branch computer technology whose objective includes protection information unauthorized access disruption modification maintaining accessibility usability system intended user
Cryptography practice study hiding encryption therefore deciphering decryption information
Modern cryptography largely related computer science many encryption decryption algorithm based computational complexity
A database intended organize store retrieve large amount data easily
Digital database managed using database management system store create maintain search data
Computer graphic study digital visual content involves synthesis manipulation image data
The study connected many field computer science including heavily applied field special effect
Research develops theory principle guideline user interface designer create satisfactory user experience desktop laptop mobile device
field study concerned constructing technique using computer analyze solve problem
In practical use typically application form problem various scientific discipline
Artificial intelligence AI aim required synthesize process environmental adaptation learning communication found human animal
From origin artificial intelligence research necessarily drawing area expertise
AI associated popular mind main field practical application embedded component area require computational understanding
The late question Can computer think
question remains effectively unanswered although still used ass computer output scale human intelligence
But automation evaluative predictive task increasingly successful substitute human monitoring intervention domain computer application involving complex data
Software engineering study designing implementing modifying software order ensure high quality affordable maintainable fast build
It systematic approach software design involving application engineering practice software
Software engineering deal organizing analyzing deal creation manufacture new software internal maintenance arrangement
Both computer application software engineer computer system software engineer projected among fastest growing occupation
The philosopher computing noted three Conferences important event computer science research
During conference researcher public private sector present recent work meet
Unlike academic field computer science prestige greater journal publication
One proposed explanation quick development relatively new field requires rapid review distribution result task better handled conference journal
Since computer science relatively new field widely taught school university academic subject
For example estimated percent high school United States offered computer science education
A report Association Computing Machinery ACM Computer Science Teachers Association CSTA revealed state adopted significant education standard high school computer science
However computer science education growing
Some country Israel New Zealand South Korea already included computer science respective national secondary education curriculum
Several country following suit
In country significant gender gap computer science education
For example US computer science degree conferred woman
This gender gap also exists Western country
However part world gap small nonexistent
In approximately half computer science degree conferred woman
In woman made computer science graduate


