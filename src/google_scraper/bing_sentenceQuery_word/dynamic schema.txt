Stack Exchange network consists Q A community including largest trusted online community developer learn share knowledge build career
In relational model schema something specifies name data type field
The word schema also used conceptual schema physical schema external schema
What schema mean separately two case
Are related
Are related
Is schema used area computer science artificial intelligence programming language
What schema mean computer science besides database
Thanks
Please edit question limit specific problem enough detail identify adequate answer
Avoid asking multiple distinct question
See page help clarifying question
In relational database schema defines table field table relationship field table
Yes They related word
Schema used area also like related Mathematical Logic Refer point asked viewed active site design logo Stack Exchange Inc user contribution licensed

learn share knowledge build career
What recommended architecture providing storage dynamic logical database schema
To clarify Where system required provide storage model whose schema may extended altered user production good technology database model storage engine allow
A possibility illustrate Any answer based real world experience would greatly appreciated What proposing new
Plenty people tried found chase infinite flexibility instead end much much le
It roach motel database design data go almost impossible get
Try conceptualize writing code ANY sort constraint see I mean
The end result typically system MUCH difficult debug maintain full data consistency problem
This case often end
Mostly programmer see train wreck coming fail defensively code
Also often end case infinite flexibility really necessary bad smell dev team get spec say Gosh I clue sort data going put let put WHATEVER end user fine attribute type use code generic phone let create trivial nicely normalized system maintains flexibility integrity
If good development team problem overcome design successfully code well designed terribly buggy system
Most time
Why start odds stacked much though
Do believe
Google One True Lookup Table single table design
Some good result A strongly typed xml field MSSQL worked u
Like others said unless choice
One case required selling product must allow user record custom data
My company product fall category
If need allow customer tip Create administrative tool perform schema change allow change made way
Make administrative feature allow normal user access
Log every detail every schema change
This help debug problem also give CYA data customer something stupid
If thing successfully especially first one architecture mentioned work
My preference dynamically change database object allows take advantage DBMS query feature access data stored custom field
The three option require load large chunk data data processing code
I similar requirement decided use
MongoDB humongous open source scalable database written programming language
Wikipedia Highlights Lowdarks stuff need understand use mongo correctly I one real project The database consisted one table one field array
It index set
All data typeless index worked expected
Numeric field represented character actual sorting done client side
It still possible several array field data type needed
The logical data schema logical table held within database different table row first array element
It also supported simple versioning style using field
Advantages Disadvantages And I thinking next step could implement database file system level
That might relatively easy
The whole point relational DB keeping data safe consistent
The moment allow user alter schema go data integrity
Since forget XML
Use JSON store data bag appropriately typed column backend
You normally need query value slow even though many contemporary SQL database understand JSON natively
Sounds like really want sort database schema capable describing flexible schema storing actual data
Dynamic schema change touchy something want mess especially user allowed make change
You going find database suited task best bet select one based criterion
For example platform using host DB
What language app written
etc To clarify I mean This simple example would likely something specific need hopefully little easier work serve illustrate point
You consider database schema immutable application level structural change reflected data instantiation schema
I know model indicated question used production system
A rather large one use large institution I work
They specifically use long narrow table approach map data gathered many varied data acquisition system
Also Google recently released internal data sharing protocol protocol buffer open source via code site
A database system modeled approach would quite interesting
Check following EAV approach believe best approach come heavy cost Wikipedia excellent overview problem space I know old topic I guess never loses actuality
I developing something like right
Here approach
I use server setting MySQL Apache PHP Zend Framework application framework work well setting
Here simple implementation guide evolve
You would need implement query language interpreter effective SQL would complicated
Example The physical database layout Table cached data access layer Table Contents table Contents table The translation example query language standard SQL would look like You need spec table cached associative array hashtable something similar get spec name
Otherwise would need insert SQL overhead get name like snippet Bad example use avoid cache spec table instead
I hope get idea determine whether approach feasible
Enjoy
In past I chosen option C
However I using ORM REALLY made thing painful
I ca think say LinqToSql
I guess I create Hashtable reference field
Skliwz I guessing interested allowing user create field
ElasticSearch
You consider especially dealing datasets partition date use JSON data fixed using SQL retrieving data
ES infers schema new JSON field send either automatically hint manually one HTTP command mapping
Although support SQL great lookup capability even aggregation
Over wiki idea Dynamic Relational explored
You DO need DBA column table unless start adding constraint make act like traditional RDBMS project matures incrementally lock
Conceptually think row XML statement
For example employee record could represented This imply implemented XML handy conceptualization
If ask column SELECT madeUpColumn treated blank null unless added constraint forbid
And possible use although one careful comparison implied type model
But type handling user Dynamic Relational system would feel right home leverage existing RDBMS knowledge
Now somebody would build sql already provides way change schema ALTER command
simply table list field user allowed change write nice interface ALTER
By posting answer agree
asked viewed active site design logo Stack Exchange Inc user contribution licensed

Schema Definition Databases viewed different level schema
The external user schema view database standpoint individual
The conceptual logical schema overall view entire database including entity attribute relationship etc designed database designer
Search Schema UK US Search Schema rest Computing Students

The word come Greek word mean generally
The plural
In English used plural form
may refer

learn share knowledge build career
I keep hearing especially StackOverflow people generating webpage content dynamically
Does mean generating content anytime design time client side definition
In word relates web development definition dynamic
This mean generating HTML code PHP python etc
Instead hosting static HTML page generate HTML representative current state
As popular word people use mean many different thing
Static page really exist anymore
Any site care dynamic form
As result term got recycled mean number thing Everything involves part server transmit file harddisk
It refers possibility generation complete web page based content known available time scaffolding web page created
A dynamic web page give new information view maybe
For example static webpage always information dynamic web page content change depending specific variable like user logged etc
Values hard coded code form website
The value come number source including database content created user scraped website number place
Static content changed request dynamic content may changed depends time request parameter etc
Static content usually stored file like html cs image script etc
Dynamic content generated
Generation process usually us two part page template contains page markup special format placeholder dynamic part data obtained external source like database web service etc
Special application combine template data get final html content responded request
Dynamic content definition change gmail data different mine person u receive email regularly time atleast
A dynamic web page kind web page prepared fresh information content layout individual viewing
It static change time ex
news content user ex
preference login session user interaction ex
web page game context parametric customization
Ajax combine client server side dynamic data
Dynamically used mean content result generated fly
ahead time
generation follows kind process script function invoked
cached
using kind lookup case dynamic method object
statically
By posting answer agree
asked viewed active Get In get see By subscribing agree
site design logo Stack Exchange Inc user contribution licensed

Pronounce structure system described formal language supported
In schema defines table relationship field table
Schemas generally stored
Although schema defined text database language term often used refer graphical depiction database structure
Stay date latest development Internet terminology free weekly newsletter Webopedia
Join subscribe
The following fact statistic capture changing landscape cloud computing service provider customer keeping
The following computer science fact statistic provide quick introduction changing trend education related career
From ZZZ guide list text message online chat abbreviation help translate understand today texting lingo
Learn five generation computer major technology development led computing device use Computer architecture provides introduction system design basic computer science student
Networking fundamental teach building block modern network design
Learn different type network concept architecture

one two main programming language
Unlike main dialect Scheme follows design philosophy specifying small standard core powerful tool language extension
Scheme created released developer via series memo known
It first dialect Lisp choose first require implementation perform giving stronger support functional programming associated technique recursive algorithm
It also one first programming language support
It significant influence effort led development
The Scheme language standardized official standard standard called R RS
The widely implemented standard new standard ratified
Scheme diverse user base due compactness elegance minimalist philosophy also caused wide divergence practical implementation much Scheme Steering Committee call world unportable programming language dialect rather single language
Scheme started attempt understand purpose Steele Sussman wrote tiny Lisp interpreter using added mechanism creating actor sending message
Scheme originally called Schemer tradition language like
The current name resulted author use limited filename two component six character
Currently Schemer commonly used refer Scheme programmer
A new language standardization process began Scheme workshop goal producing standard
This process broke earlier R RS approach unanimity
feature standard module system allowing split core language library
A number draft specification released final version
A successful vote resulted ratification new standard announced August
Currently newest release various Scheme implementation support standard
There portable reference implementation proposed implicitly phased library called psyntax load bootstrap properly various older Scheme implementation
introduces numerous significant change language
The source code specified large subset Unicode character may appear Scheme symbol minor change lexical rule
Character data also specified Unicode
Many standard procedure moved new standard library form large expansion standard containing procedure syntactic form formerly part standard
A new module system introduced system exception handling standardized
replaced expressive syntactic abstraction facility allows use Scheme macro expansion time
Compliant implementation support Scheme full semantics number expanded mainly direction support standard floating point numerical representation
The standard caused controversy seen departed minimalist philosophy
In August Scheme Steering Committee oversees standardization process announced intention recommend splitting Scheme two language large modern programming language programmer small version subset large version retaining minimalism praised educator casual implementors
Two working group created work two new version Scheme
The site link working group charter public discussion issue tracking system
The ninth draft small language made available April
A vote ratifying draft closed May final report available since August describing language effort therefore considered isolation successor
Scheme primarily programming language
It share many characteristic member Lisp programming language family
Scheme simple syntax based parenthesized list prefix operator followed argument
Scheme program thus consist sequence nested list
Lists also main data structure Scheme leading close equivalence source code data format
Scheme program easily create evaluate piece Scheme code dynamically
The reliance list data structure shared Lisp dialect
Scheme inherits rich set primitive Lisp progenitor
Scheme us strictly support
Thus procedure assigned value variable passed argument procedure
This section concentrate mainly innovative feature language including feature distinguish Scheme Lisps
Unless stated otherwise description feature relate standard
This subsection describes feature Scheme distinguished programming language earliest day
These aspect Scheme strongly influence product Scheme language aspect version Scheme programming language onward share
Scheme simple language much easier implement many language comparable
This ease attributable use derive much syntax language primitive form
For instance syntactic construct defined Scheme standard classed derived library form written macro involving fundamental form principally lambda
As say sec
The fundamental variable binding construct lambda expression variable binding construct explained term lambda expression
Example macro implement expression using perform variable binding
Thus using defined Scheme implementation would rewrite reduces implementation task coding procedure instantiation
In Sussman Steele remarked minimalism Scheme conscious design goal rather unintended outcome design process
We actually trying build something complicated discovered serendipitously accidentally designed something met goal much simpler intended realized lambda small simple serve core powerful expressive programming language
Like modern programming language unlike earlier Lisps Scheme lexically scoped possible variable binding program unit analyzed reading text program unit without consideration context may called
This contrast dynamic scoping characteristic early Lisp dialect processing cost associated primitive textual substitution method used implement lexical scoping algorithm compiler interpreter day
In Lisps perfectly possible reference inside procedure refer quite distinct binding external procedure depending context call
The impetus incorporate lexical scoping unusual scoping model early new version Lisp came Sussman study
He suggested lexical scoping mechanism would help realize initial goal implementing Lisp
The key insight introduce lexical scoping Lisp dialect popularized Sussman Steele Lambda Paper Scheme An Interpreter Extended Lambda Calculus adopted concept page described attributed idea
mathematical notation lambda calculus inspired Lisp use lambda keyword introducing procedure well influencing development technique involving use Lisp
But early Lisps suitable expression lambda calculus treatment
The introduction lexical scope resolved problem making equivalence form lambda notation practical expression working programming language
Sussman Steele showed new language could used elegantly derive imperative declarative semantics programming language including dynamic scope Lisps using lambda expression simple procedure instantiation control structure environment modifier
They introduced along first description Scheme first Lambda Papers subsequent paper proceeded demonstrate raw power practical use lambda calculus
Scheme inherits block structure earlier block structured language particularly
In Scheme block implemented three
For instance following construct creates symbol called bound number Blocks create arbitrarily complex block structure according need programmer
The use block structuring create local binding alleviates risk otherwise occur
One variant permit binding refer variable defined earlier construct thus The variant designed enable procedure bound one another
See definition used example All procedure bound single may refer one another name well value variable defined earlier may refer defined later
A variant named let form identifier keyword
This bind let variable argument procedure whose name given identifier whose body body let form
The body may repeated desired calling procedure
The named let widely used implement iteration
Example simple counter Like procedure Scheme procedure created named let first class object
Scheme iteration construct Scheme use express
Scheme implementation required optimize tail call support unbounded number active tail call sec
property Scheme report describes safe Scheme programmer write iterative algorithm using recursive structure sometimes intuitive
Tail recursive procedure form provide support iteration using tail recursion
Continuations Scheme
Scheme provides procedure also known capture current continuation packing escape procedure bound formal argument procedure provided programmer
sec
continuation enable programmer create
Continuations used emulate behavior imperative programming language
The following function given function list return first element return true
The following example traditional programmer puzzle show Scheme handle continuation object binding variable passing argument procedure
When executed code display counting sequence In contrast Common Lisp data procedure Scheme share common namespace whereas Common Lisp making possible function variable name requiring special notation referring function value
This sometimes known distinction referring unified namespace Scheme separate namespaces Common Lisp
In Scheme primitive used manipulate bind data used bind procedure
There equivalent Common Lisp primitive
This subsection document design decision taken year given Scheme particular character direct outcome original design
Scheme specifies comparatively full set numerical datatypes including type known Scheme numerical tower sec

The standard treat abstraction commit implementor particular internal representation
Numbers may quality exactness
An exact number produced sequence exact operation involving exact thus contagious
The standard specifies two implementation must produce equivalent result operation resulting exact number
The standard specifies procedure used change exactness number
produce exact number numerically closest argument
produce inexact number numerically closest argument
The standard omits procedure main report specifies compatibility procedure standard library rnrs
In standard Scheme implementation required implement whole numerical tower must implement coherent subset consistent purpose implementation spirit Scheme language sec

The new standard require implementation whole tower exact integer object exact rational number object practically unlimited size precision implement certain procedure always return exact result given exact argument sec
sec

Example exact arithmetic implementation support exact rational complex number
Example Same arithmetic implementation support neither exact rational number complex number accept real number rational notation
Both implementation conform standard second conform implement full numerical tower
Scheme support delayed evaluation form procedure
The lexical context original definition promise preserved value also preserved first use
The promise ever evaluated
These primitive produce handle value known used implement advanced construct
In standard longer primitive instead provided part compatibility library rnrs
In suggested implementation given implementing promise procedure argument using ensure ever evaluated irrespective number time called sec

SRFI enables expression finite infinite sequence extraordinary economy
For example definition using function defined SRFI Most Lisps specify order evaluation procedure argument
Scheme
Order order expression operator position chosen implementation basis constraint effect concurrent evaluation operator operand expression constrained consistent sequential order evaluation
sec
ev procedure describes argument passed return value argument
In contrast Lisps appearance expression operator position first item Scheme expression quite legal long result expression operator position procedure
In calling procedure add expression ev ev ev may evaluated order long effect evaluated parallel
Thus following three line may displayed order standard Scheme example code executed although text one line may interleaved another would violate sequential evaluation constraint
In standard also later report syntax Scheme easily extended via macro system
The standard introduced powerful hygienic macro system allows programmer add new syntactic construct language using simple sublanguage sec
Prior hygienic macro system relegated appendix standard high level system alongside low level macro system treated extension Scheme rather essential part language
Implementations hygienic macro system also called required respect lexical scoping rest language
This assured special naming scoping rule macro expansion avoids common programming error occur macro system programming language
specifies sophisticated transformation system available language extension Scheme time
Invocations macro procedure bear close treated differently
When compiler encounter program first check see symbol defined syntactic keyword within current lexical scope
If attempt expand macro treating item tail argument without compiling code evaluate process repeated recursively macro invocation remain
If syntactic keyword compiler compiles code evaluate argument tail evaluate variable represented symbol head call procedure evaluated tail expression passed actual argument
Most Scheme implementation also provide additional macro system
Among popular one macro system similar system provided
Prior Scheme standard equivalent procedure ubiquitous Lisps although first Lambda Paper described similar LISP function EVAL first Revised Report replaced took two argument
The second third fourth revised report omitted equivalent
The reason confusion Scheme lexical scoping result evaluating expression depends evaluated
For instance clear whether result evaluating following expression If evaluated outer environment defined result sum operand
If evaluated inner environment symbol bound value procedure result product two operand
resolve confusion specifying three procedure return environment providing procedure take environment evaluates expression environment provided
sec
extends providing procedure called programmer specify exactly object import evaluation environment
In dialect Lisp including Common Lisp convention value evaluates value false boolean expression
In Scheme since IEEE standard value except f including equivalent Scheme written evaluate value true boolean expression
sec
Where constant representing boolean value true Lisps Scheme
In Scheme primitive datatypes disjoint
Only one following predicate true Scheme object
sec Within numerical datatype contrast numerical value overlap
For example integer value satisfies predicate time
sec Scheme three different type equivalence arbitrary object denoted three different relational operator testing equality Type dependent equivalence operation also exist Scheme compare two string latter performs comparison compare character compare number
Up standard standard comment Scheme semicolon make rest line invisible Scheme
Numerous implementation supported alternative convention permitting comment extend single line standard permit two entire may turned comment commented preceding introduced SRFI multiline comment block comment may produced surrounding text
Scheme input output based datatype
sec defines two default port accessible procedure correspond Unix notion
Most implementation also provide
input standard output supported standard standard procedure
Most implementation provide string port similar redirection capability enabling many normal operation performed string buffer instead file using procedure described SRFI
The standard specifies much sophisticated capable port procedure many new type port
The following example written strict Scheme
Example With output defaulting Example As using optional port argument output procedure Example As output redirected newly created file Example As explicit file open port close send output file Example As using send output file
Similar procedure provided input
Scheme provides predicate
For character input output provided
For writing reading Scheme expression Scheme provides
On read operation result returned object input port reached end file tested using predicate
In addition standard SRFI defines basic formatting procedure resembling Common Lisp function named
In Scheme procedure bound variable
At language standard formally mandated program may change variable binding procedure effectively redefining
Language change For example one may extend accept string well number redefining In every binding including standard one belongs library exported binding immutable
sec Because redefinition standard procedure mutation forbidden
Instead possible import different procedure name standard one effect similar redefinition
In Standard Scheme procedure convert one datatype another contain character string name predicate end
procedure change value data end
These convention often followed Scheme programmer
In formal context Scheme standard word procedure used preference function refer lambda expression primitive procedure
In normal usage word procedure function used interchangeably
Procedure application sometimes referred formally
As Lisps term used Scheme refer procedure argument
The term proper tail recursion refers property Scheme implementation perform optimization support indefinite number active
The form title standard document since Revised Report Algorithmic Language Scheme reference title standard document Revised Report Algorithmic Language Algol The Summary page closely modeled Summary page ALGOL Report
The language formally defined standard
They describe standard form keywords accompanying syntax provide control structure language standard procedure perform common task
This table describes standard form Scheme
Some form appear one row easily classified single function language
Forms marked L table classed derived library form standard often implemented macro using fundamental form practice making task implementation much easier language
Note defined library syntax expander need know achieve splicing functionality
In longer library syntax
The following two table describe standard procedure Scheme
far extensive summary type would practical
Some procedure appear one row easily classified single function language
String character procedure contain name perform comparison argument upper case lower case version character taken equal
Implementations take two argument defined left optional
Because Scheme minimalism many common procedure syntactic form defined standard
In order keep core language small facilitate standardization extension Scheme community Scheme Request Implementation SRFI process extension library defined careful discussion extension proposal
This promotes code portability
Many SRFIs supported Scheme implementation
SRFIs fairly wide support different implementation include A full list accepted finalized SRFIs available The elegant minimalist design made Scheme popular target language designer hobbyist educator small size typical also popular choice
This resulted score implementation differ much porting program one implementation another quite difficult small size standard language mean writing useful program great complexity standard portable Scheme almost impossible
The standard specifies much broader language attempt broaden appeal programmer
Almost implementation provide traditional development debugging
Many also Scheme program executable binary
Support embedding Scheme code program written language also common relative simplicity Scheme implementation make popular choice adding scripting capability larger system developed language
The Scheme interpreter compile Scheme C make embedding particularly easy
In addition Bigloo compiler configured generate also feature experimental bytecode generator
Some implementation support additional feature
For example provide integration Java class Scheme C compiler often make easy use external library written C allowing embedding actual C code Scheme source
Another example offer set visual tool supporting learning Scheme
Scheme widely used number school particular number introductory course use Scheme conjunction textbook SICP
For past year run formerly TeachScheme
project exposed close high school teacher thousand high school student rudimentary Scheme programming
old introductory programming class taught Scheme Although replaced modern course SICP continues taught MIT
The textbook Matthias Felleisen currently Northeastern University used institute higher education introductory computer science course
Both use Scheme exclusively introductory course Fundamentals Computer Science Introduction Program Design respectively
us Scheme advanced Programming Language Concepts course
introductory class taught entirely Scheme
The introductory class CS recently taught entirely Scheme save minor diversion Logo demonstrate dynamic scope course material including lecture webcasts available online free charge
The introductory computer science course also taught Scheme
Programming Design Paradigms mandatory course Computer science Graduate Students also extensively us Scheme
The introductory Computer Science course University Minnesota Twin Cities CSCI also us Scheme primary language followed course introduces student Java programming language
In software industry Asia largest software consultancy firm us Scheme training program fresh college graduate
Scheme also used following

µµµµ obj endobj obj endobj obj endobj obj stream éÎìÐ Ï oÝó I f X hªðm g ú íÔFNà UÖê éüÌ K aÖ Dov
nç q z K ìq ÙØÃQYYQö IW

âãÏÓ obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R R endobj obj R R R endobj obj R R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R R endobj obj R R endobj obj R R R endobj obj R R endobj obj R R R R R R endobj obj R R R R R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R endobj obj R R endobj obj R R R endobj obj R R endobj obj R R R endobj obj R R endobj obj R R endobj obj R R R R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R R endobj obj R R endobj obj R R R endobj obj R R R R R endobj obj R R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R R endobj obj R R endobj obj R R R endobj obj R R endobj obj R R endobj obj R R R R R endobj obj R R R endobj obj R R R endobj obj R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R endobj obj R R endobj obj R R R R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R R R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R R R endobj obj R R endobj obj R R R R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R R R R R endobj obj R R R endobj obj R R endobj obj R R endobj obj R R R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R R R endobj obj R R endobj obj R R R endobj obj R R endobj obj R R endobj obj R R R endobj obj R R endobj obj R R R endobj obj R R endobj obj R R endobj obj R R R R R R endobj obj R R R endobj obj R R endobj obj R R R endobj obj R R R R R R endobj obj R R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R R R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R R endobj obj R R endobj obj R R R endobj obj R R endobj obj R R R endobj obj R R endobj obj R R R endobj obj R R endobj obj R R R endobj obj R R endobj obj R R endobj obj R R R endobj obj R R endobj obj R R R endobj obj R R endobj obj R R endobj obj R R R endobj obj R R endobj obj R R R R R R R R R R R R R R R endobj obj R R endobj obj R R R endobj obj R R R R endobj obj R R endobj obj R R R R endobj obj R R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R R endobj obj R R R R endobj obj R open R endobj obj R R endobj obj R R R endobj obj R R endobj obj R FB R endobj obj R R endobj obj R R R endobj obj R R R R endobj obj R R R R R R R R R R R R R R R R R R endobj obj R R endobj obj R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R endobj obj R R endobj obj R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R endobj obj R R R endobj obj R R endobj obj R R R endobj obj R R endobj obj R R endobj obj R R R R R R R R R R R R R endobj obj R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R endobj obj R R R endobj obj endobj obj R R endobj obj R R R R R R R R R R R R R R R R R R R R R R R R endobj obj R R endobj obj R R R R R R R R R R R R R R R R R R R R R R R endobj obj R R endobj obj R R R endobj obj R R endobj obj R R R endobj obj R R endobj obj R R R endobj obj R R endobj obj R R R endobj obj R R endobj obj R R R endobj obj R R endobj obj R R R endobj obj R R endobj obj R R R endobj obj R R endobj obj R R R endobj obj R R endobj obj R R R endobj obj R R endobj obj R R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R R R R endobj obj R R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R R R endobj obj R R endobj obj R R R R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R endobj obj R R true false false false false false false R endobj obj R R R R R R R endobj obj R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R endobj obj stream äm ª V c Ù lÞèíR µ g Ë T w ËCh ðb Ú Ø G fµµdN mÛÂ U ââ øÀñôðÖ ò
ã äíÙpÛâí Û
ÇÒÐÍ O ºýâ é kÙíC Ø â Z ôÀX Zê ç J Ä L R oO ñ Ì êLÁ é ÆFú FØµ ø PÙÜyÙ xïb kø Gp ùÌTXÛ ËÏYv Ï OKOFQ Zb p
æ Ìwú Ó ÛÌ ËÙ ªR ë ÜÃ Z öW wªmþ v äâj û òiÅO é ç f öË di x áð Ë µM M fÝò Lf kr GÈÉ ìÿ çüS lÝ ë û üÙðÀÑ U G L A ÿ Ø JØÁ êí E Þ öÆC Ã ÙW Qr endstream endobj obj Italic R R endobj obj Italic endobj obj Italic R R endobj obj R endobj obj Italic R R R endobj obj Identity Adobe endobj obj Italic R endobj obj R R endobj obj R endobj obj R R endobj obj endobj obj Bold R R endobj obj Bold endobj obj R R endobj obj endobj obj Bold R R endobj obj Bold endobj obj Bold R R endobj obj Bold endobj obj http endobj obj R R R R R R R R endobj obj stream oÛ
Ï k Oð FdQè ØB ªä T Ø F óµÛzÕÈr TÉý ì µ ìA Éï D spÌÖmG Dò Euk
tòuíl ÑYä Í zÉúÚÈú c r VôÈÅa ÉW ôXi L endstream endobj obj false stream P ív ì Kr Ýy Gµá á L Äbé

