In style building structure element computer express logic without describing
Many language apply style attempt minimize eliminate describing program must accomplish term rather describe accomplish sequence programming language left language
This contrast implement explicit step
Declarative programming often considers theory computation deduction logic space
Declarative programming may greatly simplify writing
Common declarative language include system
Declarative programming often defined style programming
A number common definition exist attempt give term definition simply contrasting imperative programming
For example These definition overlap substantially
Declarative programming contrast imperative
Declarative programming style programming program describe desired result without explicitly listing command step must performed
language characterized declarative programming style
In program consist logical statement program executes searching proof statement
In function state change represented function transform state explicitly represented object program
Although pure functional language often provide facility describing effect function series step
Other functional language support mixture procedural functional programming
Some declarative principle also support procedural style programming
Declarative programming includes number
state relation variable form constraint specify property target solution
The set constraint giving value variable solution consistent maximum number constraint
Constraint programming often complement paradigm functional logical even imperative programming
example declarative DSLs include parser generator input language build specification language configuration management language subset SELECT query example
DSLs advantage useful necessarily needing make easier language purely declarative
Many markup language often declarative
HTML example describes appear webpage specifies neither rendering page page possible user
As software system combine traditional markup language HTML declarative markup defines server system support declared interface
Such system typically using may include abstraction database syntax parameterised call web service using REST
example specify dependency declarative fashion include imperative list action take well
Similarly specifies context free grammar declaratively includes code snippet host language usually imperative
language state query relation
The specific query answered implementation theorem prover typically take form sort
Like functional programming many logic programming language permit side effect result strictly declarative
Models mathematical representation physical system may implemented computer code declarative
The code contains number equation imperative assignment describe declare behavioral relationship
When model expressed formalism computer able perform algebraic manipulation best formulate solution algorithm
The mathematical causality typically imposed boundary physical system behavioral description system declarative acausal
Declarative environment include

program small routine
also called nonprocedural high level programming language ideally program specifies done rather
In language le difference specification program Logic
These termed nonprocedural declarative language sense programmer specifies goal accomplished specific method applied attain goal
Prolog based concept resolution akin logical deduction unification

At point undoubtedly heard imperative programming v declarative programming
You might even searched term actually mean
Sadly probably encountered definition similar You know imperative programming like something declarative programming like That definition make perfect sense actually know difference imperative declarative asked question first place
It like trying answer What came first chicken egg except everyone seems think chicken even like egg confused
Combine frustration bastardization actual word declarative basically mean sudden imposter syndrome tap dancing confidence realize even like programming much
Don worry though friend
I know monad hopefully post help realize declarative easy reason The hard part topic observed It one thing intuition seem I talked many developer seems help combination metaphor actual code example
So buckle cause I preach
Let go back initial definition I made fun Imperative programming like How something declarative programming like What There actually SOME good information hidden
Let first see merit definition taking context programming look real life example
You decide spending much time arguing JavaScript Fatigue Reactive Functional Programming husband deserves nice date
You decide go Red Lobster since listening lot Beyonce lately

You arrive Red Lobster approach front desk I see table located Gone Fishin sign empty
My husband I going walk sit
Table two please
The imperative approach concerned HOW actually going get seat
You need list step able show HOW going get declarative approach concerned WHAT want table two
brain More metaphor
I going ask question
I want think imperative response declarative response
I
How I get house An imperative response Go north exit parking lot take left
Get south get Bangerter Highway exit
Take right exit like going Ikea
Go straight take right first light
Continue next light take next left
My house
A declarative response My address West Immutable Alley Draper Utah Regardless I get house really matter car I drive
Am I going drive stick shift car automatic car
Enough metaphor
Before dive code important realize many declarative approach sort imperative abstraction layer
Look example The declarative response Red Lobster employee assuming Red Lobster employee know imperative step get u table
Knowing address assumes sort GPS know imperative step get house
An automatic car sort abstraction layer shifting gear
That realization really made click I repeat Many declarative approach sort underlying imperative abstraction
If sentence make sense great
Now going attempt take leap metaphorical happy land real world code land
To make leap graceful let look programming language inherently declarative versus imperative nature
Imperative C Java Declarative SQL HTML Can Be Mix JavaScript C Python Think typical SQL HTML example By glancing example clear understanding going
They declarative
They concerned WHAT want done rather HOW want done
You describing trying achieve without instructing
The implementation selecting user live Mexico abstracted
You concerned web browser parsing displaying screen
Your WHAT website
So far good
Let dive practical JavaScript example
I want pretend technical interview I interviewer
Open console answer following question
Write function called take array number return new array doubling every item array
Write function called take array return result adding every item array
Using jQuery vanilla JavaScript add event handler element id
When clicked toggle add remove class well change text depending current state element
Let look common approach problem happen also imperative approach


By examining three imperative example common able better identify actually make imperative
The obvious commonality describing something
In example either explicitly iterating array explicitly laying step implement functionality want
This one might obvious used thinking even specifically way
In example mutating piece state If unfamiliar term state basically information something held memory sound lot like variable
In first two example create variable called result continually modify
In third example variable still state living DOM modify state DOM
This one bit subjective code readable
I glance code understand going
My brain need step code interpreter would also taking account context code life another negativity mutable data
All right enough code
Let take look declarative example
The goal fix problem
So example need describe happening mutate state readable glance



Much better Notice first two example leveraging JavaScript built method
This go back talking article declarative solution abstraction imperative implementation
In every example describing WHAT want happen rather HOW know HOW map reduce implemented also care
We mutating state
All mutation abstracted inside
It also readable get used course
Now
Well I cheated little bit using note three imperative mistake still fixed
The real beauty React create declarative user interface
By looking Btn component I able easily understand UI going look like
Another benefit instead state living DOM life React component
Another benefit declarative code program
This mean code concerned ultimate goal rather step take accomplish goal code used different program work fine
Look three example
We consume function component program want
They program agnostic
This hard imperative code often time definition imperative code relies context current state
One thing I go far functional programming subset declarative programming
If already I highly recommend getting familiar functional programming technique JavaScript
Start work way
Odds lower hanging fruit improve codebase making functional
Here definition I found internet may may helpful
Declarative programming act programming language conform mental model developer rather operational model machine
Declarative Programming programming declaration
declarative sentence
The declarative property exist one possible set statement express specific modular imperative property dual semantics inconsistent composition expressed variation set statement
Declarative language contrast imperative language procedural language specify explicit sequence step follow
In computer science declarative programming programming paradigm express logic computation without describing control flow
Listen I get newsletter worst
But Louis Colorado say This newsletter suck le others

learn share knowledge build career
I searching web looking definition declarative imperative programming would shed light
However language used resource I found daunting instance
Does one real world example could show might bring perspective subject perhaps C
Please edit question limit specific problem enough detail identify adequate answer
Avoid asking multiple distinct question
See page help clarifying question
A great C example declarative imperative programming LINQ
With programming tell compiler want happen step step
For example let start collection choose odd number With imperative programming step decide want Here saying With programming hand write code describes want necessarily get declare desired result Here saying Give u everything odd Step collection
Check item odd add result collection
In many case code mixture design always
Declarative programming say want imperative language say get want
A simple example Python The first example declarative specify implementation detail building list
To tie C example generally using LINQ result declarative style saying obtain want saying want
You could say SQL
One benefit declarative programming allows compiler make decision might result better code might make hand
Running SQL example query like SQL compiler optimize query know indexed field maybe indexed case iterate entire data set anyway
Or maybe SQL engine know perfect time utilize core speedy parallel search
programmer concerned condition write code handle special case way
Declarative v
Imperative A fundamental style computer programming
There four main paradigm imperative declarative functional considered subset declarative paradigm
programming paradigm express logic computation What without describing control flow How
Some example declarative domain specific language DSLs include CSS regular expression subset SQL SELECT query example Many markup language HTML MXML XAML XSLT often declarative
The declarative programming try blur distinction program set instruction program assertion desired answer
programming paradigm describes computation term statement change program state
The declarative program dually viewed programming command mathematical assertion
Functional programming programming paradigm treat computation evaluation mathematical function avoids state mutable data
It emphasizes application function contrast imperative programming style emphasizes change state
In pure functional language Haskell function without side effect state change represented function transform state
The following example imperative programming loop number find even number
Both example yield result one neither better worse
The first example requires code code testable imperative approach give full control implementation detail
In second example code arguably readable however LINQ give control happens behind scene
You must trust LINQ provide requested result
I add another example rarely pop programming discussion User Interface
In C build UI using various technology
On imperative end could use DirectX OpenGL imperatively draw button checkboxes etc really triangle triangle
It say draw user interface
At declarative end WPF
You basically write XML yeah yeah XAML technically framework work
You say user interface look like
It system figure
Anyway another thing think
Just one language declarative imperative mean certain feature
Also one benefit declarative programming purpose usually easily understood reading code whereas imperative give finer control execution
The gist Declarative want done Imperative want done Imperative programming requires developer define step step code executed
To give direction imperative fashion say Street turn left onto Main drive two block turn right onto Maple stop third house The declarative version might sound something like One say something say need done
The declarative style two advantage imperative style Calvert C Kulkarni D
Essential LINQ
Addison Wesley

All answer online post mention following What told u
For part program declarative part must hide implementation detail code
In fact reason functional programming functional library declarative abstracted away loop list creation hiding implementation detail likely imperative code loop behind scene
In program always imperative declarative code aim hide code behind abstraction part program use
Finally although functional programming LINQ make program declarative always make even declarative providing abstraction
For example I liked explanation Cambridge course example In computer science declarative programming programming paradigm express logic computation without describing control flow
From nutshell declarative language simpler lack complexity control flow loop statement etc
A good comparison model
You declarative file imperative code file
I often find I I need declarative half script lot people follow done
Imperative programming telling computer explicitly like specifying order C Declarative tell computer really
Datalog Prolog first language come mind regard
Basically everything declarative
You ca really guarantee order
C much imperative programming language certain C feature declarative like Linq The thing could written imperatively example wikipedia Linq Stealing Two example Imperatively Declaratively Imperatively Declaratively Note imperative example involve creating new variable mutating returning new value make something happen whereas declarative example execute given input return new value based initial input want happen
The difference mostly overall level abstraction
With declarative point far away individual step program lot latitude regarding get result
You could look every piece instruction falling somewhere continuum Declarative Real World Example Imperative Real World Example Just add another example term mobile app development
In iOS Android Interface Builders define UI apps
The UI drawn using Builders declarative nature drag drop component
The actual draeing happens underneath performed framework system
But also draw whole component code imperative nature
Also new language like Angular JS focussing designing UIs declaratively may see lot language offering support
Like JAVA doesnot good declarative way draw native desktop apps JAVA swing JAVA FX near future might
A programming language requires programming discipline Java COBOL FORTRAN Perl JavaScript
Programmers writing language must develop proper order action order solve problem based knowledge data processing programming
A computer language require writing traditional programming logic Users concentrate defining input output rather program step required procedural programming language Java
Declarative programming example CSS HTML XML XSLT RegX
declarative program data universal imperative
plus specifying data hardcoded checked format simpler le specifying variant imperative algorithm directly
complex specification cant written directly DSL form
best freq used DSLs data structure set table
dependency
havent dependency freedom modify ease support
compare example module class module happy class fragile base class problem good declarativeness DSL follows immediately benefit data structure table set
another plus change implementation declarative language vm DSL abstract well designed
make parallel implementation example
port o etc
good specifed modular isolating interface protocol give freedom easyness support
minus guess right
generic parameterized DSL imperative implementation may slower memory hungry specific one
case
case rare forget let slow
frequient always extend case
somewhere slowing case sure
Frameworks DSL imperative
halfway solution combine deficiences benefit
safe AND fast look haskell halfway strong simple ML flexible metaprog Prolog monster
look Prolog Haskell
simple flexibility Haskell From understanding term root philosophy declarative imperative kind knowledge
Declarative knowledge assertion truth statement fact like math axiom
It tell something
Imperative procedural knowledge tell step step arrive something
That definition algorithm essentially
If would compare computer programming language English language
Declarative sentence state something
A boring example declarative way displaying whether two number equal Java Imperative sentence English hand give command make sort request
Imperative programming list command
Here imperative way displaying whether two number equal accepting user input Java Essentially declarative knowledge certain element form layer abstraction element
Declarative programming
I wonder one mentioned Attribute class declarative programming tool C
The popular answer page talked LINQ declarative programming tool
According Wikipedia Common declarative language include database query language SQL XQuery regular expression logic programming functional programming configuration management system
So LINQ functional syntax definitely declarative method Attribute class C configuration tool declarative
Here good starting point read Thank interest question
Because attracted spam answer removed posting answer requires site
Would like answer one instead
asked viewed active site design logo Stack Exchange Inc user contribution licensed

A declarative language generation
This mean programmer specifies need done rather Like Captain Pickard So command crew Star Trek
The software seek answer question goal interrogating database containing Facts Rules
unlike procedural language computer find best path towards answer
There either matching answer example question goal might David wife
returned answer
This type language geared towards application artificial intelligence expert system inexact data handled general decision made
PROLOG declarative language developed artificial intelligence
There others also development
Consider Prolog database containing following fact rule A query could written The formal name statement
And work finding answer called
Effectively asking Mary wife David
In order provide answer following take place An important feature declarative language search go partially back fails find complete match first time around
This discussed detail next page
Click link This section dedicated Teacher Student revision resource OCR AS AQA ICT specification
Revision resource include exam question practice coursework guide
Topics include network system database data communication legal issue Data Protection Act measurement control OSI model along ethic social effect ICT work
Copyright

Visual Basic developed Microsoft extend capability BASIC adding object programming button menu element GUIs
Visual Basic also used within Microsoft program small routine
Declarative language also called nonprocedural high level programming language ideally program specifies done rather
In language le difference specification program implementation procedural language described far
The two common kind declarative language logic functional language
gramming ic best known state program set logical relation grandparent parent parent someone
Such language similar database language
A program executed inference engine answer query searching relation systematically make answer query
PROLOG used extensively natural language processing program
mathematical style
A functional program constructed applying function argument
Functional language ML Haskell used research tool language development automated mathematical theorem provers commercial project
Scripting language sometimes called little language
They intended solve relatively small programming problem require overhead data declaration feature needed make large program manageable
Scripting language used writing utility program easy learn sometimes considerably larger program
practical extraction report language developed late originally use operating system
It intended capability earlier scripting language
PERL provided many way state common operation thereby allowed programmer adopt convenient style
In became popular tool small utility program larger one
Together language discussed also became popular programming computer Web Document formatting language specify organization printed text graphic
They fall several class text formatting notation serve function program page description language interpreted printing device generally markup language describe intended function portion document
developed text formatting language professor improve quality mathematical notation book
Text formatting system unlike WYSIWYG What You See Is What You Get word processor embed plain text formatting command document interpreted language processor produce formatted document display printing
TeX mark italic text example italicized displayed
TeX largely replaced earlier text formatting language
Its powerful flexible ability gave expert precise control thing choice font layout table mathematical notation inclusion graphic within document
It generally used aid macro package define simple command common operation starting new paragraph widely used package
TeX contains numerous standard style sheet different type document may adapted user
There also related program BibTeX manages bibliography style sheet common bibliography style version TeX language various alphabet
language developed early basis work Palo Alto Research Center
Such language describe document term interpreted display document screen printer device
PostScript command example precisely position text various font size draw image mathematically described specify colour shading
PostScript us postfix also called reverse Polish notation operation name follows argument
Thus arc stroke mean draw stroke arc radius location
Although PostScript read written programmer normally produced text formatting program word processor graphic display tool
The success PostScript due specification public domain good match laser printer
It influenced development printing font manufacturer produce large variety PostScript font
Programming language language programmer writes instruction computer ultimately execute
The earliest programming language assembly language far removed instruction directly executed machine hardware
Users soon system manage
One implication model program could read operate program data would capable
language seen computer programming language provide mean whereby set instruction data various kind supplied computer form acceptable machine
Various type language employed different purpose
much like computer programming language
However addition many capability computer programming language data processing computation communicating computer device decision making robot language also includes statement specifically designed robot control
These capability include motion simple programming trick
In course work Logic Theorist GPS Newell Simon Shaw developed Information Processing Language IPL computer language tailored AI programming
At heart IPL highly flexible data structure We welcome suggested improvement article
You make easier u review hopefully publish contribution keeping point mind
Your contribution may edited staff publication subject final approval
Unfortunately editorial approach may able accommodate contribution
Our editor review submitted meet criterion add article
Please note editor may make formatting change correct spelling grammatical error may also contact clarification needed
There problem submission
Please try later
Our editor review submitted determine whether revise article

Stack Exchange network consists Q A community including largest trusted online community developer learn share knowledge build career
I first introduced idea declarative syntax using Angular JS
From I understand idea say instead order
You care done want done pas lower level abstraction
Now I going idea encapsulation I learn Java idea seems similar
From I understand idea break thing module define API people use
So people could use say
Is true
If real difference declarative syntax encapsulation
Just one describes syntax describes abstract design philosophy
Edit I think question boil difference making declarative statement making API call
They orthogonal
In declarative programming describe would count acceptable solution without necessarily describing find
For instance declarative program might rule like want install package must first installed package want install package must first installed
It platform figure way meet constraint
Encapsulation refers protection prevent client API tampering internal state service implement API
Nothing say API declarative nature
You could API declarative nature client provides constraint service figure meet could API operational nature client specifies action performed rather listing desired goal leaving service figure action accomplish goal
So encapsulated API declarative nature
To elaborate invoking API necessarily declarative nature
You design APIs declarative feel also APIs operational feel
Not APIs declarative
For example A declarative API might let give specify goal I want gcc installed let service infer sequence action achieve goal sequence package install order install
For example client might call service come sequence package install end gcc installed declarative API
An operational API might let repeatedly give action perform repeatedly invoke succeeds met prereqs identify valid sequence package end gcc installed
For example client might call sequence operation meet prerequisite end gcc installed
With API caller responsibility identify sequence action end gcc installed
Thus kind API operational declarative nature
Of course declarative v operational concept help u talk property programming language APIs
There hard bright line
It spectrum
But useful concept nonetheless
My first impulse agree answer two concept orthogonal
On second thought I think partially true I also try argue two side coin
In first approximation specifies want let system find get imperative programming give precise instruction system ensure get result want
In practice usually mix
You may add hint declarative programming system better find
Conversely often includes high level concept let skip detail automatically handled system
Since encapsulation help increase number high level concept use needed quite fair consider encapsulation also support declarative form programming
To put another way assumes include something like theorem prover solver find specification done
way predefined case proof already prepared applied code encapsulation
The specification done hiding internal description
Denotational semantics make difference
Should consider much difference proof code done canned proof code already done
In respect one consider author question encapsulation strong similarity declarative programming
But also large extend matter style interpreting written
BTW I like much expression declarative syntax
The issue much semantics issue
Declarative style would appropriate expression
To better explain understanding declarative programming I try use much I understand somewhat loosely
One basic idea isomorphism describes correspondence program proof program specification theorem
So program may read constructive proof specification
Conversely given mathematical statement existentially quantified variable turn theorem providing proof limit constructive proof extract proof program actually tell make statement true
For example statement b c C C extract proof operational way solving second degree equation
In case proof may work condition condition impose data program run
BTW The word come name home town solving equation
It consistent
Some research automated program generation consists precisely taking specification program theorem proved appropriate formal theory
A proof assistant record formal step proof partially automated program meeting specification extracted proof
Ideally sometime future case whole process fully mechanized theorem prover need human intervention specify program use system compile specification running code
This approach ultimate declarative programming describe want get
An leave kind deductive system task determining step achieve desired result
This used practice much mechanically generate complex program handle automatically simple problem without requiring programmer specify operational step
To take trivial example step bootstrapping compiler written owns language interpreter found automatically small logic program
And computer science many example specialized area tedious easy determine step needed achieve result
The principle encapsulation take meaningful subpart program represent interface actually specifies hide way actually implemented
The specification includes precise interface API use encapsulated code may also include information assertion formal mathematical statement API fully specifies supposed possibily pragmatic property regarding performance even assertion complexity
Of course full specification common
This several purpose
It give precise specification part program abstracting away implementation detail simplify reasonning considering high level concept property defined interface
It allows easy reuse encapsulated code program
It allows making improvement encapsulated program without affecting larger program use long specification respected
And let stay topic
Once encapsulated concept use encapsulation program concept available programming without tell detail implementation
Note passing high level language compiler also provides kind service
If see program proof becomes simpler proof le detail thus closer specification prof
So sense encapsulation help declarative
You use specification forget implementation canned proof specification forget theorem prover
Now API provided encapsulation may seen le declarative explained depending whether primitive operation provides seem specification done low level operational step
The distinction important trying declarative may impact property program readability example
But also much eye beholder
By nature encapsulation somewhat abstract higher level implemented
In sense necessarily declarative
Another point asking equation solved declarative kind thing
But different call solve second degree equation call make matrix may seen operational
Programmers tend consider thing declarative using logical rule constraint equation applied resolved rather computation step executed
But even distinction always clear cut
My favorite example grammar
Most people learn see rewriting system rather operational kind object
All word generated rewriting word
But grammar may equally seen set language equation declarative kind thing
Note answer contradiction answer
But I believe initial concern well justified
There matter style feel say
But also matter level discourse
The higher level le need prove declarative
And encapsulation help providing high level definition
That reason bringing isomorphism automated programming
By posting answer agree
asked viewed active site design logo Stack Exchange Inc user contribution licensed

We seek strong candidate topic
The studentship supervised James Cheney supported generous gift leading provider database solution based declarative foundation
Today many popular framework data science based idea functional programming
MapReduce logic programming
SQL richer logic programming language Datalog
Declarative programming technique drawing functional logic programming database theory logic offer tremendous potential make data analytics easier accessible wide audience
The aim studentship explore foundation declarative programming language analysis large amount data
Possible topic include limited This studentship supported generous gift LogicBlox funding University Edinburgh Centre Doctoral Training Data Science
The studentship provide full funding student nationality
For additional information project background please consult recent publication related topic LogicBlox welcome collaboration driven fundamental research interest academic partner hope recruit exceptional student aim become researcher leader declarative programming data science
The student supported studentship would also opportunity visit LogicBlox CDT industrial partner intern gain experience applying system practical problem
LogicBlox business founded applying declarative programming database research practical problem data analysis industry
Applying machine learning model large datasets core application area LogicBlox system
LogicBlox collaborates faculty member leading university industrial partner Data Science CDT
These position supervision James Cheney whose currently includes one postdoctoral researcher Wilmer Ricciotti three PhD student working topic involving provenance programming language security database
The current team supported funding AFOSR Microsoft Research Google European Union
The project also benefit strong collaborative link expert LFCS particularly
The brings together research group theoretical computer science artificial intelligence cognitive science
The School led UK REF ranking volume internationally recognized internationally excellent research
In School Informatics received Athena Swan Silver Award recognition commitment advancing career woman science technology engineering mathematics medicine STEMM employment higher education research
Overall University Edinburgh achieved Silver Award
The established Burstall Milner Plotkin recognized worldwide groundbreaking research topic programming language semantics type theory proof theory algorithm complexity database security system biology
Formal aspect database XML provenance Libkin Fan Buneman security Aspinall Stark Gordon Web programming language Wadler active area investigation LFCS complementary project
The part Laboratory Foundations Computer Science includes six faculty member five postdoctoral researcher six PhD student
Interests group span aspect database system theory
Topics current interest include graph database XML data integration novel approach query processing storage data provenance archiving annotation
Many topic relevant scientific data management area Edinburgh unique strength
one largest research activity LFCS including academic staff postdoctoral researcher current PhD student working functional programming type verification semantics software engineering security new programming model
We participate thriving PL research community across Scotland Scottish Programming Languages Seminars hosted every month PL group Glasgow Strathclyde Andrews Dundee Edinburgh
For information study Edinburgh School Informatics see page

learn share knowledge build career
I keep hearing term tossed around several different context
What
Please edit question limit specific problem enough detail identify adequate answer
Avoid asking multiple distinct question
See page help clarifying question
Declarative programming write code way describes want want
It left compiler figure
Examples declarative programming language SQL Prolog
The answer already fantastic job explaining declarative programming I going provide example might useful
Declarative Programs
Because declare ultimate goal intermediary step reach goal program used different context
This hard often depend context
hidden state
Take example
It parser generator aka
compiler compiler external declarative DSL describing grammar language parser language automatically generated description
Because context independence many different thing grammar And many Because prescribe computer step take order rearrange program much freely maybe even execute task parallel
A good example query planner query optimizer SQL database
Most SQL database allow display query executing query execute
Often query look like
The query planner take thing account would even dreamed rotational latency disk platter example fact completely different application completely different user executed similar query table joining worked hard avoid loading already memory anyway
There interesting machine work harder figure something would imperative language figure much freedom much information optimization stage
I sorry I must disagree many answer
I would like stop muddled misunderstanding definition declarative programming
attribute shared imperative programming
Other cited attribute declarative programming derive RT
Please click hyperlink detailed explanation
Two answer mentioned spreadsheet programming
In case spreadsheet programming
formula access mutable state declarating programming
This mutable cell value monolithic main entire program
The new value written cell formula executed thus mutable life declarative program execution formula spreadsheet
Thus relative formula view mutable cell immutable
An RT function allowed access global state also
Thus ability mutate value cell program terminates output main make mutable stored value context rule
The key distinction cell value updated spreadsheet formula performed thus order performing formula matter
The cell value updated declarative formula performed
Loosely As result imperative style help reader understand mechanic system actually may give little insight problem intended solve
On hand declarative style help reader understand problem domain approach system take towards solution problem le informative matter mechanic
Real program even one written language favor end spectrum ProLog C tend style present various degree various point satisfy varying complexity communication need piece
One style superior serve different purpose many thing life moderation key
Declarative programming picture imperative programming instruction painting picture
You writing declarative style Telling rather describing step computer take get want
When use XML data using declarative programming saying This person birthday street address
Some example declarative imperative programming get combined greater effect Windows Presentation Foundation us declarative XML syntax describe user interface look like relationship binding control underlying data structure
Structured configuration file use declarative syntax simple pair identify string value data mean
HTML mark text tag describe role piece text relation whole document
imagine excel page
With column populated formula calculate tax return
All logic done declared cell order calculation determine formula rather procedurally
That sort declarative programming
You declare problem space solution rather flow program
Prolog declarative language I use
It requires different kind thinking good learn expose something typical procedural programming language
Since I wrote prior answer I formulated declarative property quoted
I also defined imperative programming dual property
This definition superior one I provided prior answer succinct general
But may difficult grok implication incompleteness theorem applicable programming life general difficult human wrap mind around
The quoted explanation definition discus role functional programming play declarative programming
The declarative property weird obtuse difficult capture technically precise definition remains general ambiguous naive notion declare meaning semantics program without incurring unintended side effect
There inherent tension expression meaning avoidance unintended effect tension actually derives programming universe
It oversimplification technically imprecise often ambiguous define declarative imperative
An ambiguous case program output compiler
Evidently also analogously syntactical structure evaluation
operational semantics
This logically example analogous
Ponder contradictory weirdness quote
It also example demonstrates expression semantics provable bound thus ca prove program analogously semantics halt
Halting theorem
The incompleteness theorem derive fundamental nature universe stated Second Law Thermodynamics
independent possibility
The coding design program never alive attempt address real world need semantics real world always changing trending possibility
Humans never stop discovering new thing including error program
To precisely technically capture aforementioned desired notion within weird universe edge ponder
universe requires terse definition sound incorrect explained deeply
Definition The declarative property exist one possible set statement express specific modular semantic
The imperative property dual semantics inconsistent composition expressed variation set statement
This definition declarative distinctively semantic scope meaning requires modular semantic maintain consistent meaning regardless instantiated employed scope
Thus declarative modular semantic intrinsically orthogonal possible impossible due incompleteness theorem algorithm model witnessing consistency also point Robert Harper Professor Computer Science Carnegie Mellon University one designer Standard ML
Examples modular declarative semantics include category theory functors
nominal typing namespaces named field
operational level semantics pure functional programming
Thus well designed declarative language albeit loss generality expressed yet gain expressed intrinsic consistency
An example aforementioned definition set formula cell spreadsheet expected give meaning moved different column row cell
cell identifier changed
The cell identifier part superfluous intended meaning
So spreadsheet result unique
cell identifier set formula
The consistent modular semantic case use cell identifier input output function cell formula see
Hyper Text Markup Language
language static web example highly perfectly declarative language least HTML capability express dynamic behavior
HTML perhaps easiest language learn
For dynamic behavior imperative scripting language JavaScript usually combined HTML
HTML without JavaScript fit declarative definition nominal type
tag maintains consistent meaning composition within rule syntax
A competing definition declarative property semantic statement
statement reordered duplicated without changing meaning
For example statement assigning value named field reordered duplicated without changed meaning program name modular
implied order
Names sometimes imply order
cell identifier include column row moving total spreadsheet change meaning
Otherwise property implicitly require consistency semantics
It generally impossible design semantics statement remain consistent randomly ordered duplicated order duplication intrinsic semantics
For example statement construction destruction
If one considers random inconsistency endemical intended semantics one accepts definition general enough declarative property
In essence definition vacuous generalized definition attempt make consistency orthogonal semantics
defy fact universe semantics dynamically unbounded ca captured coherence paradigm
Requiring commutative idempotent property structural evaluation order operational semantics convert operational semantics declarative modular semantic
functional programming including recursion instead imperative loop
Then operational order implementation detail impact
spread consistency semantics
For example order evaluation theoretically also duplication spreadsheet formula matter output copied input output computed
analogous pure function
C Java C PHP JavaScript particularly declarative
Copute syntax Python syntax declaratively
consistent syntactical semantics eliminate extraneous one readily comprehend code forgotten
Copute Haskell enforce determinism operational semantics encourage DRY allow pure functional paradigm
Even prove semantics program
language Coq limited semantics expressed typing never capture semantics even language Turing complete
possible express inconsistent combination thus undefined semantics
Many explanation incorrectly claim imperative programming syntactically ordered statement
I clarified
For example order HTML statement reduce consistency meaning
Edit I posted Robert Harper blog functional programming range variation variable type Depending one distinguishes functional imperative programming imperative program also may type placing bound variability
The definition I currently appreciate functional programming function object type b preference recursion loop c pure
function impact desired semantics program memoized
The idempotent property pure function mean function call variable substituted value generally case argument imperative procedure
Pure function seem declarative
uncomposed state transition input result type
But composition pure function maintain consistency possible model global state imperative process pure functional programming language
Haskell IOMonad moreover entirely impossible prevent Turing complete pure functional programming language
As I seems similar consensus comment declarative programming attempt capture notion intended semantics never opaque
Examples opaque semantics dependence order dependence erasure semantics operational semantics layer
dependence variable value checked proved correct programming language
Thus I concluded complete language declarative
Thus one unambiguous distinct attribute declarative language could output proven obey enumerable set generative rule
For example specific HTML program ignoring difference way interpreter diverge scripted
Turing complete output variability enumerable
Or succinctly HTML program pure function variability
Ditto spreadsheet program pure function input variable
So seems declarative language antithesis
per second incompleteness theorem theorem ca proven
Lesie Lamport fairytale Euclid might worked around incompleteness theorem applied math proof programming language context congruence type logic correspondence etc
It method programming based around describing something instead describing work
In word write algorithm made expression layout want thing
Two good example HTML WPF
This Wikipedia article good overview I refined understanding declarative programming since Dec I provided question
Here follows current understanding
The long version understanding research detailed read gain deep understanding summary I provide
Imperative programming mutable state stored read thus ordering duplication program instruction alter behavior semantics program even cause bug
unintended behavior
In naive extreme sense I asserted prior answer declarative programming DP avoiding stored mutable state thus ordering duplication program instruction alter behavior semantics program
However extreme definition would useful real world since nearly every program involves stored mutable state
The conforms extreme definition DP entire program code run completion one static copy input state new state stored
Then state changed repeated
But real world program ca limited monolithic model state change
A useful definition DP ordering duplication programming instruction alter opaque semantics
In word hidden random change semantics occurring change program instruction order duplication cause intended transparent change program behavior
The next step would talk programming model paradigm aid DP question
Declarative Programming programming declaration
declarative sentence
Declarative sentence number property distinguish imperative sentence
In particular declaration A relevant point structural property orthogonal subject matter
Declarative
We declare represent constrain easily declare
Declarative programming significant impact abstract refactor code modularize subprogram much domain model
Often convert imperative declarative adding context

Turn left
wait Turn Right
Bob turn left intersection Foo Bar
Bob turn right intersection Bar Baz
Note latter case sentence idempotent commutative whereas former case rearranging repeating sentence would severely change meaning program
Regarding declaration add subtract
But constraint still add information precisely constraint information
If need declaration typical model explicit temporal semantics
ball flat ball flat time T
If two contradictory declaration inconsistent declarative system though might resolved introducing constraint priority probability etc
leveraging paraconsistent logic
In CSS used style HTML page want image element pixel high pixel wide simply declare want follows You consider CSS declarative style sheet language
The browser engine read CSS free make image appear tall wide however want
Different browser engine engine IE engine Chrome implement task differently
Their unique implementation course NOT written declarative language procedural one like Assembly C Java JavaScript Python
That code bunch step carried step step might include function call
It might thing like interpolate pixel value render screen
Describing computer want something
It may sound odd I add Excel spreadsheet really list declarative system
A good example given
I explain DP way express deduct engine usually working algorithm find goal
Declarative programming act programming language conform mental model developer rather operational model machine
The difference declarative imperative programming well illustrated problem parsing structured data
An imperative program would use mutually recursive function consume input generate data
A declarative program would express grammar defines structure data parsed
The difference two approach declarative program creates new language closely mapped mental model problem host language
As far I tell started used describe programming system like Prolog prolog supposedly declaring thing abstract way
It increasingly mean little definition given user
It clear gulf declarative programming Haskell declarative programming HTML
A couple example declarative programming Declarative programming nice help code might eventually scalable
For example let say function something element array list
Traditional code would look like No big deal
But use syntax instead define DoSomething Action
Then say way This course concise
But I sure concern saving two line code
Performance example
The old way processing done sequence
What method way signal could handle processing parallel automatically
Now sudden made code safe way changed one line code
And fact let
It depends submit answer text
Overall look programme certain view depends angle look problem
I get started programme Dim Bus Car Time Height As Integr Again depends problem overall
You might shorten due programme
Hope help need feedback
Thank You
asked viewed active site design logo Stack Exchange Inc user contribution licensed

