A measure property piece software specification
Since quantitative measurement essential science continuous effort computer science practitioner theoretician bring similar approach software development
The goal obtaining objective reproducible quantifiable measurement may numerous valuable application schedule budget planning cost estimation quality assurance testing software debugging software performance optimization optimal personnel task assignment
Common software measurement include As software development complex process high variance methodology objective difficult define measure software quality quantity determine valid concurrent measurement metric especially making prediction prior detail design
Another source difficulty debate determining metric matter mean
The practical utility measurement thus limited narrow domain include Common goal measurement may target one aspect balance indicator team motivation project performance
Some software development practitioner point simplistic measurement cause harm good
Others noted metric become integral part software development process
Impact measurement programmer psychology raised concern harmful effect performance due stress performance anxiety attempt cheat metric others find positive impact developer value towards work prevent undervalued
Some argue definition many measurement methodology imprecise consequently often unclear tool computing arrive particular result others argue imperfect quantification better none You control ca
Evidence show software metric widely used government agency US military NASA IT consultant academic institution commercial academic development estimation software

A standard measure degree system process posse property
Even metric measurement metric function measurement number obtained application metric often two term used synonym
Since quantitative measurement essential science continuous effort practitioner theoretician bring similar approach software development
The goal obtaining objective reproducible quantifiable measurement may numerous valuable application schedule budget planning cost estimation quality assurance testing software debugging software performance optimization optimal personnel task assignment
Common software measurement include As software development complex process high variance methodology objective difficult define measure software quality quantity determine valid concurrent measurement metric especially making prediction prior detail design
Another source difficulty debate determining metric matter mean
The practical utility software measurement therefore limited following domain A specific measurement may target one aspect balance example indicator team motivation project performance
Some software development practitioner point simplistic measurement cause harm good
Others noted metric become integral part software development process
Impact measurement programmer psychology raised concern harmful effect performance due stress performance anxiety attempt cheat metric others find positive impact developer value towards work prevent undervalued
Some argue definition many measurement methodology imprecise consequently often unclear tool computing arrive particular result others argue imperfect quantification better none You control ca
Evidence show software metric widely used government agency US military NASA IT consultant academic institution commercial academic

Jones control manager application vendor A large body literature appeared past three four decade developer measure various aspect software development use productivity programmer coding satisfaction ultimate end user applying business problem
Some metric broader others
In scientific measurement effort must balance sensitivity selectivity measure employed
Here primarily concerned quality software end product seen end user point view
Although much software metric technology used past applied downstream overall trend field push measurement method model back upstream design phase even measurement architecture
The issue measuring software performance quality clearly complexity compared even computer hardware run
Managing complexity finding significant surrogate indicator program complexity must go beyond merely estimating number line code program expected require
Historically software quality metric measurement exactly frequency software defect bug
The inference course quality software absence bug
So example measure error density per thousand line code discovered per year per release used
Lower value measure implied higher build release quality
For example density two bug per line code LOC discovered per year considered pretty good long way today Six Sigma goal
We start article reviewing leading historical quality model metric establish state art software metric today develop baseline build true set upstream quality metric robust software architecture
Perhaps point attempt settle definition well
Most leading writer topic define subject term assuming reader construct intuitive working definition metaphor computer architecture even earlier archetype building architecture
And course almost everyone
There universally accepted definition software architecture one seems promising proposed Shaw Garlan This definition follows straightforward inductive path building architecture system architecture computer architecture software architecture
As see key word software
Having chosen definition software architecture free talk measuring quality architecture ultimately implementation form running computer program
But first review classical software quality metric see must surrender establish new metric order software
Software quality multidimensional concept
The multiple professional view product quality may different popular nonspecialist view
Moreover level abstraction beyond even viewpoint developer user
Crosby among many others defined software quality conformance specification
However end user agree program perfectly implement flawed specification quality product
Of course talk software architecture talking design stage well upstream program specification
Years ago proposed generic definition quality
He said product must posse multiple element fitness use
Two parameter interest software product quality design quality conformance
These separate design implementation may even accommodate differing viewpoint developer user area
Two leading firm placed great deal importance software quality IBM
IBM measure user satisfaction eight dimension quality well overall user satisfaction capability functionality usability performance reliability installability maintainability documentation availability see Table
Some factor conflict support
For example usability performance may conflict may reliability capability performance capability
IBM user evaluation science
We recently participated IBM Middleware product study usability dimension
It five page question plus interview specialist consultant
Similarly us five Juran quality parameter functionality usability reliability performance serviceability
Other computer software vendor firm may use fewer quality parameter may even weight differently different kind software software different vertical market
Some firm focus process quality rather product quality
Although true flawed process unlikely produce quality product focus entirely software product quality architectural conception end use
IBM Measures User Satisfaction The Naval Air Systems Command coined term TQM describe approach quality improvement patterned management approach quality improvement
Since TQM taken many meaning across world
TQM methodology based teaching quality guru Philip Crosby Edwards Deming Armand Feigenbaum Kaoru Ishikawa Joseph Juran
Simply put management approach success attained focus customer satisfaction
This approach requires creation quality culture organization improve process product service
In many quality guru published specific method achieving TQM method applied government industry even research university
The Malcolm Baldrige Award United States ISO standard legacy TQM movement Software Engineering Institute SEI Capability Maturity Model CMM organizational maturity level represents highest level quality capability
In upgraded Capability Maturity Model Integration CMMI
The implementation TQM many variety four essential characteristic TQM approach follows Total Quality Management made enormous contribution development enterprise application software
Its introduction information technology initiative followed successful application manufacturing service industry
It came IT time redevelopment existing enterprise software
The effort one author introduce TQM internal administrative service sector research university encountered token resistance faculty oversight committee
They objected term total curious dogmatic ground nothing really total practice
As CIO attempted explain TQM faculty IT oversight committee University Pennsylvania name merely phrase identify commonly practiced worldwide methodology
But help much
However persevered new information architecture followed totally
reengineering administrative process using TQM measure
He also designed totally new information system meet university need world began higher education class enrolled student loan set
In IEEE published standard software quality metric methodology since defined led development field
Here begin summarizing standard
It intended systematic approach establishing quality requirement identifying implementing analyzing validating software quality metric software system development
It span development cycle five step shown Table
IEEE Software Quality Metrics Methodology A typical catalog metric current use discussed later
At point merely want present gestalt IEEE recommended methodology
In first step important establish direct metric value numerical target met final product
The factor measured may vary product product critical rank factor priority assign direct metric value quantitative requirement factor
There mystery point Voice Customer VOC Quality Function Deployment QFD mean available determine metric target value also prioritize
The second step identify software quality metric decomposing factor subfactors metric
For example direct final metric factor reliability could fault per line code KLOC target one fault per line code LOC
This level quality Sigma Six Sigma quality would fault per KLOC
For validated metric metric level value assigned achieved development
Table give IEEE suggested paradigm description metric set
IEEE Metric Set Description Paradigm To implement metric metric set chosen project design data collected must determined assumption flow data must clarified
Any tool employed defined organization involved described necessary training
It also wise point test metric known software refine use sensitivity accuracy cost employing
Analyzing metric help identify component developing system appear unacceptable quality present development bottleneck
Any component whose measured value deviate target value noncompliant
Validation metric continuous process spanning multiple project
If metric employed useful must accurately indicate whether quality requirement achieved likely achieved development
Furthermore metric must revalidated every time used
Confidence metric improve time usage experience gained

Until recently software quality metric many development organization nature
That designed track defect occurrence formal machine testing
These listed briefly historical importance replacing upstream quality measure metric supersede
usually highly correlated future defect rate field testing defect rate usually indicate high software complexity special development problem
Although may counterintuitive experience show higher defect rate testing indicate higher defect rate later use
If appear development manager set damage control scenario may apply correct quality problem testing becomes problem field
us defect removal effectiveness DRE metric
This simply defect removed development phase divided defect latent product time get result percentage
Because number latent defect yet known estimated defect removed phase plus defect found later
This metric best used code integration already well downstream development process unfortunately succeeding phase
This simple metric become widely used tool large application development
However ad hoc downstream nature naturally lead important metric include defect fix maintenance development process
Four new metric introduced measure quality software delivered These metric rocket science
The monthly BMI percent simply time number problem arrival month divided number problem closed month
Fix responsiveness mean time problem arrival close
If given problem turnaround time exceeds required standard response time declared delinquent
The percentage delinquent fix time number get fixed time divided number
Fix quality traditionally measured negatively lack quality
It number defective work properly situation worse caused yet problem
The real quality goal course zero defective fix
Computer system complex engineered system software make complex
A number approach taken calculate least estimate degree complexity
The simplest basis LOC count executable statement computer program
This metric began day assembly language programming still used today program written programming language
Most procedural language FORTRAN COBOL ALGOL typically produce six executable ML statement per language statement
language C Java produce three
Recent study show curvilinear relationship defect rate executable LOC
Defect density defect per KLOC appears decrease program size increase program module become large see Figure
Curiously result suggests may optimum program size leading lowest defect course programming language project size product type computing environment
Experience seems indicate small program defect rate defect per KLOC
Programs larger line code similar defect rate
Programs LOC defect rate near
This almost certainly effect complexity small tight program usually intrinsically complex
Programs larger LOC exhibit complexity size many piece
This situation improve Programming greater latitude least greater convenience choice component size procedural programming
As might expect interface coding although programming defect rate constant program size
The Relationship Between LOC Defect Density In Professor Maurice Halstead distinguished software science computer science describing programming process collecting arranging software token either operand operator
His measure follows He based set derivative measure primitive measure express total token vocabulary overall program length potential minimum volume programmed algorithm actual program volume bit program level complexity metric program difficulty among others
For example minimum volume represented function perform task entire program
mean number mental discrimination decision value estimated Halstead
When metric first announced software development thought Halstead violated Aristotle first law scientific inquiry Do employ rigor subject matter bear
But none could gainsay accuracy prediction quality result
In fact latter established software metric issue importance computer scientist established Professor Halstead founder field inquiry
The major criticism approach accurate metric program length dependent N N known sufficient accuracy program almost done
Halstead formula fall short direct quantitative measure fail predict program size quality sufficiently upstream development process
Also choice constant presumes unknown model human memory cognition unfortunately also constant depend program volume
Thus number fault depends program size later experience supported
The result shown Figure indicate number defect constant program size may rather take optimum value program LOC
Perhaps Halstead elaborate quantification fully represent incredible intuition gained long experience
About time Halstead founded software science McCabe proposed topological measure cyclomatic complexity measure number linearly independent path make computer program
To compute cyclomatic complexity program graphed formula used More simply turn M equal number binary decision program plus
An case statement would counted n
binary decision
The advantage measure additive program component module
Usage recommends single module value M greater
However average every fifth sixth program instruction executed branch M strongly correlate program size LOC
As early quality measure focus program per se even module mask true source architectural module
Later researcher proposed structure metric compensate deficiency quantifying program module interaction
For example metric analogous number input output hardware circuit module attempt fill gap
Similar metric include number subroutine call macro inclusion per module number design change module among others
Kan report extensive experimental testing metric also report module length important predictor defect rate number design change complexity level however computed
Quality metric based either directly indirectly counting line code program module unsatisfactory
These metric merely surrogate indicator number opportunity make error perspective program coded
More recently proposed meaningful cluster measurable code user rather programmer perspective
Function point also surrogate error opportunity
They represent user need anticipated application program rather programmer completion
A large program may million LOC application function point would large application system indeed
A may defined collection executable statement performs task together declaration formal parameter local variable manipulated statement
A typical function point metric developed Albrecht IBM weighted sum five component characterize application These represent average weighting factor may vary program size complexity
number component type application
The function count FC double sum The second step employ scale ass impact general system characteristic term likely effect application The score characteristic summed based following formula find value adjustment factor VAF Finally number function point obtained multiplying number function count value adjustment factor This actually highly simplified version commonly used method documented IFPUG
Although function point extrinsic counting metric method considered robust intrinsic LOC counting method appearance somewhat subjective experimental nature
As used time organization develop large software system function point show amazingly high degree repeatability utility
This probably enforce disciplined learning process software development organization much scientific credibility may posse

ÐÄÆ obj R stream x R Vh jæ ç ÈÏ cª MØ vì ÒKP endstream endobj obj endobj obj R R R endobj obj R R R R endobj obj R true R stream ÿØÿà JFIF ÿÛ Á ÿÄ ÿÄ H ÿÄ

LqÝ ÓË Ë q Äÿ Ë T lCÒ öÈI ÞiVævÐô

ñ Í eÑ gi ùÎÈ nÞq hÅÏ TZÑXÖ w ú

obj stream à ÛoË aRÛ QÛ
ÉyçÑáS þú üóê T L Ë AZ cT Èø
åÙb Ò ü Ç ºpMHF RÕU õ pÅ j PÊnZÖ J Y W ß ÉÔHýá íÝ ÖL ÞhOHÎK
JHæ Iy ßô h ò

In context refers two related distinct notion exist wherever defined business context Many aspect structural quality evaluated analysis software inner structure source code unit level technology level system level effect architecture adheres sound principle outlined paper topic OMG
But structural quality user others acting behalf interact software least prototype partial implementation even interaction mock version made cardboard represents dynamic test version considered prototype
Other aspect reliability might involve software also underlying hardware therefore assessed statically dynamically
Functional quality typically assessed dynamically also possible use static test
Historically structure classification terminology attribute metric applicable derived extracted subsequent ISO quality model also known SQuaRE
Based model CISQ defined five major desirable structural characteristic needed piece software provide Reliability Efficiency Security Maintainability adequate Size
Software quality measurement quantifies extent software program system rate along five dimension
An aggregated measure software quality computed qualitative quantitative scoring scheme mix weighting system reflecting priority
This view software quality positioned linear continuum supplemented analysis critical programming error specific circumstance lead catastrophic outage performance degradation make given system unsuitable use regardless rating based aggregated measurement
Such programming error found system level represent production issue whilst even far numerous programming error account le production issue
As consequence code quality without context whole system described limited value
To view explore analyze communicate software quality measurement concept technique provide visual interactive mean useful particular several software quality measure related component software system
For example represent specialized approach express combine information software development software quality system dynamic
A science mature measurement tool Louis Pasteur
Measuring software quality motivated least two reason However distinction measuring improving software quality embedded system emphasis risk management software quality business software emphasis cost maintainability management becoming somewhat irrelevant
Embedded system often include user interface designer much concerned issue affecting usability user productivity counterpart focus business application
The latter turn looking ERP CRM system corporate nervous system whose uptime performance vital enterprise
This convergence visible mobile computing user access ERP application depending quality software across type software layer
Both type software use technology stack complex architecture software quality analysis measurement managed comprehensive consistent manner decoupled software ultimate purpose use
In case engineer management need able make rational decision based measurement analysis adherence precept attributed others
There many different definition quality
For capability software product conform requirement
commented others synonymous customer value Highsmith even defect level
The first definition quality History remembers Shewhart beginning century Shewhart Kitchenham Pfleeger reporting teaching David Garvin identify five different perspective quality The problem inherent attempt define quality product almost product stated master Walter Shewhart
The difficulty defining quality translate future need user measurable characteristic product designed turned give satisfaction price user pay
This easy soon one feel fairly successful endeavor find need consumer changed competitor moved etc
Quality customer determination engineer determination marketing determination general management determination
It based customer actual experience product service measured requirement stated unstated conscious merely sensed technically operational entirely subjective always representing moving target competitive market
The word quality multiple meaning
Two meaning dominate use word
Quality consists product feature meet need customer thereby provide product satisfaction

Quality consists freedom deficiency
Nevertheless handbook convenient standardize short definition word quality fitness use
Even though quality perceptual conditional somewhat subjective attribute may understood differently different people noted article software structural quality characteristic clearly defined Consortium IT Software Quality CISQ
Under guidance framework CISQ first Director CISQ Distinguished Advisor CISQ defined five major desirable characteristic piece software needed provide
In model Whats need achieved Software functional quality defined conformance explicitly stated functional requirement identified example using analysis part toolkit documented level satisfaction experienced
The latter referred concerned intuitive responsive easily simple complex operation performed useful
Typically software testing practice tool ensure piece software behaves compliance original design planned user experience desired
piece software disposition support acceptance criterion
The dual dimension software quality consistent model proposed divide software characteristic two piece internal external quality characteristic
External quality characteristic part product face user internal quality characteristic
One challenge defining quality everyone feel understand could based extending various description concept quality used business
proposed product quality function much change world better
This interpreted meaning functional quality user satisfaction important structural quality determining software quality
Another definition coined Quality Software Management Systems Thinking Quality value person
This definition stress quality inherently people experience quality software differently
One strength definition question invite software team consider Who people want value software
What valuable
Although concept presented section applicable structural functional software quality measurement latter essentially performed testing see main article
Software quality measurement quantifying extent system software posse desirable characteristic
This performed qualitative quantitative mean mix
In case desirable characteristic set measurable attribute existence piece software system tend correlated associated characteristic
For example attribute associated portability number statement program
More precisely using approach measurable attribute hows need enforced enable whats Software Quality definition
The structure classification terminology attribute metric applicable software quality management derived extracted subsequent quality model
The main focus internal structural quality
Subcategories created handle specific area like business application architecture technical characteristic data access manipulation notion transaction
The dependence tree software quality characteristic measurable attribute represented diagram right characteristic matter user right owner business system depends measurable attribute left Correlations programming error production defect unveil basic code error account total error source code
These numerous issue eventually count defect production
Bad software engineering practice architecture level account total defect consume half effort spent fixing problem lead serious reliability security efficiency issue production
Many existing software measure count structural element application result parsing source code individual instruction Park token Halstead control structure McCabe object Chidamber Kemerer
Software quality measurement quantifying extent system software rate along dimension
The analysis performed using qualitative quantitative approach mix provide aggregate view using example weighted average reflect relative importance factor measured
This view software quality linear continuum supplemented identification discrete
These vulnerability may fail test case result bad practice specific circumstance lead catastrophic outage performance degradation security breach corrupted data myriad problem Nygard make given system de facto unsuitable use regardless rating based aggregated measurement
A example vulnerability repository vulnerability source code make application exposed security breach
The measurement critical application characteristic involves measuring structural attribute application architecture coding documentation displayed picture
Thus characteristic affected attribute numerous level abstraction application must included calculating characteristic measure valuable predictor quality outcome affect business
The layered approach calculating characteristic measure displayed figure first proposed Boehm colleague TRW Boehm approach taken ISO series standard
These attribute measured parsed result static analysis application source code
Even dynamic characteristic application reliability performance efficiency causal root static structure application
Structural quality analysis measurement performed analysis relationship principle standard together define conceptual logical architecture system
This distinct basic local code analysis typically performed mostly concerned implementation consideration crucial activity
The root cause poor reliability found combination good architectural coding practice
This detected measuring static quality attribute application
Assessing static attribute underlying application reliability provides estimate level business risk likelihood potential application failure defect application experience placed operation
Assessing reliability requires check least following software engineering best practice technical attribute Depending application architecture component used external library framework custom check defined along line drawn list best practice ensure better assessment reliability delivered software
As Reliability cause performance inefficiency often found violation good architectural coding practice detected measuring static quality attribute application
These static attribute predict potential operational performance bottleneck future scalability problem especially application requiring high execution speed handling complex algorithm huge volume data
Assessing performance efficiency requires checking least following software engineering best practice technical attribute Most security vulnerability result poor coding architectural practice SQL injection scripting
These well documented list maintained CWE Emergency Center Carnegie Mellon University
Assessing security requires least checking following software engineering best practice technical attribute Maintainability includes concept modularity understandability changeability testability reusability transferability one development team another
These take form critical issue code level
Rather poor maintainability typically result thousand minor violation best practice documentation complexity avoidance strategy basic programming practice make difference clean code unorganized code
Assessing maintainability requires checking following software engineering best practice technical attribute Maintainability closely related Ward Cunningham concept expression cost resulting lack maintainability
Reasons maintainability low classified reckless prudent deliberate inadvertent often origin developer inability lack time goal carelessness discrepancy creation cost benefit documentation particular maintainable
Measuring software size requires whole source code correctly gathered including database structure script data manipulation source code component header configuration file etc
There essentially two type software size measured technical size footprint functional size The function point analysis sizing standard supported International Function Point Users Group IFPUG
It applied early software development dependent line code like somewhat inaccurate Backfiring method
The method technology agnostic used comparative analysis across organization across industry
Since inception Function Point Analysis several variation evolved family functional sizing technique broadened include sizing measure COSMIC NESMA Use Case Points FP Lite Early Quick FPs recently Story Points
However Function Points history statistical accuracy used common unit work measurement numerous application development management ADM outsourcing engagement serving currency service delivered performance measured
One common limitation Function Point methodology manual process therefore costly large scale initiative application development outsourcing engagement
This negative aspect applying methodology may motivated industry IT leader form Consortium IT Software Quality focused introducing computable metric standard automating measuring software size IFPUG keep promoting manual approach activity rely FP counter certification
CISQ announced availability first metric standard Automated Function Points CISQ membership CISQ Technical
These recommendation developed OMG Request Comment format submitted OMG process standardization
Critical Programming Errors specific architectural coding bad practice result highest immediate long term business disruption risk
These quite often depend heavily context business objective risk
Some may consider respect naming convention others preparing ground knowledge transfer example consider absolutely critical
Critical Programming Errors also classified per CISQ Characteristics
Basic example Newer proposal quality model Quamoco propagate direct integration definition quality attribute measurement
By breaking quality attribute even defining additional layer complex abstract quality attribute reliability maintainability become manageable measurable
Those quality model applied industrial context received widespread adoption

âãÏÓ obj stream b c Ï æ ºn Ã Ð LhrÒîJ ìØÚ rxÎ
SNL I ÔôÃ ÌÁæÃp r E Ó ç endstream endobj obj R R endobj obj stream ðì AfdÓ Ns
ß c

âãÏÓ obj endobj xref n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n trailer startxref EOF obj stream xÚb

The Better Way Manage Quality Risk Compliance Intelex Quality Management Software application help easily manage aspect organization quality program
Our software solution work together seamlessly manage track report quality metric ensure product quality facilitate compliance ISO
Get tool ensure compliance drive performance transform organization leader Quality
Available application include Improve efficiency effectiveness quality management software key application Store document secure online repository control user access track version revision ensure accurate document used
Report track react defect quality nonconformance within operation
Launch investigation assign CAPAs mitigate risk
Register vendor searchable supplier inventory conduct performance assessment assign supplier rating implement supplier CAPAs track completion result
Schedule track report employee training automatic email notification
Maintain auditable record employee qualification license certification
Store manage customer record evaluate assign customer performance rating log customer complaint track action
Manage audit related activity data process across business
Schedule audit create checklist identify NCRs launch CAPAs
Intelex Quality Management Software System directly address requirement ISO standard provides complete solution organization looking acquire certification maintain continual compliance
In addition core quality management software application Intelex provides application manage Permits Licenses Monitoring Measurement Operational Control Emergency Response Legal Requirements Quality Policy essential ISO compliance
The powerful EHSQ platform market
The Intelex Platform provides robust secure backbone entire Intelex system provides core management system functionality upon Intelex solution built
The Intelex Platform come complete following component standard every implementation Store document secure centralized repository control user access track version revision ensure accurate document used
Access Intelex system smartphone tablet
No shrunken screen get unique mobile experience Intelex solution put full power Intelex system hand every user
Offline capability allow remote unconnected user capture data sync regain connectivity
Drive continuous improvement using variety methodology including standard checklist fishbone Ishikawa diagram WHY gap analysis
Maintain complete history record created modified maintained archived retrieved transmitted
Log local date time user compliance FDA CFR Part
Schedule meeting send automated notification attendee record track attendance assign track completion follow task
Maintain record meeting associated document
Seamlessly communicate third party system application push pull data one database
Reduce redundancy allow depth data analysis
Map data Excel spreadsheet directly field within Intelex system import
Import historical data update data existing record system
Connect EHSQ Professionals around world network collaborate share knowledge expertise
Access thought leadership insight best practice resource regulatory change
Record track relevant internal external communication
Share information follow activity increase efficiency effectiveness communication process
Gain degree visibility get EHSQ data comprehensive BI platform
Reports dashboard data slicer benchmarking provide powerful tool enable organization make smarter decision create culture continual improvement drive operational excellence
Tailor Intelex system support multiple geographic location configure primary language location division across organization
Apply secondary password prompt critical action
Enable permitted user complete action ensure accordance FDA CFR Part
Seamlessly guide user Intelex system configurable tip walkthroughs drive user adoption improve data quality deliver value investment
Enhance data visuals
Upload image associate coordinate record object type
Example Upload body map image allow user identify area injury occurred
Ensure seamless experience single capability
Users require single set credential order access area Intelex system
Get online phone tech support system issue
Access comprehensive library product documentation support material learning tool within system
We chose Intelex believe software adapt company rather company adapting software
We needed obtain ISO Quality Management System certification chose Intelex QMS system functionality ease integration
Their technical support enabled fast deployment usage system helping u reach goal
The Intelex QMS customer support helped u build superefficient extremely effective Quality System process help organization move forward faster pace
Intelex taken question concern heart andhelped customize system work u
Quality management like The First detective show must gather data fast possible speed essence detail lost
Intelex Quality Management System improved efficiency tenfold
Combine management side software configurability platform able streamline process well develop tailor application suit highly specific need
The friendly professional approach adopted Intelex Account Managers second none
We chose Intelex believe software adapt company rather company adapting software
The knowledge expertise team member Intelex extremely valuable made process much Intelex management system optimize business performance enable regulatory compliance streamline ISO initiative
Follow u Technologies
Intelex owned Intelex Technologies protected Canadian Copyright Laws International Treaty Provision applicable law

