Technical debt concept programming reflects extra development work arises code easy implement short run used instead applying best overall solution
Technical debt commonly associated extreme programming especially context refactoring
That implies restructuring existing code refactoring required part development process
Under line thinking refactoring result poorly written code also done based evolving understanding problem best way solve problem
Technical debt may also known design debt
The term coined Ward Cunningham programmer also known developing first debt metaphor equates software development financial debt
Imagine project two potential option
One quick easy require modification future
The better design take time implement
In development releasing code quick easy approach like incurring debt come obligation interest technical debt come form extra work future
Taking time refactor equivalent paying principal
While take time short run also decrease future interest payment
Ward Cunningham describes concept follows The concept mean debt never incurred
Just leverage help company used correctly quick solution mean faster time market software development
In addition technical debt poor code
Bad code bad code technical debt result work good programmer unrealistic project constraint
Techopedia Terms Copyright Techopedia

University British Columbia Vancouver Software Engineering Institute Software Engineering Institute pp
The metaphor technical debt software development introduced two decade ago Ward Cunningham explain nontechnical product stakeholder need call refactoring
It refined expanded since notably Steve McConnell taxonomy Martin Fowler four quadrant Jim Highsmith colleague Cutter Consortium model impact technical debt total cost ownership
From original quite right code postpone making right people used metaphor technical debt describe many kind debt ill software development encompassing broadly anything stand way deploying selling evolving software system anything add friction software development endeavor suffer test debt people debt architectural debt requirement debt documentation debt amorphous software debt
Consequently concept technical debt software development become somewhat diluted lately
Is new requirement function feature yet implemented requirement debt
Do call postponing development new function planning debt
The metaphor losing strength
Furthermore identify tool static code analyzer assist u identifying technical debt danger equating whatever tool detect
This approach lead leaving aside large amount potential technical debt undetectable tool structural architectural debt technological gap
Gaps technology particular interest debt incurred result made wrong choice originally rather result context passing choice quite right retrospect
Technical debt case due external event technological obsolescence change environment rapid commercial success advent new better technology word invisible aspect natural software aging evolution
You could even argue gold plating architectural design making system flexible adaptable actually need form technical debt added flexibility hinders future development without actually exploited
To make progress need go beyond debt rhetorical concept
We need better definition constitutes technical debt perspective viewpoint let u reason across wide range technical debt
In short need theoretical foundation
Figure show possible organization technical debt rather software improvement given state
We distinguish visible element new functionality add defect fix invisible element rather visible software developer
We see left dealing primarily evolution challenge whereas right dealing quality issue internal external
We propose limit debt invisible element rectangular box including invisible aspect evolution quality
The technical debt landscape
On left evolution challenge right quality issue internal external
Most author agree major cause technical debt schedule pressure
However right side picture debt associated quality maintainability issue cause become probable carelessness lack education poor process nonsystematic verification quality basic incompetence
Because use iterative development process many agile team seem believe completely immune technical debt
Although iteration offer opportunity reimburse debt timely fashion opposite often occurs
Developing delivering rapidly time proper design reflect longer term lack rigor systematic testing including automated testing lead agile project massive amount debt rapidly
In fact debt mount much quickly project
But end matter choice time market essential debt might actually good investment imperative remain aware debt increased friction impose development team Cunningham suggested
So tackle technical debt least avoid accumulating much
The first step awareness identifying debt cause
The next step manage debt explicitly involves listing task common backlog release iteration planning along thing
Figure illustrates element might organized backlog
The element area color reconcile four type possible task attend future increase value adding new feature green investing architecture yellow reduce negative effect value defect red technical debt black
Four color backlog
The element area reconcile four type possible task attend future increase value adding new feature green investing architecture yellow reduce negative effect value defect red technical debt black
Project backlog often contain green element technical practitioner keep mind yellow element
The red element appear elsewhere perhaps defect database black element nowhere found increasingly cripple development reducing velocity
It important keep mind however technical debt code code quality
Code analysis tool identify small number black element
Therefore code analysis tool sufficient identifying technical debt often technical debt related code intrinsic quality structural architectural choice technological gap
No tool reveal two year ago team used tool internationalize localize code
Architecture play significant role development large system together development activity documentation testing often lacking
These activity add significantly debt thus part technical debt landscape Figure
Code analysis tackle right side box
Professionalism diligence dedication craftsmanship certainly help key determinant reducing technical debt
Kevin Sullivan suggested simple model tackling technical debt represents software development endeavor sequence change improvement
At given point time past set change defines current state software
Some past change event triggered current debt change way implemented quite right current perspective
The main issue facing software development organization decide future change What evolution software system undergo sequence
This evolution case constrained cost resource available apply making change likely driven value viewed external stakeholder
The process sequence change apply could main reconciling point across whole landscape shown Figure adding new feature adapting new technology fixing defect improving quality intrinsic extrinsic
Because decision process balancing cost value perhaps economic financial model could become unifying concept behind whole landscape
A already explored degree These four model discussed recent ICSE workshop technical debt one NPV offering promise better formalized opportunity cost simpler le proprietary TCO ROA seen probabilistic extension NPV
TCO present danger mentioned earlier diluting technical debt introducing element related software development deployment operation support
Technical debt treated isolation adding new functionality fixing defect even though included definition debt presented
The challenge expressing software development activity term sequence change associated cost value time
These change independent unfortunately
Their interdependency play big Mark Denne Jane shown particular visible feature depend le visible architectural aspect
In new perspective system technical debt given point time could defined deferred investment opportunity poorly managed risk
This installment give reader different illustration multifaceted concept technical debt
Erin Lim Nitin Taksante Carolyn Seaman went industry check software developer actually conceptualize perceive experience manage technical debt
They report result A Balancing Act What Software Practitioners Have Say Technical Debt
Their analysis describes large complex trade space stakeholder concern strategy keep balance
Raja Bavani complement view trench interview two agile expert Johanna Rothman Lisa Crispin Distributed Teams Agile Testing Technical Debt
He go offer taxonomy technical debt relates testing
Bill Curtis Jay Sappidi Alexandra Szynkarski explore viability estimation framework detecting technical debt using data
They use code analysis toolkit developed CAST Software identify technical debt large system based structural quality data literally put price Estimating Principal Application Technical Debt
As alternative Letouzey Michel Ilkiewicz describe Managing Technical Debt SQALE Method
The SQALE approach based analysis application source code using indicator quality attribute defined ISO system software quality standard testability maintainability portability narrow point focus
Have outgrown financial debt metaphor
Does still work
Do misuse
Israel Gat Christof Ebert disagree topic article
We hope keep debt metaphor useful confining really invisible result past decision software negatively affect extending concept anything cost
From practical perspective hope see tool method identify manage debt covering element landscape
From theoretical standpoint see model emerging likely rooted financial theory NPV better measurement reasoning form debt take place wider context software evolution software improvement
Many thanks participant International Workshop Technical Debt ICSE ZÃ¼rich reviewer Len Bass Raghvinder Sangwan
This material based upon work funded supported US Department Defense contract number Carnegie Mellon University operation Software Engineering Institute federally funded research development center
This material approved public release unlimited distribution

Also known Design Debt accumulated rework necessary correct recover deviation current design system versus minimally complex yet sufficiently complete ensure correctness consistency timely delivery
This effort show linear growth time system becomes bigger complex
Technical debt total expense organization pay due inadequate architecture software development process within current codebase
Also known code debt concept defines cost work need done job actually complete
If debt resolved continues accumulate interest thus making troublesome implement future change
For example organization need make change codebase specific application particular modification requires change made portion codebase
The additional uncompleted change considered technical debt incur interest make process building project cumbersome
How much technical debt company currently controlled
Several factor make increasingly harder manage update codebase including complexity architecture current development practice
The common expense contributor Aggressive release date cause change overlooked put hold often result decision making without weighing implication
Additionally function create inflexible application impossible update within schedule
Poorly documented code insufficient testing minimal communication increase technical debt team must spend time finding fixing issue post release
Each contributor increase total business cost creates continuously growing expense factor organization
Analysis solution provide method measuring code debt based existing structural quality problem put organization risk
Technical debt analysis involves use defined metric identify problem area current codebase resulting increased cost
This information help determining item addressed order decrease maintenance cost heighten productivity keep software risk minimal within organization
CAST Application Intelligence Platform AIP measurement solution technical debt management may used CAST AIP make easy recognize source extensive technical debt providing necessary information identify contributing problem source code level
Technical debt metric aid assessment current cost contributor reduce expense
With AIP organization able increase structural quality boost application performance enhance infrastructure security
Copyright CAST All Rights Reserved

Ã¢Ã£ÃÃ obj endobj obj stream hÃbbd Âº Y Ã endstream endobj startxref EOF obj stream hÃb Ã Ã¸ ÃÃ endstream endobj obj endobj obj endobj obj stream YÃ¿ r uF l UWÃÂµÃ¯ Âª Ã¶Ã Ã  endstream endobj obj stream Ã¯iÃ¯ Ã¶ iÃ¾dÃÃ©kMÃ HÃÃÃ§ Ã aÃf Ã¨ Ã©
Ã¤ endstream endobj obj stream TY P QVÃÃ³ Ã®Ã Ã»Ã¶Ã Ã ÃºÃµÃ«Ã
Ã©
Q Ã» e XnnÃ®Ã¼Ã¹Ã³
Ã³ Ã¼ Z Ã±
bÂº ZÃ¼
XXH Ã¶ vmbÃ²
BQ
O N Mhh ÃºU V Ã¸Ã Ã³Ã w

Stack Exchange network consists Q A community including largest trusted online community developer learn share knowledge build career
Technical debt metaphor eventual consequence poor software architecture software development within codebase
question tagged site design logo Stack Exchange Inc user contribution licensed

Ã¢Ã£ÃÃ obj endobj obj

also known concept reflects implied cost additional rework caused choosing easy solution instead using better approach would take longer
Technical debt compared monetary
If technical debt repaid accumulate making harder implement change later
Unaddressed technical debt increase
Technical debt necessarily bad thing sometimes technical debt required move project forward
On hand expert claim technical debt metaphor tends minimize impact result insufficient prioritization necessary work correct
As change started codebase often need make coordinated change time part codebase documentation
Required change completed considered debt must paid point future
Just like financial debt uncompleted change incur interest top interest making cumbersome build project
Although term used software development primarily also applied profession
Common cause technical debt include combination It useful differentiate type technical debt
In discussion blog Technical Debt Quadrant Fowler distinguishes four debt type based two dichotomous category first category second
Interest payment caused necessary local maintenance absence maintenance user project
Ongoing development project increase cost paying debt future
One pay debt simply completing uncompleted work
The buildup technical debt major cause project miss deadline
It difficult estimate exactly much work necessary pay debt
For change initiated uncertain amount uncompleted work committed project
The deadline missed project realizes uncompleted work debt time complete
To predictable release schedule development team limit amount work progress order keep amount uncompleted work debt small time
If enough work completed project present barrier submission project released still carry substantial amount technical debt
If software reach production risk implementing future refactors might address technical debt increase dramatically
Modifying production code carry risk outage actual financial loss possibly legal repercussion contract involve agreement SLA
For reason view carrying technical debt production almost time decrease deployment turned retired
As evolving program continually changed complexity reflecting deteriorating structure increase unless work done maintain reduce
While Law already indicated evolving program continually add complexity deteriorating structure unless work done maintain first drew comparison technical complexity experience report Shipping first time code like going debt
A little debt speed development long paid back promptly rewrite
The danger occurs debt repaid
Every minute spent code count debt
Entire engineering organization brought debt load unconsolidated implementation otherwise
In text present comparable argument concerning cost associated architectural negligence describes design debt
Activities might postponed include writing attending tackling compiler warning
Other instance technical debt include knowledge shared around organization code confusing modified easily
compare evolving city similar evolving system lack refactoring lead technical debt
The concept technical debt central understanding force weigh upon system often explains system stressed
In city repair infrastructure often delayed incremental change made rather bold one
So system
Users suffer consequence capricious complexity delayed improvement insufficient incremental change developer evolve system suffer sling arrow never able write quality code always trying catch
In postponing sending local change upstream project technical debt

