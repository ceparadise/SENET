Many support
For instance type subtype expression type used wherever expression type used
refers subtyping complex type relates subtyping component
For example list relate list
Or function returning relate function returning
Depending variance subtyping relation simple type may either preserved reversed ignored respective complex type
In programming language example list Cat subtype list Animal list constructor
Meaning subtyping relation simple type preserved complex type
While function Animal String subtype function Cat String function type constructor argument type
Here subtyping relation simple type reversed complex type
A programming language designer consider variance devising typing rule language feature array inheritance generic datatypes
By making type constructor covariant contravariant instead invariant program accepted
On hand programmer often find contravariance unintuitive accurately tracking variance avoid runtime type error lead complex typing rule
In order keep type system simple allow useful program language may treat type constructor invariant even would safe consider variant treat covariant even though could violate type safety
Within typing rule type constructor The article considers applies common type constructor
For example subtype The variance C generic interface declared placing covariant contravariant attribute zero type parameter
For type parameter compiler conclusively verifies violation fatal use globally consistent
The interface declared
Types one type parameter may specify different variance type parameter
For example delegate type represents function input parameter type return value type
The ensure type safety
For example represents function expecting argument type function handle type animal always used instead one handle cat
data type source covariant data type sink contravariant
Mutable data type act source sink invariant
To illustrate general phenomenon consider
For type make type array animal
For purpose example array support reading writing element
We option treat either If wish avoid type error third choice safe
Clearly every treated since client reading array expect may contain

So contravariant rule safe
Conversely treated
It always possible put
With covariant array guaranteed safe since backing store might actually array cat
So covariant rule also array constructor
Note issue mutable array covariant rule safe immutable array
Early version Java C include generic also termed
In setting making array invariant rule useful polymorphic program
For example consider writing function shuffle array function test two array equality using
method element
The implementation depend exact type element stored array possible write single function work type array
It easy implement function type However array type treated invariant would possible call function array exactly type
One could example shuffle array string
Therefore Java C treat array type covariantly
For instance Java subtype C subtype
As discussed covariant array lead problem writes array
Java C deal marking array object type created
Each time value stored array execution environment check type value equal type array
If mismatch Java C thrown In example one array b safely
It trying array lead trouble
One drawback approach leaf possibility error stricter type system could caught
Also hurt performance write array requires additional check
With addition generic Java C offer way write kind polymorphic function without relying covariance
The array comparison shuffling function given parameterized type Alternatively enforce C method access collection way one use interface instead passing array
Languages like function expecting Cat returning Animal written syntax syntax
Those language also need specify one function type subtype safe use function one type context expects function different type
It safe substitute function function accepts general type argument return specific type
For example given function type function type used wherever expected One compare communication liberal accept conservative produce
The general rule In word type constructor
This rule first stated formally popularized paper
When dealing rule applied several time
For example applying rule twice see
In word type A position
For complicated type confusing mentally trace given type specialization easy calculate position contravariant position covariant left side even number arrow applying
When subclass method superclass compiler must check overriding method right type
While language require type exactly match type superclass invariance also type safe allow overriding method better type
By usual subtyping rule function type mean overriding method return specific type return type covariance accept general argument argument type contravariance
In notation possibility follows Subtyping type method

The signature overriding method unchanged

The subtyping relation direction relation ClassA ClassB

The subtyping relation opposite direction relation ClassA ClassB

Not type safe
For concrete example suppose writing class model
We assume subclass base class using Java syntax Now question subclass type allowed give
In language allows covariant return type derived class override method return specific type Among mainstream OO language support covariant return type
Adding covariant return type one first modification language approved standard committee also support covariant return type
Similarly type safe allow overriding method accept general argument method base class Not many language actually allow
Java would interpret unrelated method name
However supported covariance contravariance
Calling convention overridden method covariant argument return value contravariant normal argument mode
Uniquely among mainstream language allows argument overriding method specific type method superclass argument type covariance
Thus Eiffel version following code would type check overriding method base class This type safe
By one try place dog cat shelter
That meet argument restriction result runtime error
The lack type safety known catcall problem Eiffel community issue
Over year various combination global static analysis local static analysis new language feature proposed remedy implemented Eiffel compiler
Despite type safety problem Eiffel designer consider covariant argument type crucial modeling real world requirement
The cat shelter illustrates common phenomenon animal shelter seems reasonable use inheritance restricted argument type model
In proposing use inheritance Eiffel designer reject state object subclass always le restricted object superclass
One instance mainstream language allowing covariance method argument PHP regard class constructor
In following example method accepted despite method argument covariant parent method argument
Were method anything error would occur Another example covariant argument seem helpful binary method
method argument expected type object method called
An example method check whether come ordering way compare say two rational number different way compare two string
Other common example binary method include equality test arithmetic operation set operation like subset union
In older version Java comparison method specified interface The drawback method specified take argument type
A typical implementation would first argument throwing error expected type In language covariant argument argument compareTo could directly given desired type hiding typecast
Of course would still give runtime error called

Other language feature provide apparent benefit covariant argument preserving Liskov substitutability
In language
previous example written way
Instead defining define parameterized class
One drawback implementer base class need foresee type need specialized subclass
Similarly recent version Java interface parameterized allows downcast omitted way Another language feature help
One reason binary method awkward write call like selecting correct implementation really depends runtime type conventional OO language runtime type taken account
In language CLOS comparison method could written generic function argument used method selection
Giuseppe Castagna observed typed language multiple dispatch generic function argument control dispatch argument
Because method selection rule chooses specific applicable method method override another method overriding method specific type controlling argument
On hand ensure type safety language still must require argument least general
Using previous terminology type used runtime method selection covariant type used runtime method selection method contravariant
Conventional language like Java also obey rule one argument used method selection receiver object passed along method hidden argument indeed type specialized inside overriding method superclass
Castagna suggests example covariant argument type superior particularly binary method handled using multiple dispatch naturally covariant
However programming language support multiple dispatch
The following table summarizes rule overriding method language discussed
In programming language support generic
programmer extend type system new constructor
For example C interface like make possible construct new type like
The question arises variance type constructor
There two main approach
In language programmer annotates definition generic type intended variance type parameter
With programmer instead annotates place generic type instantiated
The popular language variance annotation using keywords using keywords
C allows variance annotation interface type Scala OCaml allows interface type concrete data type
In C type parameter generic interface marked covariant contravariant invariant annotation
For example define interface iterators declare covariant type parameter
With declaration treated covariant type argument
subtype
The typechecker enforces method declaration interface mention type parameter way consistent annotation
That parameter declared covariant must occur contravariant position position contravariant occurs odd number contravariant type constructor
The precise rule return type method interface must method argument type must defined follows As example rule apply consider interface
The argument type must valid contravariantly
type parameter must tagged
Similarly result type must valid covariantly
since covariant interface type must valid covariantly
type parameter must tagged
This show interface allowed marked either contravariant
In common case generic data structure restriction mean parameter used method getting data structure parameter used method putting data structure hence choice keywords
C allows variance annotation parameter interface parameter class
Because field C class always mutable variantly parameterized class C would useful
But language emphasize immutable data make good use covariant data type
For example immutable list type covariant subtype
Scala rule checking variance annotation essentially C
However idiom apply immutable datastructures particular
They illustrated following excerpt definition class
First class member variant type must immutable
Here type declared covariant indeed declared method
Trying declare mutable field would rejected type error
Second even data structure immutable often method parameter type occurs contravariantly
For example consider method add element front list
The implementation work creating new object class nonempty list
The obvious type give would However would type error covariant parameter appears contravariant position function argument
But trick get around problem
We give general type allows adding element type long supertype
Note relies covariant since type treat type
At first glance may obvious generalized type sound programmer start simpler type declaration type error point place need generalized
It possible design type system compiler automatically infers best possible variance annotation datatype parameter
However analysis get complex several reason
First analysis nonlocal since variance interface depends variance interface mention
Second order get unique best solution type system must allow parameter simultaneously contravariant
And finally variance type parameter arguably deliberate choice designer interface something happens
For reason language little variance inference
C Scala infer variance annotation
OCaml infer variance parameterized concrete datatypes programmer must explicitly specify variance abstract type interface
For example consider OCaml datatype wrap function The compiler automatically infer contravariant first parameter covariant second
The programmer also provide explicit annotation compiler check satisfied
Thus following declaration equivalent previous one Explicit annotation OCaml become useful specifying interface
For example standard library interface association table include annotation saying map type constructor covariant result type
This ensures
subtype
One drawback approach many interface type must made invariant
For example saw needed invariant contained
In order expose variance API designer could provide additional interface provide subset available method
list provides
However quickly becomes unwieldy
variance annotation aim give user class opportunity subtyping without requiring designer class define multiple interface different variance
Instead time class interface used type declaration programmer indicate subset method used
In effect definition class also make available interface covariant contravariant class
Therefore designer class longer need take variance account increasing
Java provides variance annotation restricted form
A parameterized type instantiated wildcard together upper lower bound

A unbounded wildcard like equivalent
Such type represents unknown type satisfies bound
For example type typechecker accept type known subtype rejected type error since necessarily
In general given interface reference forbids using method interface occurs contravariantly type method
Conversely type one could call
While plain generic type Java invariant
subtyping relationship wildcard type made specific specifying tighter bound example subtype
This show wildcard type also
In total given wildcard type like three way form subtype specializing class specifying tighter bound replacing wildcard specific type see figure
By combining two step subtyping therefore possible
pas argument type method expecting
This exactly kind program covariant interface type allow
The type act interface type containing covariant method implementer define ahead time
This variance
In common case generic data structure covariant parameter used method getting data structure contravariant parameter method putting data structure
The mnemonic Producer Extends Consumer Super PECS book give easy way remember use covariance contravariance
Wildcards flexible drawback
While variance mean API designer need consider variance type parameter interface must often instead use complicated method signature
A common example involves interface
Suppose want write function find biggest element collection
The element need implement method first try might However type general find max
The problem implement instead better interface
In Java unlike C considered subtype
Instead type modified The bounded wildcard conveys information call contravariant method interface
This particular example frustrating method contravariant condition trivially true
A system could handle example le clutter annotating definition
variance annotation provide additional flexibility allowing program
However criticized complexity add language leading complicated type signature error message
One way ass whether extra flexibility useful see used existing program
A survey large set Java library found wildcard annotation could directly replaced annotation
Thus remaining indication place Java benefit system available
In language library must either expose le variance define interface
For example Scala Collections library defines three separate interface class employ covariance covariant base interface containing common method invariant mutable version add method covariant immutable version may specialize inherited implementation exploit structural sharing
This design work well annotation large number interface carry complexity cost client library
And modifying library interface may particular one goal adding generic Java maintain binary backwards compatibility
On hand Java wildcards complex
In conference presentation criticized hard understand use stating adding support simply afford another
Early version Scala used variance annotation programmer found difficult use practice annotation found helpful designing class
Later version Scala added existential type wildcards however according need interoperability Java would probably included
Ross Tate argues part complexity Java wildcards due decision encode variance using form existential type
The original proposal used syntax variance annotation writing instead Java verbose
Since wildcards form existential type used thing variance
A type like type list let object passed method stored field without exactly specifying type parameter
This particularly valuable class method mention type parameter
However existential type difficult problem
For compiler implementer Java wildcards raise issue type checker termination type argument inference ambiguous program
In general whether Java program using generic type checker go infinite loop time program
For programmer lead complicated type error message
Java typechecks wildcard type replacing wildcards fresh type variable
This make error message harder read refer type variable programmer directly write
For example trying add give error like Since annotation useful type system provide
These term come notion
Consider category whose object type whose morphisms represent subtype relationship
This example partially ordered set considered category
Then example function type constructor take two type creates new type take object object
By subtyping rule function type operation revers first argument preserve second contravariant functor first argument covariant functor second

Programming computer science particular tendency use people jargon
Often make thing seem difficult
You may heard covariance contravariance wondered
If want simple explanation applies computer language
Covariance contravariance term used different way theory programming sound advanced difficult fact idea encapsulate simple
It idea seems originate physic fact mathematical concept
Let find
Covariance contravariance occur mathematics vector space differential geometry
They derive general idea based observing happens make change result usually go direction change
covariant sometimes go direction
contravariant
The elementary example I find co contra behavior simple mathematical function
A function input output behave differently try change
For example suppose function first let see happens function add constant x
You think defining new function F x
If draw graph function sin easily see effect move graph unit
That x translated unit function translated unit
The function move opposite direction x say contravariant x
The reason happens simply add x function value x
f x longer produced enter x produce f
The value produced x
f x produced x set f f x
Thus shifting x move function value
Now consider adding constant function
You see given sin x move graph function unit
The function move direction constant say covariant
The reason much easier see transformation applied function
F x x new function old function moved
In general change input thing tend move function opposite way contravariant change output move say way covariant
This idea come turn modification sort place seem much sophisticated simple example case contravariant change make result opposite change considering covariance result change
Note physic skip next section
If encounter use contravariance covariance say physic math might obvious difference related change input contravariant output covariant dig deep enough find exactly
For example contravariant vector normal standard vector change say scale ax change opposite direction
The rule work general transformation basis vector much easier understand first restrict attention simple change scale
For example vector ax marked meter becomes reduce scale centimeter long long
Notice scale axis meter centimeter vector change factor
Thus standard vector contravariant respect change basis
The complicated case dual vector functional thing work opposite way dual vector function
If x vector dual vector xy x notation varies lot numeric value
To get numeric value simply multiple vector corresponding coordinate dual sum
That vector b dual c b
c This usually called scalar inner product
In word dual vector linear function map standard vector number
Now consider effect changing scale ax used dual vector
If multiply scale dual c becomes dual vector give result c transformation applied vector
For example b c transformation transformation b hence dual vector produce result
As dual function changed covariantly change basis
It wonderful result change basis vector dual vector way
scaling one contravariant covariant scalar product invariant
But return programming
The common use term contravariance covariance programming come mean something little specific physic math still often related input output function let look common usage first
The whole idea relates hierarchy type
If type B derived type A inherits A put another way A base class B contains every method property type A
In sense type B bigger type A
You see type system provides way ordering class
Notice class branch type hierarchy class compared way
partial ordering
The idea B way bigger A important idea
Unfortunately long case use le symbol show type derived another type perhaps wrong way round
That write A B A higher type hierarchy B word B derived A
If B derives A A B B inherits contains everything A offer
As B contains everything A use B anywhere could used A
Of course ca always use A place B relationship asymmetrical
This formally known Liskov Substitution principle
In fact full principle little wider hold anything true A true B general difficult achieve get general idea
In practice guiding principle something enforced time
Looking substitution principle way round use define hierarchical type relationship type
That type B used anywhere type A would ok say type A base type type B B A
This reasonable idea B always used place A everything A perhaps
This useful idea working type explicitly defined within type hierarchy explicitly derived one another case delegate say see later
Powered
Valid

may refer

I heard term covariance contravariance used math long I heard used object oriented programming
I curious whether connection two
To surprise similar
In fact could formalize OOP use term analogous actually special case mathematical term
When I started writing post I intended explain covariance contravariance
However post became longer technical I like write
Instead I announce connection exists give reference want read
Chris Burrows describes covariance contravariance object oriented programming article
The term defined category theory computer scientist applied term object oriented programming
short readable introduction category theory including covariant contravariant functors
See also PostScript file
Computer scientist interested category theory time surprising category theory term would filter practical programming
The real surprise hearing category terminology used outside math
It like feeling get run coworker family reunion neighbor restaurant another city
Jan See also Feb See also covariance contravariance used opposite sense
For daily dose computer science related topic follow Twitter
Sorry I see equivalence OO term
Maybe I appreciate category theory
In math seems mapping replacing domain range functor OO extends range
Am I mistaken
Regards Marek Marek In OO mapping base type induces map corresponding parameterized type
In Chris Burrows article example manager type employee
This induces relationship iterators manager iterators employee
The key observation arrow Burrows diagram go direction
Manager Employee IEnumerable Manager IEnumerable Employee This covariance
And example IComparer interface arrow go way
This contravariance
Category theory look kind situation general map object induce map associated object
The first example I saw algebraic topology
There associate algebraic object topological space hope question topology answered answering question associated algebraic structure
A continuous function topological space induces map associated fundamental group
And arrow go direction covariant functor
Category theory abstract
It care whether object topological space employee
The pattern care pattern
In Chris Burrows article could think map Manager object Employee object extending domain
But could misleading relationship category theory concerned far general
What matter mapping
In case simple mapping could missed
You could instead complex mapping map XML serialization object binary representation memory
I learned long time Liskov Substitution Principle closely related Bertran Meyer Design Contract least latter behaves inheritance covariant contravariant behavior
Recently post argued Liskov Substitution Principle contravariance
dean Looking forward clean another post
This desk read
I get turning around arrow part I think I get also seems relationship raising lowering index GR
Maybe I understand GR well enough real problem
Following one several good quote Chris Tiee covariance contravariance
The PDF although I might post I feel adventurous hopefully Chris taking page purpose
Think vector field
Do want take derivative x TAILS vector HEADS

DoVectorsHave Location
You always taught vector calculus vector location slid around This blatantly false general manifold two reason
First real canonical way sliding general manifold
In Rn natural obvious identiﬁcation tangent space namely sliding thing origin
This known cause problem standard structure Rn always implicitly assumes presence ﬂat Euclidean metric
Using metric structure precisely connection ability slide vector along make somewhat comeback
One place sliding implicit differentiation vector ﬁelds Rn difference quotient V xj V x hej V x h two vector although close together still technically live tangent space hence technically subtracted without taking making tail meet
This whole reason covariant differentiaton originally invented
Chris also make point covariant contravariant essentially people invented term thinking much term Calculation enough term Geometry
All The term contravariant covariant sort relic term bad old day confusing
The original model covariance mean decreasing scale space along direction tensor increase magnitude whereas contravariant one get larger along space
That sound backward right
You expect covariant mean varied space contravariant mean varies
The reason component main thing people thought back day rather invariant vector scaling space one would change size basis vector component whose transformation property opposite base actuality right correspondence scaling forth
A better picture going covariant thing directionality direction given transverse dimension like plane stack facing direction wherease contravariant thing directionality
direction given along whatever arrow This pretty vague without metric notion think covariant object direction arising object orthogonal complement
oriented suitably generalized notion normal vector contravariant one thing whose direction arises space spanned object tangency
Basically much harder picture case apart n object tangential transverse direction seem best way think
This go somewhat awry densitization although nice explanation happens least densitization see
The modern mathematical terminology covariant contravariant pertains notion functors meaning whether map manifold induces map corresponding space going direction oppositely
It happens map manifold induce map tensor space relationship also backward old terminology
Required field marked All right reserved

learn share knowledge build career
I understand covariance contravariance scala
Covariance many application real world I think contravariance application except old example Functions
Can someone shed light use
In opinion two simple example ordering equality
However first Scala standard library second even exist
So I going use Scalaz equivalent
Next I need class hierarchy preferably one familiar course concept must make sense
If Scala superclass numeric type would perfect
Unfortunately thing
So I going try make example collection
To make simple let consider
It clear subtype ie
So
First let write something compare two list Now I going write implicit With definition I something like Note I asking I passing
This mean
Given possible
The next question make sense
Let consider
I want compare two list integer
Naturally anything compare two list acceptable logic something compare two acceptable
Note definition thing compared becomes
Obviously parameter something expecting
From follows something something compare acceptable place something compare used parameter
What reverse
Let say I method compared list con together subtype
I obviously could use might well receive compare
It follows used instead
Let proceed equality write method Because extends I use implicit The logic one
Anything tell whether two obviously also tell whether two
From follows true
This example last project I working
Say provides logic object type
Now
superclass know
instance available use logic
In word implies
So declare contravariant
Some example would isomorphic Scalaz etc
As Daniel pointed Scala contravariant
I really know
You may instead consider intended purpose contravariant type parameter
relationship one type relationship exist two type
There many relationship possible
Let consider two type related function
arbitrary relation
said contravariant functor define operation lift function type
The following law need satisfied All data type discussed etc
contravariant functors
This property let u useful thing one illustrated Suppose class defined You need order candidate age
Now know instance available
You obtain instance operation An example based software system
Such system based broad category event like event related functioning system system event event generated user action user event
A possible event hierarchy Now programmer working system need find way event generated system
They create trait used mark component need notified event fired
As consequence marking type parameter symbol Sink type became contravariant
A possible way notify interested party event happened write method pas corresponding event
This method hypothetically processing take care notifying event sink A couple hypothetical Sink implementation
The following method call accepted compiler Looking series call notice possible call method expecting even
Also call method expecting
By replacing invariance contravariance constraint becomes subtype
Therefore contravariance also thought relationship since type specific generic
This example described series article variance found In end I think help also understand theory behind By posting answer agree
asked viewed active Get In get see By subscribing agree
site design logo Stack Exchange Inc user contribution licensed

In C roughly say covariance mean substitute derived type place base type
Contravariance mean substitute base class place derived class thinking possible right
We see possible
To get detailed discussion covariance contravariance follow great post
In C covariance contravariance supported reference type
We discus covariance contravariance support C
For example take look following class hierarchy going use class hierarchy example post In code stored animal array derived
But remember true reference type
Why covariance reference type value type
It reference type array originally keep pointer original object base pointer refer derived type
In case value type original value stored array size may vary depending type
So covariance supported array value
For example following statement compile The following statement valid example return type covariance
Now following code compile contravariance supported
This contravariance since using parameter place defined
But following code supported covariance supported parameter
The valid C
But valid
Let explain bit
For sake argument think statement valid
Then anybody call element shown If covariance would support statement would generate exception handle
C extended co contravariance generic type interface
Hope I post later
Some useful link covariance contravariance follows This article along associated source code file licensed General News Suggestion Question Bug Answer Joke Praise Rant Admin Use switch message switch thread switch page

contravariance computer science The reversal order data type acted upon operator contravariance category theory A functor revers composition Chaldean Numerology The numerical value contravariance Chaldean Numerology Pythagorean Numerology The numerical value contravariance Pythagorean Numerology Select another language Please enter email address LLC
Web


Thanks vote
We truly appreciate support

learn share knowledge build career
First I read many explanation SO blog covariance contravariance big thanks go producing great series
However I specific question I trying get head around little bit
As far I understand per Covariance Contravariance adjective describe transformation
Covariant transformation preserve order type Contravariant transformation one revers
I understand covariance manner I think developer understand intuitively
The return operation covariant preserving size Animal still bigger Mammal Giraffe
On note return operation covariant contravariant operation would make sense
This piece code course would make sense developer
My confusion lie Contravariant argument parameter
If method I always learned input parameter always force contravariant behavior
Such type used input parameter behavior contravariant
However difference following code By token ca something like ca I guess I asking make method argument passing contravariant transformation
Sorry long post maybe I understand incorrectly
Per conversation I understand instance using delegate layer clearly show contravariance
Consider following example Of course illegal someone pas Animal someAction ProcessMammal expects anything thats Mammal specific lesser Mammal
Which someAction Action anything specific Action However introducing layer delegate middle necessary contravariant projection happen delegate middle
And define Process interface would declare argument parameter contravariant type would want someone able I shown delegate
Ooops
As turned I mixed variance assignment compatibility initial answer
Edited answer accordingly
Also I wrote blog post I hope answer question better I guess answer first question contravariance example Furthermore even covariance
What called assignment compatibility mean always assign instance derived type instance le derived type
In C variance supported array delegate generic interface
As Eric Lippert said blog post better think variance projection type
Covariance easier understand follows assignment compatibility rule array derived type assigned array le derived type object objs new string
Contravariance revers rule
For example imagine could something like string string new object
Of course ca obvious reason
But would contravariance array contravariant support covariance
Here example MSDN I hope show contravariance really mean I document think something unclear doc feel free give feedback Hope help
Covariance Contravariance thing observe instancing class
Thus wrong speak one looking simple class instantiation like example These term classify operation
We generally regard following aspect talking Contrav
Inv
Let u look example get better understanding term
Let u look counter example better understand list This topic sophisticated I could go long time
I advise check Cov
Contrav
Generics
Further need know dynamic binding work fully understand example method get exactly called
The term arose Liskov substitution principle defines necessary criterion modelling data type sub type another one
You might also want investigate
My understanding subtype relationship rather operation projection type delegate generic
Therefore rather assignment compatibility since type Giraffe type Animal
becomes issue projection type This valid C however possible since sequence giraffe sequence animal
The projection preserve type relationship since note assignment requires type side least wide right
revers type relationship This also legal C since action taking animal cope passed Giraffe
However since projection reversed type relationship
This legal C
So answer question example Edited response comment described covariance contravariance applies matching function delegate
A variable delegate type could contravariance populated function From reading calling function directly matching function delegate
I sure boiled level demonstrate individual variable object assignment contravariant covariant
But assignment delegate us contravariance covariance way make sense according linked article
Because delegate signature contains derived type actual instance referred contravariance something separate covariance delegate return type le derived actual instance
Look way If I function func deal Subtype Mammal form I swap Mammal something Base
In term sporting analogy understand image catch ball bare hand like Cricket also possible easier catch ball using Baseball glove
What see left covariance see inside parameter part contravariance
You may wonder Why left green curve bigger red curve
Is Subtype usually basetype supposed bigger
Answer No
The size bracket denotes variety object allowed like Venn diagram
A Set Mammal smaller Set Animal
Similarly f Mammal smaller f Animal support smaller set object
function handle Mammals wo handle Animals function handle Animals always handle Mammal
Hence relationship inverted f animal passed instead f mammal thereby making contravariant
By posting answer agree
asked viewed active site design logo Stack Exchange Inc user contribution licensed

I believe interesting work one solving hard problem one changing think world
I follow belief work data science tool functional programming F teaching programming language research I try understand philosophy science
I working making storytelling easier open reproducible
I author definitive F book library
I offer F training consulting service part
I published paper theory programming language type provider also philosophy science
In C annotate generic type parameter annotation specify whether behave
This mainly useful using already defined standard interface
Covariance mean use place expected
Contravariance allows pas argument method taking
So far good
If already learned covariance contravariance C two example probably familiar
If new concept example make sense bit thinking I say
However still number question
Is easy way explain two concept
Why one option make sense type different type
And hell called anyway
In blog post I explain mathematics use think covariance contravariance
Let say hierarchy class shown diagram right
All type subclass type
Then two subclass finally also type
Let start looking mean
Assuming every write following function print name animal collection It important note used read value collection using property
There way could write back collection
Now create collection cat use print name
If compile run sample see C compiler accepts program run fine
When calling compiler us convert
This correct interface marked using annotation
When run program method cause anything wrong animal collection
Using collection cat argument fine cat animal
work way
Let say method creates cat compare using provided object
In realistic example method might example sort cat The object take cat argument never return cat result
You could say way us generic type parameter
Now thanks create comparer compare animal use argument The compiler accepts code interface generic type parameter marked annotation
When run program also make sense
The object created know compare animal certainly also compare two cat
A problem would could read could get
possible
Like surprisingly many programming language concept term come abstract branch mathematics called
Category theory reputation abstract fact mention call general abstract nonsense
The theory start fairly simple definition build abstraction top previous layer easy lose track
However need go far explain
Let take another look diagram relates different class example beginning previous section
We read arrow diagram
For example possible use expected possible use expected
To make diagram complete need add couple arrow see new version right
Firstly class used class expected obviously
need add arrow class
These showed dotted line
Secondly use class expected expected also use expected
This mean arrow also draw arrow
These shown dashed line
What I described section essentially category theorist call object connected arrow satisfy two property
Let look definition formally
If want learn even category theory note class interesting exactly one arrow every class hierarchy type used expected
In category theory called
A defined set together
You visualize diagram dot box representing object arrow
We compose arrow object arrow arrow also arrow constructed two arrow
In addition two requirement arrow For every object arrow called
If arrow composing composing result arrow composing first adding beginning called
Category theory abstract tell u anything object arrow involved
They could
You create category taking number drawing arrow greater equal also create category class draw arrow class used place another
There one idea category theory need understand
Let say want count depth inheritance object class hierarchy
For example depth zero single parent
Finally depth two since parent another parent
We draw transformation category class category number category number arrow To completely precise need map well category
For mapping described mapped mapped finally mapped
For mapping map arrow representing inheritance relation arrow prof parent actually parent show far hierarchy
So arrow mapped arrow
Identity arrow
mapped arrow arrow
Note mapping interesting property
All arrow left mapped arrow right
Also compose arrow left
arrow map get arrow first mapped two arrow composed result arrow arrow composes arrow
The mapping described exactly category theorist call
To make blog post fancier let look
Assuming two category
class number functor mapping object assigns object object write assigned object example
arrow category functor assigns arrow category example simple single arrow two number general may multiple arrow demonstrate concept given arrow assign arrow arrow labelled
In addition two condition must hold
Firstly arrow assigned identity arrow arrow category need identity arrow object
Secondly compose arrow map composed arrow result first map arrow compose result
The two condition exactly one I mentioned end previous section
Although important theory need worry I cheat I say something functor actually obey two law
So far I explained looked example mapping category class category number assigns class hierarchy every class
The example interesting mapped complex structure tree class flat structure ordered number
In general functors fairly complicated thing
To explain need look pretty simple functors though
The definition I described earlier actually
The label mean keep orientation arrow mapping
To arrow functor assigns arrow
So relate covariant generic type
We understand functor take class enumerable interface respectively The mapping object quite simple
Given type named mapping give u back type similarly type
The mapping arrow also straightforward
If type used place arrow arrow mapped arrow
This mean mapping preserve orientation arrow use expected
Okay I bet already guess going happen picture look contravariant generic type
The definition I showed earlier actually definition category theory also defines
The difference functor revers orientation arrow
So contravariant functor category mean object assigns object previously arrow category functor assigns arrow category note arrow opposite direction
Let look example
The type
For object mapping quite simple
Given functor give u type similarly type
However mapping arrow interesting
If arrow saying used expected mapped arrow reversed get arrow
This corresponds C example first section use comparer animal compare cat
The following diagram show revers arrow category class The diagram tell u interesting thing
By reversing arrow arrow diagram
This mean use compare anything
In case could used argument method taking
Also write method take argument
This really practical implication interesting nevertheless
If followed article point congratulation thanks staying
You learned quite concept branch mathematics I hope could see nicely correspond feature C
We started looking definition corresponds class hierarchy class inheritance
Then looked model covariant generic type like model contravariant type like
This may interesting intelectual exercise care
Firstly I think reading article give better intuition quite hard understand concept
If going use C really need worry category theory
If something wrong compiler tell keep telling get right
Luckilly C language designer understood theory u
However even designing language knowing theory might help understand complex C code
For example take look following example The method take delegate contravariant take another delegate input something
This nested delegate accepts argument type
The method invokes delegate give lambda function take animal print name
Now question use argument
The sample creates lambda function take handler type call sample cat argument
If try write code C compile run fine
Why case
Because applying delegate two time reverse arrow twice
See following diagram Understanding previous code snippet correct using C specification could quite hard
The example quite simple might intuitively expect work hope compiler agrees intuition sometimes tricky
Understanding theory give powerful tool use better understand going even complicated situation combine covariant contravariant type crazy way
Tuesday June PM Tomas Petricek
This site hosted GitHub generated using
For info see
Please submit issue correction GitHub
Use pull request minor correction
Unless explicitly mentioned article site licensed
All source code sample licensed MIT License

