In also called scientific area refers study development manipulating
Although properly speaking computer algebra subfield generally considered distinct field scientific computing usually based approximate symbolic computation emphasizes computation expression containing given value manipulated symbol
application perform symbolic calculation called term alluding complexity main application include least method represent mathematical data computer user programming language usually different language used implementation dedicated memory manager mathematical expression large set perform usual operation like simplification expression using etc
Computer algebra widely used experiment mathematics design formula used numerical program
It also used complete scientific computation purely numerical method fail problem
Some author distinguish using latter name refer kind symbolic computation computation mathematical
Some author use computer science aspect subject computer algebra mathematical aspect
In language name field direct translation English name
Typically called French mean formal computation
This name reflects tie field
Symbolic computation also referred past term also refer manipulation use referring computer algebra
There specific computer algebra function assumed named Special Interest Group Symbolic Algebraic Manipulation
There several annual conference computer algebra premier International Symposium Symbolic Algebraic Computation regularly sponsored SIGSAM
There several journal specializing computer algebra top one founded
There also several journal regularly publish article computer algebra
As highly efficient approximate common computer algebra emphasize computation exactly represented data
Such exact representation implies even size output small intermediate data generated computation may grow unpredictable way
This behavior called
To obviate problem various method used representation data well algorithm manipulate
The usual number system used either number fixed bounded size improperly called
None convenient computer algebra expression swell
Therefore basic number used computer algebra integer mathematician commonly represented unbounded signed sequence usually largest base allowed
These integer allow define two integer
Programming efficient implementation arithmetic operation hard task
Therefore free commercial one like use thus standard
Except every may viewed symbol operator followed operand
In computer algebra software expression usually represented way
This representation flexible many thing seem mathematical expression first glance may represented manipulated
For example equation expression operator matrix may represented expression matrix operator row operand
Even program may considered represented expression operator procedure least two operand list parameter body expression body operator sequence instruction operand
Conversely mathematical expression may viewed program
For example expression may viewed program addition parameter
Executing program consists expression given value result evaluation simply input
This process delayed evaluation fundamental computer algebra
For example operator equation also computer algebra system name program equality test normally evaluation equation result equation equality test needed explicitly asked user evaluation Boolean command automatically started system case test inside evaluation boolean executed
As size operand expression unpredictable may change working session sequence operand usually represented sequence either like entry like
The raw application basic rule respect expression give result Such complicated expression clearly acceptable procedure simplification needed soon one work general expression
This simplification normally done
There several class rewriting rule considered
The simplest consists rewriting rule always reduce size expression like
They systematically applied computer algebra system
The first difficulty occurs like addition multiplication
The standard way deal associativity consider addition multiplication arbitrary number operand represented
Thus simplified displayed
What
To deal problem simplest way rewrite systematically respectively
In word internal representation expression subtraction division unary minus outside representation number
A second difficulty occurs addition multiplication
The problem recognize quickly order combine canceling
In fact method finding like term consisting testing every pair term costly practicable long sum product
For solving problem sort operand sum product function comparison designed order like term consecutive place thus easily detected
In designed generating collision like term entered allowing combine soon introduced
This design hash function allows also recognize immediately expression subexpressions appear several time computation store
This allows save memory space also speed computation avoiding repetition operation several identical expression
Some rewriting rule sometimes increase sometimes decrease size expression applied
This case
For example distributivity law allows rewriting As way make good general choice applying rewriting rule rewriting done explicitly asked user
For distributivity computer function apply rewriting rule generally called expand
The reverse rewriting rule called factor requires algorithm thus key function computer algebra system see
In section consider fundamental mathematical question arise soon one want manipulate computer
We consider mainly case
This real restriction soon appearing expression simplified usually considered new indeterminates
For example viewed polynomial There two notion equality
The equality expression mean written represented computer way
As trivial rarely considered mathematician equality easy test program
The two expression represent mathematical object like It known may exist algorithm decides two expression representing number semantically equal exponential logarithm allowed expression
Therefore semantical equality may tested class expression
To test equality two expression instead design specific algorithm usual put put difference test syntactic equality result
Unlike usual mathematics canonical form normal form synonymous computer algebra
A two expression canonical form semantically equal syntactically equal expression normal form semantically zero syntactically zero
In word zero unique representation expression normal form
Normal form usually preferred computer algebra several reason
Firstly canonical form may costly compute normal form
For example put polynomial canonical form one expand every product necessary normal form see
Secondly It may case like expression involving radical canonical form exists depends arbitrary choice choice may different two expression computed independently
This may make impracticable use canonical form
At beginning computer algebra circa first put computer turned highly inefficient
Therefore large part work researcher field consisted revisiting classical order make discover implement effectiveness
A typical example kind work computation required simplify fraction
Surprisingly classical turned inefficient polynomial infinite field thus new algorithm needed developed
The also true classical algorithm
For detailed definition subject For textbook devoted subject

Stack Exchange network consists Q A community including largest trusted online community developer learn share knowledge build career
I Computer Science student
I completed linear algebra course
I got point point final exam
I know linear algebra well
As programmer I difficult time understanding linear algebra help computer science
Can someone please clear topic
The page see also might useful
In second page read among others I guess giving standard course linear algebra reference application field interest
Although standard practice I think approach theory mixed application preferred
This surely I I teach Mathematics Economics major year ago
used computer science many way boolean algebra evaluating code path error correcting code processor optimization relational database forth
used computer programming many way graphic modeling arithmetic ad hoc business logic forth
Linear algebra often taught one two way computational aspect thing focus matrix property operation matrix algebraically linear mapping treated algebraic structure one study instance group theoretic relation arise
In either case need try hard find situation knowledge either theoretical linear algebra matrix mathematics necessary
A computer scientist need various algebraic theory semigroups ring field category
Linear algebra base
Besides used mathematical science differencial equation probability etc
Linear algebra applies many area machine learning
Here small set example
find best separating hyperplane two set vector
The optimization problem minimizes objective function clearly expressed using linear algebra minimization algorithm often solved dual space using linear algebra proof regarding algorithm involve linear algebra
Many label propagation graph algorithm expressed optimization formula involving graph
separate data point group related point finding eigenvalue graph Laplacian matrix small eigenvectors
Neural net use linear algebra various way
For example densely connected neural net layer perform multiplication propagate value
Convex optimization algorithm used throughout machine learning use linear algebra
The common algorithm
Optimization algorithm used problem often formulated implemented using linear algebra
PageRank us stochastic matrix eigenvectors heart arguably one useful application computer science Thank interest question
Because attracted spam answer removed posting answer requires site
Would like answer one instead
asked viewed active site design logo Stack Exchange Inc user contribution licensed

study theory experimentation engineering form basic design use computer
It scientific practical approach application systematic study feasibility structure expression mechanization methodical underlie acquisition representation processing storage communication access information
An alternate succinct definition computer science study automating algorithmic process scale
A specializes theory computation design computational system
Its field divided variety theoretical
Some field explores fundamental property intractable problem highly abstract field emphasize visual application
Other field still focus challenge implementing computation
For example considers various approach description computation study investigates various aspect use
considers challenge making computer computation useful usable human
The earliest foundation would become computer science predate invention modern
Machines calculating fixed numerical task existed since antiquity aiding computation multiplication division
Further performing computation existed since antiquity even development sophisticated computing equipment
designed constructed first working
In demonstrated digital mechanical calculator called
He may considered first computer scientist information theorist among reason documenting binary number system
In launched industry released simplified first calculating machine strong enough reliable enough used daily office environment
started design first eventually gave idea first
He started developing machine le two year sketched many salient feature modern computer
A crucial step adoption punched card system derived making infinitely programmable
In translation French article Analytical Engine wrote one many note included algorithm compute considered first computer program
Around invented used process statistical information eventually company became part
In one hundred year Babbage impossible dream convinced IBM making kind punched card equipment also calculator business develop giant programmable calculator based Babbage Analytical Engine used card central computing unit
When machine finished hailed Babbage dream come true
During new powerful machine developed term came refer machine rather human predecessor
As became clear computer could used mathematical calculation field computer science broadened study general
Computer science began established distinct academic discipline early
The world first computer science degree program began
The first computer science degree program United States formed
Since practical computer became available many application computing become distinct area study right
Although many initially believed impossible computer could actually scientific field study late fifty gradually became accepted among greater academic population
It brand formed part computer science revolution time
IBM short International Business Machines released IBM later IBM computer widely used exploration period device
Still working IBM computer frustrating misplaced much one letter one instruction program would crash would start whole process
During late computer science discipline much developmental stage issue commonplace
Time seen significant improvement usability effectiveness
Modern society seen significant shift user computer technology usage expert professional user base
Initially computer quite costly degree human aid needed efficient part professional computer operator
As computer adoption became widespread affordable le human assistance needed common usage
Despite short history formal academic discipline computer science made number fundamental contribution science fact along founding science current epoch human history called driver seen third major leap human technological progress CE BC
These contribution include Although first proposed term computer science appears article Louis Fein argues creation analogous creation justifying name arguing like subject applied interdisciplinary nature characteristic typical academic discipline
His effort others rewarded university went create program starting Purdue
Despite name significant amount computer science involve study computer
Because several alternative name proposed
Certain department major university prefer term emphasize precisely difference
Danish scientist suggested term reflect fact scientific discipline revolves around data data treatment necessarily involving computer
The first scientific institution use term Department Datalogy University Copenhagen founded Peter Naur first professor datalogy
The term used mainly Scandinavian country
An alternative term also proposed Naur used distinct field data analysis including statistic database
Also early day computing number term practitioner field computing suggested
Three month later journal suggested followed next year
The term also suggested
In Europe term derived contracted translation expression automatic information
informazione automatica Italian information mathematics often used
French German Italian Dutch Spanish Portuguese mean informatics
Similar word also adopted UK
In however linked applied computing computing context another domain
A folkloric quotation often attributed almost certainly first formulated state computer science computer astronomy telescope
The design deployment computer computer system generally considered province discipline computer science
For example study computer hardware usually considered part study commercial deployment often called information technology
However much idea various discipline
Computer science research also often intersects discipline philosophy
Computer science considered much closer relationship mathematics many scientific discipline observer saying computing mathematical science
Early computer science strongly influenced work mathematician continues useful interchange idea two field area
The relationship computer science software engineering contentious issue muddied term software engineering mean computer science defined
taking cue relationship engineering science discipline claimed principal focus computer science studying property computation general principal focus software engineering design specific computation achieve practical goal making two separate complementary discipline
The academic political funding aspect computer science tend depend whether department formed mathematical emphasis engineering emphasis
Computer science department mathematics emphasis numerical orientation consider alignment
Both type department tend make effort bridge field educationally across research
A number computer scientist argued distinction three separate paradigm computer science
argued paradigm science technology mathematics
working group argued theory abstraction modeling design
Amnon Eden described rationalist paradigm treat computer science branch mathematics prevalent theoretical computer science mainly employ technocratic paradigm might found engineering approach prominently software engineering scientific paradigm approach artifact empirical perspective identifiable branch
As discipline computer science span range topic theoretical study algorithm limit computation practical issue implementing computing system hardware software
formerly called Computing Sciences Accreditation made representative ACM IEEE CS four area considers crucial discipline computer science
In addition four area CSAB also identifies field software engineering artificial intelligence computer networking communication database system parallel computation distributed computation interaction computer graphic operating system numerical symbolic computation important area computer science
mathematical abstract spirit derives motivation practical everyday computation
Its aim understand nature consequence understanding provide efficient methodology
All study related mathematical logic formal concept method could considered theoretical computer science provided motivation clearly drawn field
Data structure algorithm study commonly used computational method computational efficiency
According fundamental question underlying computer science What efficiently automated
Theory computation focused answering fundamental question computed amount resource required perform computation
In effort answer first question examines computational problem solvable various theoretical
The second question addressed study time space cost associated different approach solving multitude computational problem
The famous problem one open problem theory computation
Information theory related quantification information
This developed find fundamental limit operation compressing data reliably storing communicating data
Coding theory study property system converting information one form another fitness specific application
Codes used recently also
Codes studied purpose designing efficient reliable method
Programming language theory branch computer science deal design implementation analysis characterization classification individual
It fall within discipline computer science depending affecting software engineering
It active research area numerous dedicated academic journal
Formal method particular kind based technique development software system
The use formal method software hardware design motivated expectation engineering discipline performing appropriate mathematical analysis contribute reliability robustness design
They form important theoretical underpinning software engineering especially safety security involved
Formal method useful adjunct software testing since help avoid error also give framework testing
For industrial use tool support required
However high cost using formal method mean usually used development safety utmost importance
Formal method best described application fairly broad variety fundamental particular calculus also problem software hardware specification verification
Computer architecture digital computer organization conceptual design fundamental operational structure computer system
It focus largely way central processing unit performs internally access address memory
The field often involves discipline computer engineering electrical engineering selecting interconnecting hardware component create computer meet functional performance cost goal
Computer performance analysis study work flowing computer general goal improving controlling using resource efficiently eliminating predicting performance anticipated peak load
Concurrency property system several computation executing simultaneously potentially interacting
A number mathematical model developed general concurrent computation including model
A distributed system extends idea concurrency onto multiple computer connected network
Computers within distributed system private memory information often exchanged among achieve common goal
This branch computer science aim manage network computer worldwide
Computer security branch computer technology whose objective includes protection information unauthorized access disruption modification maintaining accessibility usability system intended user
Cryptography practice study hiding encryption therefore deciphering decryption information
Modern cryptography largely related computer science many encryption decryption algorithm based computational complexity
A database intended organize store retrieve large amount data easily
Digital database managed using database management system store create maintain search data
Computer graphic study digital visual content involves synthesis manipulation image data
The study connected many field computer science including heavily applied field special effect
Research develops theory principle guideline user interface designer create satisfactory user experience desktop laptop mobile device
field study concerned constructing technique using computer analyze solve problem
In practical use typically application form problem various scientific discipline
Artificial intelligence AI aim required synthesize process environmental adaptation learning communication found human animal
From origin artificial intelligence research necessarily drawing area expertise
AI associated popular mind main field practical application embedded component area require computational understanding
The late question Can computer think
question remains effectively unanswered although still used ass computer output scale human intelligence
But automation evaluative predictive task increasingly successful substitute human monitoring intervention domain computer application involving complex data
Software engineering study designing implementing modifying software order ensure high quality affordable maintainable fast build
It systematic approach software design involving application engineering practice software
Software engineering deal organizing analyzing deal creation manufacture new software internal maintenance arrangement
Both computer application software engineer computer system software engineer projected among fastest growing occupation
The philosopher computing noted three Conferences important event computer science research
During conference researcher public private sector present recent work meet
Unlike academic field computer science prestige greater journal publication
One proposed explanation quick development relatively new field requires rapid review distribution result task better handled conference journal
Since computer science relatively new field widely taught school university academic subject
For example estimated percent high school United States offered computer science education
A report Association Computing Machinery ACM Computer Science Teachers Association CSTA revealed state adopted significant education standard high school computer science
However computer science education growing
Some country Israel New Zealand South Korea already included computer science respective national secondary education curriculum
Several country following suit
In country significant gender gap computer science education
For example US computer science degree conferred woman
This gender gap also exists Western country
However part world gap small nonexistent
In approximately half computer science degree conferred woman
In woman made computer science graduate


learn share knowledge build career
I going start learning Abstract Groups Rings etc
I interested know programming language help concept I learn theory
EDIT I really looking I learn
I interested know language already support
Thank You
The text want Chuck Sims
The author recommend use programming language
The book print probably find library
There also fun use group theory
Advanced resource fairly sophisticated handle wide range concept abstract algebra
used study polynomial ring especially
used study polynomial ring
A key fact studying group theory every group isomorphic regular action
Thus key understanding group theory understand permutation group
Finally language support defining object defining binary operator two instance object support learning theory programming
Maybe slightly different take question still
The functional language Haskell us concept algebra particularly category theory monad monoids arrow whatnot
Using Haskell typeclasses could also make object group ring example simply defining operation operator
Guaranteeing operation define actually comply axiom would responsibility however
lot useful function dealing concept abstract algebra
Unfortunately proprietary software expensive
free alternative also pretty good repertoire abstract algebra function although I used extensively I ca comment much
If playing group may want visualize using
Any language fixed size unsigned integer eg
type C example implementation
Addition unsigned value essentially addition Z ie
integer modulo probably learning abstract algebra class
Modular addition group terribly interesting though
More interesting might modular addition group size N N prime factor size P P prime
To experiment group may implement arithmetic operation hard
Languages operator overloading make implementation lot convenient use
Use language make sense
Abstract algebra contains lot symbol manipulation symbol pushing rewriting modest amount induction fair amount tediousness
To sound like logic functional programming Epigram Agda bit Haskell extent though I disagree monoid correct mzero mappend okay mconcat bad
For abstract algebra best programming language Definition notebook ton paper
Though one becoming quite esoteric day
Hmm sorry say I think effective learn fancy new programming language order help learn abstract algebra
Yes Haskellers love talk category theory really good starting point
GAP used help grown group theorist find new monster bad tool learn group theory
Maybe look lot free book around topic
It bit surprising far one mentioned acronym Computations Commutative Algebra link main site one download newest CoCoA major platform Linux MacOS X Windows helpful manual CoCoA also found updated
A freely available computer algebra system written C developed year
Its target professional scientific application among base calculation polynomial factorization exact linear algebra Hilbert function toric ideal etc
There good monograph like Computational Commutative Algebra vol
Kreutzer Robbiano dealing CoCoA In field commutative algebra advanced specialized functionality Mathematica although M brilliant capability absent CoCoA quantifier elimination helpful dealing system polynomial equation inequality
In similar vein Greg answer group nice representation form matrix multiplication often see example done using matlab similar tool mathematica specific package installed well
By posting answer agree
asked viewed active site design logo Stack Exchange Inc user contribution licensed

ÐÄÆ obj R stream ì w blJ c EO Ú wo Ï RÙl ºÆÞ Ä b ôùä U x òÍ Öz k Ï Âøè úÀN B ÌàAài ÿ TÎj ej QÂ Uç lùäÒeB w

In field concerned rigorous mathematical study meaning
It evaluating meaning legal defined specific programming language showing computation involved
In case evaluation would syntactically illegal string result would
Semantics describes process computer follows executing program specific language
This shown describing relationship input output program explanation program execute certain hence creating
Formal semantics instance help write compiler better understand program following statement effect alone
The field formal semantics encompasses following It close link area
There many approach formal semantics belong three major class The distinction three broad class approach sometimes vague known approach formal semantics use technique combination thereof
Apart choice denotational operational axiomatic approach variation formal semantic system arises choice supporting mathematical formalism
Some variation formal semantics include following For variety reason one might wish describe relationship different formal semantics
For example It also possible relate multiple semantics via theory
credited founding field programming language semantics

Programming Languages lively area Cornell eight faculty dozen student
We proud breadth depth core discipline
Cornell known beginning research programming language
We made foundational contribution type theory automated theorem proving language semantics
A recent theme solution important problem computer security networking distributed programming
Cornell researcher also contributed language implementation program analysis optimization language software engineering
explores programming language concept utilized service education
He interested relative difficulty practice problem learning procedural skill
subtraction estimated analyzing procedural execution trace obtained executing target procedure practice problem
He currently applying technique math video game programming human language
He also interested program synthesis help explain student become confused recently showed many misconception math modeled diagnosed research programming language formal method context type theory
The proof assistant developed Constable group language used describe distributed computing formal specification language computing task theory formalizing topic constructive intuitionistic mathematics classical mathematics usually seen special case
Constable also interested synthesizing program concurrent process proof developing system shown secure construction exploring deep connection programming logic
work language design semantics implementation
In past worked language type system data processing including bidirectional language data provenance
More recently developing language provides construct specifying behavior network
Frenetic make possible programmer specify behavior entire network using single program compiler translates code underlying device
This provides opportunity enforcing security reliability performance guarantee using technique
interest span variety topic boundary computer science mathematics including design analysis algorithm computational complexity decision problem logic algebra logic semantics programming language
Kozen obtained number foundational result Kleene algebra test developed application efficient code certification compiler verification
Recently investigating capsule provide clean algebraic representation state functional imperative language mutable binding coalgebraic technique verification
focus application programming language technology building secure reliable software system
A common theme focus language tool help detect prevent common vulnerability software
Past example include typed assembly language code software fault isolation isolation
Recently research focus building provably correct secure software including focus cryptographic scheme machine learning compiler
work language secure programming integrates information flow Java extends Jif building secure distributed system automatically partition web application securely client web server
The challenge posed Fabric Swift led work method controlling timing channel language support extension evolution large software system extensible Java compiler language
design abstraction
His work pair new computer architecture new programming language construct let programmer safely trade small amount accuracy large return efficiency
Challenges approximate programming range control safety probabilistic program analysis compiler design
Sampson curious new way safely give programmer control system detail ordinarily hidden view
leveraged research applying programming logic semantics language design
Recently working logic belief characterizing authorization policy approach implemented operating system recently developed Cornell
Other example recent work include characterization kind security policy proof program obfuscation address space effective type checking defending
work problem related language design formalization including type system optimization extension
His work draw field category theory constructive type theory develop powerful flexible solution
His research put practice industry collaboration design language

Stack Exchange network consists Q A community including largest trusted online community developer learn share knowledge build career
I like write survey application Topology Computer Science
I plan cover history topological idea Computer Science also highlight current development
It would extremely helpful anyone could give input regarding question
Are paper note describe chronology use topology Computer Science
What important application result Topology Computer Science
What interesting area current work use topology gain insight computation
Thanks
Personally I think interesting application topology work done Herlihy Shavit
They used algebraic topology characterize asynchronous distributed computation gave new proof important known result knocked number open problem
They Godel prize work
The Topological Structure Asynchronous Computation Maurice Herlihy Nir Shavit Journal ACM Vol
Topology mature discipline varied subfields including geometric algebraic metric self deprecating pointless topology
Computer science also fairly broad many mathematical I would expect much application topological idea CS
Marshall Stone said always topologize computer scientist requisite background often
Enough blah
A example
These example hard CS problem solved topology
Sometimes topological notion transfer well CS setting give basis sub area CS
The compactness theorem propositional logic consequence Tychonoff theorem
Compactness first order logic usually proved differently
Compactness important tool classic model theory
Stone representation theorem Boolean algebra relates model propositional logic Boolean algebra certain topological space
duality result derived structure used algebraic logic programming language semantics
Nick Pippenger applied Stone theorem Boolean algebra regular language used topology prove several fact regular language
See Pin comment recent work topology language theory
In formal method notion safety liveness property
Every property expressed intersection safety liveness property
The proof us elementary topology
developed algorithm written program search infinite set
I believe compactness key ingredient work
The work Polish topologists Kuratowski gave u closure operator
Closure operator lattice crucial part theory abstract interpretation underlies static program analysis
Closure operator topological idea basis mathematical morphology
The notion interior operator also Polish school important axiomatization modal logic
A lot computer science based structure
Some application require richer notion connectedness flow provided graph topology natural next step
This reading van Glabbeek automaton concurrency theory Eric Goubault application geometric topology semantics concurrent program
Possibly application receives press application topology initially algebraic though combinatorial presentation also exist characterise certain scenario distributed computing
In addition Herlihy Shavit mentioned Borowsky Gafni Saks Zaharouglou also gave proosf first breakthrough
The asynchronous computability framework produced result
Brouwer fixed point theorem given rise several problem study
Most recently study algorithmic game theory complexity class PPAD complexity class FixP fixed point problem
The theorem several application graph metric embeddings
These covered book
These
Good luck
highly topological nature rather application topology le subfield topology
Its application programming language especially functional one certainly one important application topology computer science
Values including function given semantics term DCPOs partial order structure
Recursive domain equation D solved setting giving semantics beast untyped
The semantics fundamentally based notion approximation given ordering least fixed point solution equation solution generally guaranteed exist
Stemming denotational semantics connection abstract interpretation program analysis verification
Current research includes providing denotational semantics concurrency quantum language
Abramsky Jung give nice survey core idea
Bounds number connected component generally Betti number variety hyperplane arrangement complement used several lower bound algebraic computation decision tree
For big reference see Michael Lower bound algebraic computation tree STOC pp

Andrew Yao Decision tree complexity Betti number Comput
System Sci

part STOC
Anders Bjorner Laszlo Lovasz Linear decision tree subspace arrangement Mobius function Amer
Math
Soc


In different somewhat related vein Smale used topology pretty interesting manner particular cohomology braid group lower bound complexity model Smale On topology algorithm J
Complexity
Computable Analysis computability
This related Dave answer domain theory
The basic argument computability inherently based
You think computability refined notion topology
The clear example All oracle Turing computable function continuous
On hand every continuous function oracle Turing computable suitable oracle
You find Klaus Weihrauch book Computable Analysis
You may also want take look Steven Vickers nice book called Topology via Logic
Two paper might relevant survey Gehrke Grigorieff Pin A topological approach recognition ICALP Part II Lecture Notes Computer Science Springer Verlag
Gehrke Grigorieff Pin Duality equational theory regular language Best paper award ICALP Track B ICALP Part II Lecture Notes Computer Science Springer Verlag
Do forget Kneser conjecture proof conjecture
Have seen mentioned work formerly Illinois U Penn applying topology stuff like sensor network robotics
Here nice Also related work et al applying
Not TCS perhaps definitely computer science
Theories understand concurrency modeling concurrent computation best understood topologically
Apart famous work Herlihy Shavit topological structure async computability mentioned earlier Eric goubault done work Pratt work application concurrency Stanford Concurrency group also interesting although familiar work
All work started Kitaev topological approach fault tolerant quantum computer
See example John Preskill
Some application metric embeddings
Check book Matousek Also check paper Nobody yet mentioned fact developed provide suitable algebraic topological toolbox study concurrency
There also several low dimensional topological approach topic theory computation fairly new read book See Check book study size complexity class using topological tool
It give interesting topological view P v NP problem
Basically If P NP topologically small
The class NP topologically small
According author topological smallness mean second Baire category
By posting answer agree
asked viewed active site design logo Stack Exchange Inc user contribution licensed

