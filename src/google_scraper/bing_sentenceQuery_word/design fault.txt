property enables continue operating properly event failure one fault within component
If operating quality decrease decrease proportional severity failure compared naively designed system even small failure cause total breakdown
Fault tolerance particularly sought
The ability maintaining functionality portion system break referred
A enables system continue intended operation possibly reduced level rather failing completely part system
The term commonly used describe designed continue le fully operational perhaps reduction increase event partial failure
That system whole stopped due problem either
An example another field motor vehicle designed continue drivable one tire punctured structure able retain integrity presence damage due cause manufacturing flaw impact
Within scope system fault tolerance achieved anticipating exceptional condition building system cope general aiming system converges towards state
However consequence system failure catastrophic cost making sufficiently reliable high better solution may use form duplication
In case consequence system failure catastrophic system must able use reversion fall back safe mode
This similar recovery human action human present loop
A highly system might continue level performance even though one component failed
For example building backup electrical generator provide voltage wall outlet even grid power fails
A system designed whether function reduced level fails completely way protects people property data injury damage intrusion disclosure
In computer program might executing opposed uncontrolled crash order prevent data corruption experiencing error
A similar distinction made failing well
opposite strategy used weapon system designed kill injure target even part system damaged destroyed
A system designed experience used computing similar fail safe operates reduced level performance component failure
For example building may operate lighting reduced level elevator reduced speed grid power fails rather either trapping people dark completely continuing operate full power
In computing example graceful degradation insufficient network bandwidth available stream online video version might streamed place version
example computing web page available basic functional format older web browser enhanced version browser capable handling additional technology larger display available
In program considered designed continue operation despite error exception invalid input instead crashing completely
opposite robustness
continue transmit data despite failure link node likewise expected prevent complete failure situation like earthquake flood collision
A system high alert user component failure occurred even continues operate full performance failure repaired imminent complete failure anticipated
Likewise component designed report first point failure rather allow downstream component fail generate report
This allows easier diagnosis underlying problem may prevent improper operation broken state
Redundancy provision functional capability would unnecessary environment
This consist backup component automatically kick one component fail
For example large cargo truck lose tire without major consequence
They many tire one tire critical exception front tire used steer generally carry le load total four le likely fail
The idea incorporating redundancy order improve reliability system pioneered
Two kind redundancy possible space redundancy time redundancy
Space redundancy provides additional component function data item unnecessary operation
Space redundancy classified hardware software information redundancy depending type redundant resource added system
In time redundancy computation data transmission repeated result compared stored copy previous result
The current terminology kind testing referred Service Fault Tolerance Testing ISFTT short
Providing design every component normally option
Associated redundancy brings number penalty increase weight size power consumption cost well time design verify test
Therefore number choice examined determine component fault tolerant An example component pass test car occupant restraint system
While normally think occupant restraint system
If vehicle roll undergoes severe primary method occupant restraint may fail
Restraining occupant accident absolutely critical safety pas first test
Accidents causing occupant ejection quite common pas second test
The cost redundant restraint method like seat belt quite low economically term weight space pas third test
Therefore adding seat belt vehicle excellent idea
Other supplemental restraint system expensive pas test smaller margin
Another excellent example principle put practice braking system whilst actual brake mechanism critical particularly prone sudden rather progressive failure case necessarily duplicated allow even balanced application brake force wheel
It would also prohibitively costly main component would add considerable weight
However similarly critical system actuating brake driver control inherently le robust generally using cable rust stretch jam snap hydraulic fluid leak boil develop bubble absorb water thus lose effectiveness
Thus modern car footbrake hydraulic brake circuit diagonally divided give two smaller point failure loss either reducing brake power causing much dangerous brakeforce imbalance straight split hydraulic circuit fail completely relatively rare occurrence failsafe form parking brake operates otherwise relatively weak rear brake still bring vehicle safe halt conjunction braking long demand line normal traffic flow
The culmulatively unlikely combination total footbrake failure need harsh braking emergency likely result collision still one lower speed would otherwise case
In comparison footpedal activated service brake parking brake le critical item unless used backup footbrake cause immediate danger found nonfunctional moment application
Therefore redundancy built per se typically us cheaper lighter le hardwearing cable actuation system suffice happens hill use footbrake momentarily hold vehicle still driving find flat piece road stop
Alternatively shallow gradient transmission shifted Park Reverse First gear transmission lock engine compression used hold stationary need include sophistication first bring halt
On motorcycle similar level provided simpler method firstly front rear brake system entirely separate regardless method activation cable rod hydraulic allowing one fail entirely whilst leaving unaffected
Secondly rear brake relatively strong compared automotive cousin even powerful disc sport model even though usual intent front system provide vast majority braking force overall vehicle weight central rear tyre generally larger grippier rider lean back put weight therefore allowing brake force applied wheel lock
On cheaper slower machine even front wheel use hydraulic disc extra brake force easier packaging rear usually primitive somewhat inefficient exceptionally robust drum thanks ease connecting footpedal wheel way importantly near impossibility catastrophic failure even rest machine like lot bike first year use point collapse neglected maintenance
The basic characteristic fault tolerance require In addition system characterized term planned service outage unplanned service outage
These usually measured application level hardware level
The figure merit called expressed percentage
For example system would statistically provide availability
system typically based concept redundancy
Spare component address first fundamental characteristic fault tolerance three way All implementation except RAID example us
A machine us replicated element operating parallel
At time replication element state
The input provided output expected
The output replication compared using voting circuit
A machine two replication element termed DMR
The voting circuit detect mismatch recovery relies method
A machine three replication element termed TMR
The voting circuit determine replication error vote observed
In case voting circuit output correct result discard erroneous version
After internal state erroneous replication assumed different two voting circuit switch DMR mode
This model applied larger number replication
machine easily made fully gate replication making state transition edge clock clock replication exactly phase
However possible build lockstep system without requirement
Bringing replication synchrony requires making internal stored state
They started fixed initial state reset state
Alternatively internal state one replica copied another replica
One variant DMR
Two replicated element operate lockstep pair voting circuit detects mismatch operation output signal indicating error
Another pair operates exactly way
A final circuit selects output pair proclaim error
requires four replica rather three TMR used commercially
design advantage obvious many disadvantage Hardware fault tolerance sometimes requires broken part taken replaced new part system still operational computing known
Such system implemented single backup known represents vast majority system
In system long enough operator time fix broken device backup also fails
It help time failure long possible specifically required system
Fault tolerance notably successful computer application
built entire business machine used tolerance create system measured year
architecture may encompass also computer software example process
Data format may also designed degrade gracefully
example designed allowing new HTML entity ignored understand without causing document unusable
There difference fault tolerance system rarely problem
For instance system failure rate two hour per forty year therefore highly
But fault occur still stopped operating completely therefore

system designed around concept
In essence must able continue working level satisfaction presence fault
Fault tolerance property individual machine may also characterise rule interact
For example TCP designed allow reliable communication even presence communication link imperfect overloaded
It requiring endpoint communication packet loss duplication reordering corruption condition damage data integrity reduce throughput proportional amount
Recovery error system characterised either
When system detects made error recovery take system state time corrects able move forward
recovery reverts system state back earlier correct version example using move forward
recovery requires operation checkpoint detected erroneous state made
Some system make use recovery different error different part one error
Most designed handle several possible failure including fault failure failure temporary permanent failure error interface error hardware software including failure operator error erroneous keystroke bad command sequence installing unexpected software physical damage flaw introduced system outside source
Hardware common application system designed prevent failure due hardware component
Most basically provided particularly
Typically component multiple backup separated smaller segment act contain fault extra redundancy built physical connector power supply fan etc
There special software instrumentation package designed detect failure fault masking way ignore fault seamlessly preparing backup component execute something soon instruction sent using sort voting protocol main backup give result flawed output ignored
Software based around nullifying programming error using redundancy static emergency subprogram fill program crash
There many way conduct depending application available hardware
The first known computer built
Its basic design connected via relay voting method detection
Several machine developed along line mostly military use
Eventually separated three distinct category machine would last long time without maintenance one used computer dependable required constant monitoring used monitor control experiment finally computer high amount runtime would heavy use many supercomputer used monitoring
Most development LLNM Long Life No Maintenance computing done NASA preparation research aspect
NASA first machine went second attempt JSTAR computer used
This computer backup memory array use memory recovery method thus called JPL computer
It could detect error fix bring redundant module needed
The computer still working today
computer pioneered mostly manufacturer company USA
These needed computer massive amount uptime would enough fault allow continued operation relying fact computer output would constantly monitored human detect fault
Again IBM developed first computer kind NASA guidance rocket later built
The redundancy
In general early effort design focused mainly internal diagnosis fault would indicate something failing worker could replace
SAPO instance method faulty memory drum would emit noise failure
Later effort showed fully effective system diagnosing isolating fault implementing redundant backup alerting need repair
This known redundancy fault cause automatic fail safe warning operator still common form level one design use today
Voting another initial method discussed multiple redundant backup operating constantly checking result outcome example four component reported answer one component reported answer four would vote fifth component faulty taken service
This called M N majority voting
Historically motion always move M N due fact complexity system difficulty ensuring transitive state disrupt operation
among first company specializing design computer system
The important requirement design computer system making sure actually meet requirement reliability
This done using various failure model simulate various failure analyzing well system reacts
These complex involving probability curve specific fault rate curve error rate like
The commonly used model HARP SAVE SHARPE USA SURF LASS Europe
Research kind tolerance needed critical system involves large amount interdisciplinary work
The complex system carefully possible interaction considered prepared
Considering importance system transport military field topic touch research wide include obvious subject reliability arcane element model formal exclusionary logic remote
technique enables continue executing despite
The technique handle attempt read invalid memory returning manufactured value program turn make use manufactured value ignores former value tried access
This great contrast inform program error abort program
In computing attempt made inform program error occurred
The approach performance cost technique rewrite code insert dynamic check address validity execution time increase
Recovery shepherding lightweight technique enable software program recover otherwise fatal error null pointer dereference divide zero
Comparing failure oblivious computing technique recovery shepherding work compiled program binary directly need recompile program
It us framework
It attache application process error occurs repair execution track repair effect execution continues contains repair effect within application process detaches process repair effect flushed process state
It interfere normal execution program therefore incurs negligible overhead
For systematically collected real world error prototype implementation enables application continue execute provide acceptable output service user input

âãÏÓ obj stream ÈÎ
Í
é õ ä ÀïC ÃxRü ÀÞ Úµs
Ç rÝxÓÊù Y ÁÖ b
D æ L Þî Pe KÀÙâ á Ã æüüOÍ êI ØÆ ýáhf Õ ïX
Å DIµqÈvÐR
SqÈçwUlKF ß ÞÁ çî ï
VsñX ÑÎè Ù ÀÓ êÞH endstream endobj obj R R R R endobj obj stream ÈÎ
Í
Àp Ñ Ù A
Pôh º R æ
vB Ä
Ãì N ÒJÐî Å Û Ã é þpç ËM h mU B endstream endobj obj R R R endobj obj stream ÈÎ
Í
ç aA TÉÜê D
M r ÞT ÌÛ NÙ gc
ÙÌ ÛuôXA
À á
õ Q PÝ E Îð æÞ mP ÊÎcÃ f Ø ö
ÚQ K DéÄáÅË ÚÖ ßn Þ kÈ A ÃàÚu ªøÃeÄâ
Ä º µuo Ë Ü
ã è Kãs ÇdïàæKãpOÍ còx b e QHQæxN ÀÐ X
pFM O e endstream endobj obj R R R endobj obj stream ÈÎ
Í
Àp ÎF
çxAlPn È
hJ Î
Ö R
Ù N Øõ b â ÊÃÊÕ qêVµpf N fÌò Uª déQêA Í sK eH Ø réð db á dÆ Úòókë u Á z

Search Enter login detail
If already account need
Once production article started track status article via AudioSlides short presentation author explains paper word
When author publish data article appears ScienceDirect linked original research article journal
This application allows reader interactively explore MATLAB figure submitted article download original data file
This application let reader explore data quantitative result submitted article providing insight access data otherwise buried plot
When author publish method article appears ScienceDirect linked original research article journal
dedicated distribution research result area development use maintenance including software aspect
The journal wide scope ranging many facet methodological foundation detail dedicated distribution research result area development use maintenance including software aspect
The journal wide scope ranging many facet methodological foundation detail technical issue andthe aspect industrial practice
The subject interest cover entire spectrum method entire life cycle software system including Requirements specification design validation verification coding testing maintenance metric renovation Design implementation evaluation environment development tool visualisation animation Management development process Human factor software software social interaction software social computing Cyber physical system software interaction physical machine Software aspect infrastructure software system administration network management
Special emphasis given recent trend software development software architecture software development software engineering
divided four track
These Concepts methodology Formal technique Experimental software technology Descriptive software technology
The conceptual track open methodological philosophical sociological study aspect computer software production usage including ethic
Also short paper allowed called viewpoint
The formal track emphasizes development pragmatic application formal semiformal technique
consider mainly mathematical theoretical nature preliminary consent author formally forwarded sister journal
The experimental track open exposition implementation experiment novel programming language system method
It must emphasized paper describing new software tool relevance welcome strict condition source code tool open
Moreover result reproducible show general applicability
By mean article type original Software Publications also versioned software product corpus datasets enter review process get published
The descriptive track deal observational study current software development practice reporting new language system method including survey report various theme
Special Issues welcome Special Issues within Scope either resulting conference workshop dedicated editorial effort
This journal partnering open access journal Elsevier publishing quality peer reviewed research across discipline
Partner journal provide author easy route transfer research Learn Since September made archived mathematics article freely available mathematics community
Copyright Elsevier Cookies used site
To decline learn visit page

Programming Languages lively area Cornell eight faculty dozen student
We proud breadth depth core discipline
Cornell known beginning research programming language
We made foundational contribution type theory automated theorem proving language semantics
A recent theme solution important problem computer security networking distributed programming
Cornell researcher also contributed language implementation program analysis optimization language software engineering
explores programming language concept utilized service education
He interested relative difficulty practice problem learning procedural skill
subtraction estimated analyzing procedural execution trace obtained executing target procedure practice problem
He currently applying technique math video game programming human language
He also interested program synthesis help explain student become confused recently showed many misconception math modeled diagnosed research programming language formal method context type theory
The proof assistant developed Constable group language used describe distributed computing formal specification language computing task theory formalizing topic constructive intuitionistic mathematics classical mathematics usually seen special case
Constable also interested synthesizing program concurrent process proof developing system shown secure construction exploring deep connection programming logic
work language design semantics implementation
In past worked language type system data processing including bidirectional language data provenance
More recently developing language provides construct specifying behavior network
Frenetic make possible programmer specify behavior entire network using single program compiler translates code underlying device
This provides opportunity enforcing security reliability performance guarantee using technique
interest span variety topic boundary computer science mathematics including design analysis algorithm computational complexity decision problem logic algebra logic semantics programming language
Kozen obtained number foundational result Kleene algebra test developed application efficient code certification compiler verification
Recently investigating capsule provide clean algebraic representation state functional imperative language mutable binding coalgebraic technique verification
focus application programming language technology building secure reliable software system
A common theme focus language tool help detect prevent common vulnerability software
Past example include typed assembly language code software fault isolation isolation
Recently research focus building provably correct secure software including focus cryptographic scheme machine learning compiler
work language secure programming integrates information flow Java extends Jif building secure distributed system automatically partition web application securely client web server
The challenge posed Fabric Swift led work method controlling timing channel language support extension evolution large software system extensible Java compiler language
design abstraction
His work pair new computer architecture new programming language construct let programmer safely trade small amount accuracy large return efficiency
Challenges approximate programming range control safety probabilistic program analysis compiler design
Sampson curious new way safely give programmer control system detail ordinarily hidden view
leveraged research applying programming logic semantics language design
Recently working logic belief characterizing authorization policy approach implemented operating system recently developed Cornell
Other example recent work include characterization kind security policy proof program obfuscation address space effective type checking defending
work problem related language design formalization including type system optimization extension
His work draw field category theory constructive type theory develop powerful flexible solution
His research put practice industry collaboration design language

This directory includes regular CS Department faculty adjunct faculty faculty joint appointment
All email address unless indicated otherwise
Click faculty name see personal web page
I Q U X Y Emeritus Distinguished Professor Computer Science PhD University Illinois IEEE Fellow IEEE CS Technical Achievement Award Laurie Award Dependable Computing computer system architecture design computing digital arithmetic email aviz office BH tel fax Emeritus Professor Computer Science PhD University Texas Austin wireless network mobile computing communication network simulation analysis parallel distributed computing email rajive office BH tel fax Emeritus Professor Computer Science PhD UCLA database management distributed heterogeneous multimedia system information system medical informatics legal IP issue software engineering email office BH tel Emeritus Professor Computer Science PhD University California Berkeley communication computation theory practice algorithm complexity discrete system theory developmental probabilistic system email jwc office BH tel fax Asisstant Professor Computer Science PhD University Illinois Best Long Paper Award EMNLP Yahoo
Key Science Challenge Award statistical approach natural language processing tractable machine learning method complex big data email kwchang office BH tel fax Professor Computer Science PhD Stanford University internet search engine database system information management system digital library internet data management email cho office BH tel fax Emeritus Distinguished Professor Computer Science PhD Stanford University IEEE Fellow IEEE Life Fellow IEEE CS Technical Achievement Award distributed processing distributed database system intelligent information system email wwc office BH tel fax Assistant Professor Computer Science Symantec Chair Computer Science PhD UC Berkeley NSF CAREER Award provide appropriate data management toolkits data scientist email tcondie office BH tel fax Professor Computer Science PhD University Illinois NAE Member IEEE Fellow ACM Fellow IEEE CASS Technical Achievement Award Retrospective Most Influential Paper Award MEMSYS Best Paper Award design VLSI circuit design VLSI system design analysis algorithm email cong office BH tel fax Professor Computer Science Department Chairman PhD Stanford University AAAI Fellow probabilistic logical reasoning application including diagnosis planning system design analysis email darwiche office BH tel fax Distinguished Professor Computer Science Medicine Biomedical Engineering PhD UCLA biocybernetics computational system biology physiology biomedical system modeling control integrative cancer biology optimal drug therapy intelligent software automated biomodeling email joed office BH tel fax Emeritus Professor Computer Science PhD Yale University processing acquisition natural language symbolic connectionist genetic algorithm technique email dyer office BH tel fax Senior Lecturer SOE In Computer Science PhD UCLA software design engineering programming language design implementation software internationalization office BH tel fax Assistant Professor Biological Chemistry Computer Science PhD Carnegie Mellon University computational biology bioinformatics machine learning email ucla dot edu office BSRB fax Distinguished Professor PhD University Illinois IEEE Fellow Serbian Academy Sciences Arts Member computer arithmetic algorithm design digital reconfigurable system email milo office BH tel fax Assistant Professor Computer Science PhD Columbia University bioinformatics computational biology machine learning email eeskin office MS tel fax Adjunct Professor Computer Science PhD MIT AAAS Fellow ACM Fellow IEEE Fellow embedded networked sensing wireless sensing application environmental monitoring network protocol email destrin office BH tel fax Adjunct Assistant Professor Computer Science Assistant Professor Statistics Math Electrical Engineering PhD UC Berkeley NSF CAREER Award applied mathematics including inverse problem statistical physic email akflectcher office MS tel fax Professor Computer Science Dijkstra Prize Distributing Computing distributed algorithm mathematical programing application data network computer science theory email eli office BH tel fax Professor Computer Science Jonathan Postel Chair Networking PhD UCLA IEEE Fellow wireless ad hoc network peer peer communication dynamic spectrum access wireless security mobile health system email gerla office BH tel fax Emeritus Professor Computer Science PhD Harvard University algorithm computational complexity program scheme semantics formal language automaton theory computability email greibach office BH tel fax Professor Computer Science PhD University The Juludan Research Fund Prize Krill Prize computational biology machine learning algorithm population genetics statistical genetics email ehalperin office BH tel fax Adjunct Professor Computer Science PhD University California Los Angeles learning data graphical model data analysis visualization biology medicine design HIV vaccine association study email heckerma office BH tel Adjunct Professor Computer Science MS University Arizona ACM Fellow Member National Academy Engineering internet architecture named data network NDN email vanj office BH tel Adjunct Professor Computer Science PhD University Utah ACM Turing Award Kyoto Prize AAAS Fellow NAE Fellow RSA Fellow programming personal computing graphical user interface email Associate Professor Computer Science PhD University Washington NSF CAREER Award Google Faculty Research Award Okawa Foundation Research Award software engineering debugging analytics big data system data scientist software engineering email miryung office BH tel fax Emeritus Distinguished Professor Computer Science PhD MIT AAAS IEEE Fellow ACM Fellow
Ericsson Prize NAE Charles Stark Draper Prize queueing theory packet switching network packet radio network local area network broadband network nomadic computing network intelligent agent email lk office BH tel fax Emeritus Professor Computer Science PhD University California Berkeley IEEE Fellow image analysis pattern analysis database system computer education email klinger office BH tel fax Professor Computer Science Vice Chair Undergraduate Studies PhD University AAAI Fellow artificial intelligence including heuristic search planning parallel processing email korf office BH tel fax Professor Chemistry Biochemistry Professor Computer Science Stanford University MIT Technology Review Award Searle Scholar Award Bioinformatics statistical inference email Emeritus Senior Lecturer Computer Science MS MIT computer methodology email levine office BH tel fax Professor Computer Science PhD University Illinois IEEE Fellow wireless networking mobile computing network security system sensor network network middleware email slu office BH tel fax Adjunct Professor Computer Science PhD University California Berkeley formal verification control system software verification programming language game theoretic problem verification logic automaton theory email rupak office BH tel fax Emeritus Professor Computer Science PhD University Pittsburgh computer graphic discrete simulation digital filtering design LSI fabrication technique printed circuit board design email mcnamee office BH tel fax Assistant Professor Computer Science PhD University Of Texas Austin NSF CAREER Award complexity theory learning theory algorithm probability theory email raghum office BH tel fax Professor Computer Science PhD University Washington programming language design static type system program analysis software model checking formal method compiler email todd office BH tel fax Emeritus Distinguished Professor Computer Science PhD Princeton University ACM Fellow IEEE Fellow distributed parallel database system temporal data model query processing knowledge discovery database system computer performance evaluation email muntz office BH tel fax Adjunct Professor Computer Science MS UCLA intrusion detection technology email kip office BH tel Assistant Professor Computer Science PhD University Wisconsin Madison IEEE Micro Top Picks Best CAL hardware software modeling optimization email tjn office BH tel fax Professor Mathematics Professor Computer Science PhD New York University NAS Member SIAM Kleinman Prize ICIAM Pioneer Prize applied mathematics numerical method PDEs level set method application image processing email Professor Computer Science Professor Mathematics PhD MIT IEEE Fellow IACR Fellow IEEE CS Technical Achievement Award theory computation cryptography security distributed algorithm search routing flow control communication network email rafail office BH tel fax Professor Computer Science PhD University Of Aarhus compiler embedded system programming language software engineering information security email palsberg office BH tel fax Adjunct Professor Computer Science PhD University Michigan System Engineering email peterspao office BH tel fax Emeritus Professor Computer Science PhD University Illinois data mining bioinformatics database management scientific data management modeling email stott office BH tel fax Adjunct Professor Computer Science PhD University Bologna mobile computer network environment wired wireless network distributed system Internet information system replication overlay network email gpau office BH tel fax Chancellor Professor Computer Science Emeritus Professor Computer Science PhD Polytechnic Institute Brooklyn ACM Turing Award Member NAS NAE Fellow AAAS IEEE ACM AAAI Prizes Technion Harvey Prize Rumelhart Prize Benjamin Franklin Medal Allen Newell Award LSE Lakatos Prize Dickson Prize AI Research Excellence Award American Mathematical Society Prize artificial intelligence knowledge representation probabilistic causal reasoning philosophy science email judea office BH tel fax Professor Computer Science PhD University California Berkeley complex distributed system embedded system communication design design ad hoc sensor network computational security electronic commerce IP protection email miodrag office BH tel fax Adjunct Assistant Professor Computer Science PhD Imperial College London logic AI inductive logic programming constraint solving machine learning combined reasoning signal processing health analytics wireless health email raminr office ENG VI Room tel fax Adjunct Professor Computer Science PhD UCLA file system network computer security distributed operating system ubiquitous computing optimistic method computing parallel discrete event simulation email reiher office BH tel fax Professor Computer Science Vice Chair Graduate Studies PhD University California San Diego processor architecture design optimization speculative execution optimization finding exploiting parallelism email reinman BH fax Emeritus Associate Professor Computer Science PhD UCLA computer system architecture computing modular architecture VLSI implementation email rennels office BH tel fax Professor Computer Science PhD MIT Sloan Research Fellow theoretical computer science foundation cryptography computer security email sahai office BH tel fax Adjunct Professor Computer Science PhD UCLA congestion control adaptive multimedia streaming heterogeneous network analytic modeling computer communication system email medy office BH tel fax Assistant Professor Computer Science Assistant Professor Human Genetics PhD UC Berkeley Sloan Fellow computational biology statistical genomics statistical machine learning probabilistic graphical model bayesian statistic email sriram office BH tel fax Distinguished Professor Computer Science PhD University Illinois IEEE Fellow health analytics embedded Systems wireless Health algorithm design email majid office BH tel fax Assistant Professor Residence PhD University Liege BAEF Fellow NSF China Young Scholar Award Medical Images Machine Learning Biomedical Informatics email fab office BH tel fax Associate Professor PhD University Texas Austin theoretical computer science email sherstov office BH tel fax Senior Lecturer SOE Computer Science MS UCLA computer science education programming language generic programming student software analysis email da office BH tel fax Professor Computer Science PhD California Institute Technology IEEE Fellow David Marr Prize computer vision machine learning robotics email soatto office BH tel fax Professor Electrical Engineering Professor Computer Science PhD University California Berkeley IEEE Fellow wireless networked embedded system DSP VLSI email Assistant Professor Computer Science PhD University Illinois Urbana Champaign NSF Career Award data mining database system information retrieval machine learning network science email yzsun office BH tel fax Adjunct Assistant Professor Computer Science PhD New York University Statistical Machine Learning Scalable Data Analytics Computational Genomics email ameet office BH tel fax Associate Professor Computer Science PhD University California Berkeley parallel distributed system computing multicore architecture virtualization cluster computing OS middleware interconnection network switch reliable network service email tamir office BH tel fax Distinguished Professor Chancellor Professor Computer Science PhD MIT FRS FRSC ACM Fellow IEEE Fellow Guggenheim Fellow European Academy Sciences Member Academy Award PAMI Distinguished Researcher Award ICCV Helmholtz Prize computer graphic computer vision medical image analysis design artificial email dt office BH tel fax Assistant Professor Computer Science PhD KU Leuven machine learning knowledge representation reasoning application probabilistic reasoning learning artificial intelligence email guyvdb office BH tel fax Chancellor Professor Electrical Engineering Professor Computer Science PhD Eindhoven University Technology The Netherlands Chancellor Professor Electrical Engineering IEEE Fellow game theory network science stream mining big data medical informatics email mihaela office ENG IV tel fax Professor Computer Science Chancellor Professor Computer Science PhD MIT NAE Member ACM Fellow ACM SIGCOMM Lifetime Achievement Award Kobayashi Award network verification network algorithmics email varghese office BH tel fax Emeritus Professor Computer Science PhD University Paris neuromimetic information processing pattern recognition neural network fuzzy system genetic search multimedia communication engineering science education email vidal office BH tel fax Professor Computer Science Leonard Kleinrock Chair PhD University California Los Angeles Data Mining Bioinformatics Database Systems email weiwang office BH tel fax Adjunct Assistant Professor Computer Science PhD University California Los Angeles programming language design implementation rapid prototyping improving programming experience email awarth office BH tel fax
Friedmann Chair Knowledge Science Professor Computer Science PhD UCLA system database system reasoning reasoning scientific database email zaniolo office BH tel fax Professor Computer Science PhD MIT ACM Fellow IEEE Fellow IEEE Internet Award Internet architecture protocol design security large scale open system named data networking email lixia office BH tel fax Professor Statistics Professor Computer Science PhD Harvard University David Marr Prize computer vision statistical modeling computing vision visual art machine learning email sczhu office BH tel fax

This site us cooky improve performance
If browser accept cooky view site
There many reason cookie could set correctly
Below common reason This site us cooky improve performance remembering logged go page page
To provide access without cooky would require site create new session every page visit slows system unacceptable level
This site store nothing automatically generated session ID cookie information captured
In general information provide choice make visiting web site stored cookie
For example site determine email name unless choose type
Allowing website create cookie give site access rest computer site created cookie read

learn share knowledge build career
I taking grad class software testing spent whole class difference fault error failure
I dissatisfied definition software fault testing
What definition
You might interested podcast iirc described A occurs observed behaviour differs expected one
Note reference expected behaviour specification since even spec could false
An part system state may lead failure
A cause error
A software fault lie software hardware fault lie hardware
You find deep overview dependability concept Algirdas Laprie Brian Randell
According ISQTB fault defect
There definition defect follows A flaw component system cause component system fail perform required function
incorrect statement data definition
A defect encountered execution may cause failure component system
Deviation component system expected delivery service result
Basically defect bug error
In reality matter
Academic paper tend map terminology use
In industry certainly accepted definition
Moreover one industry care difference might
Fault error failure bug treated
error may human error requirement spec fault error lead fault developer misunderstands requirement code per understanding lead error actual code
failure fault lead failure developer wrong coding give incorrect may lead failure application
Error A discrepancy computed observed measured value condition true specified theoretically correct value condition
This misunderstanding internal state software oversight term memory management confusion proper way calculate value etc
Failure The inability system component perform required function within specified performance requirement
See bug crash exception fault
Bug A fault program cause program perform unintended unanticipated manner
See anomaly defect error exception fault
Bug terminology Tester
Fault An incorrect step process data definition computer program cause program perform unintended unanticipated manner
See bug defect error exception
Defect Commonly refers several trouble software product external behavior internal feature
Error The programmer make mistake also called error Defect The programmer introduces bug also called defect code
Bug The tester executes part software contains bug
tester observes discrepancy application incident
developer confirms Incidents Bug
Bug present application Fault
Fault cause system fail called Failure
Software Testing Perspective mean think Software Tester testing ready made software
First test find fault defect
check software state different actual expected state error
error lead failure
Fault software condition cause system fail performing required function
A fault basic reason software malfunction synonymous commonly used term bug
Fault Types testing Replication RL fault related data replication comprende By posting answer agree
asked viewed active site design logo Stack Exchange Inc user contribution licensed

Uglier Windows backslash odder common PHP unfortunate CORS disappointing Java generic inconsistent XMLHttpRequest confusing C preprocessor flakier MongoDB regrettable worst mistake computer science introduced
I call time I designing first comprehensive type system reference language
My goal ensure use reference absolutely safe checking performed automatically compiler
But I resist temptation put null reference simply easy implement
This led innumerable error vulnerability system crash probably caused billion dollar pain damage last forty year
Tony Hoare inventor ALGOL In commemoration anniversary Sir Hoare null article explains null terrible avoid
The short answer NULL value value
And problem
It festered popular language time known many name NULL nil null None Nothing Nil nullptr
Each language nuance
Some problem caused NULL apply particular language others universal simply different facet single issue
Statically typed language check us type program without actually executing providing certain guarantee program behavior
For example Java I write compiler inspect type x
If known type check succeeds known type check fails
Static type checking powerful aid writing large complex software
But Java wonderful check suffer fatal flaw reference null calling method null produce
Thus Java culprit many type system flaw including course AGOL In languges NULL type check
It slip silently waiting runtime finally burst free shower error
NULL nothing simultaneously everything
There many time make sense null
Unfortunately language permit anything null well anything null
Java programmer risk carpal tunnel writing It common idiom C add Abhorrent
Every time write code conflates null string empty string Guava team weeps
Well said
But type system
Java C allows NULL everywhere reliably exclude possibility NULL nearly inevitable wind conflated somewhere
The ubiquitous possibility null posed problem Java added annotation try retroactively fix flaw type system
Given NULL function value value NULL naturally becomes subject various form special treatment
For example consider myChar meaning
memory
The compiler verifies
Therefore following invalid Since guaranteed address compilation fails
However change number NULL compiler pass As NULL actually address
Yet time compiler permit NULL special case
Yet another special case happens C string
This bit different example pointer reference
But idea value value still present form char char
A sequence byte whose end marked NUL byte
Thus character possible byte except NUL character
Not make string length operation even worse mean used ASCII extended ASCII
Instead used unusual ASCIIZ
This exception singular NUL character caused innumerable error API weirdness security vulnerability buffer overflow
NULL worst CS mistake specifically string
For next example journey land language NULL prove terrible mistake
Suppose create Ruby class act store
This may cache interface database etc
We make API simple We imagine analog many language Python JavaScript Java C etc
Now suppose program slow way finding someone phone contacting web service
To improve performance use local cache mapping person name phone number
However people phone number
phone number nil
We still cache information repopulate later
But meaning result ambiguous
It could mean One circumstance requires expensive recomputation instantaneous answer
But code insufficiently sophisticated distinguish two
In real code situation like come frequently complex subtle way
Thus simple generic APIs suddenly become confusing source sloppy nullish behavior
Patching Store class method might help
But introduces redundant lookup causing reduced performance race condition
JavaScript issue
If property object exist JS return value indicate absence
The designer JavaScript could chosen value
But instead worried case property exists set value In stroke ungenius JavaScript added distinguish null property one
But property exists set value
Oddly JavaScript stop
Thus JavaScript wound one form NULL
Java silently convert reference primitive type
Add null thing get even weirder
For example compile This compile though throw NullPointerException run
It bad enough member method called null even worse never even see method called
great example troublesome NULL
Calling member function NULL pointer necessarily crash program
It much worse crash program
When I compile gcc first call succeeds second call fails
Why
known compiler avoids runtime vtable lookup transforms static call like first argument
Since dereference NULL pointer succeeds
But cause segmentation fault
But suppose instead made virtual
This mean implementation may overridden subclass
As virtual function vtable lookup runtime type case bar overridden
Since NULL program crash instead made function virtual
NULL made debugging code extraordinarily difficult unintuitive programmer
Granted dereferencing NULL undefined standard technically surprised happened
Still common simple example one many way NULL capricious practice
Programming language built around composability ability apply one abstraction another abstraction
This perhaps single important feature language library framework paradigm API design pattern ability used orthogonally feature
In fact composibility really fundamental issue behind many problem
For example API returning value composable storing phone number
C address problem NULL
You include optionality nullability type
But suffers critical flaw apply It apply For example make problem better
NULL become pervasive many assume necessary
We long many language seems essential like integer arithmetic
Not
You entire programming language without NULL
The problem NULL value sentinel special case lumped everything else
Instead need entity contains information whether contains value contained value exists
And able contain type
This idea Haskell Maybe Java Optional Swift Optional etc
For example Scala hold value type hold value
These two subtypes may may hold value
The reader unfamiliar may think substituted one form absence NULL another form absence None
But difference subtle crucially important
In statically typed language bypass type system substituting None value
A None used expected Option
Optionality explicitly represented type
And dynamically typed language confuse usage contained value
Let revisit earlier time using
The class return Some value exists None
And phone number Some phone number None phone number
Thus outer Maybe indicates presence Store inner Maybe indicates presence phone number name
We successfully composed Maybes something could nil
The essential difference nonsensical union present value absence
Let continue example code
Suppose Java integer may may exist exist print
This good
But implementation including Java support even better functional approach Not functional way succinct also little safer
Remember produce error value present
In earlier example guarded
In example obviates need
It make obviously bug rather obvious bug
Options thought collection max size
For example double value exists leave empty otherwise
We optionally perform operation return optional value flatten result
We provide default value none exists In summary real value NULL terrible design flaw one continues cause constant immeasurable pain
Only language managed avoid terror
If choose language NULL least posse wisdom avoid awfulness code use equivalent
NULL common language Scores according Don take rating seriously
The real point summarize state NULL various language show alternative NULL rank language generally
The info language corrected
Some language sort null pointer compatibility reason runtimes really usable language
It deserves mention special value size like NULL useful cutting CPU cycle trading code quality performance
This handy language like C really matter really left
The general issue NULL sentinel value value treated others entirely different semantics
Returning either integer index integer good example
string another
This post focus mostly NULL given ubiquity effect Sauron mere servent Morgoth NULL mere manifestation underlying problem sentinel
It sound like problem NULL But implementation
For example Common Lisp NIL nil call CL NULL value different similarly named concept
even make sense CL
I think apply either
really mean much either since CL make promise type unless explicitly assert case easily assert
What left
NULL make poor Hmm maybe
As Lisp programmer though seem bad since none problem really exist u
Besides multiple return value help avoid many API problem cite
Just NULL exacerbates poor language decision trouble muted language design decision
In philosophical term NULL weird case practical term really problem long I stay outside world
On daily basis I much troubled say exception object class instance defstruct pollutes namespace
In Java section str null str think
In fact I think second clause ever true testing object empty string object instantiating inline
Needs str null But str null want
Which I guess prof main point null muddying water yet
In Java null work physical equality place trying use equality value
Great article standard Haskell also four star basically like Rust basically used FFI binding
So either Rust star Haskell
I say certain language Python None value NOT null
None value None type NoneType introspected composed
Of course much semantically similar lot small class much
Nice exposition
BTW typo Options regardless collection Should regarded I think
J Rust get star since use order use general discouraged use interacting C APIs
Peter Brendan thanks correction
It fixed I think harsh
nil Nil NULL null differentiated solely contextual readability NSNull null
Messages return anything return f zeroed structs
Behaviorally NSNull similar classical trapping null get runtime exception trying message anything respond better defined C used used
In Store example Bob phone number could set rather nil
And composable direction NSNull property whose value nil
Given dynamic language barely pretend static replace object pointer type everything still compile run fine maybe warning pretty good
Kotlin Ceylon neat looking coming language handle empty value nice way possibly worth adding list end highlight good alternate approach
Go nil somewhat different NULL zero value certain type type int string
As none issue described article different beast entirely
Optionals already built C
Rust get star since use order use general discouraged use interacting C APIs
Swift get star reason
UnsafePointer C interop native Swift type nullable
The worst mistake computer science use Foo Bar example instead natural pattern
Great post small nitpick
The idiomatic way write C This article list language woefully incomplete without discussion SQL use NULLs intersection language discussed
I think fair C get star considering librairies allow emulate equivalent Maybe avoid null value program Regardless great article
Thanks interesting article
You caused add two new word check existence array object C star Nullable operator Also C avoid NullReferenceExceptions elegantly null propagation operator This make C one better language work NULLs Peter wrong string comparison
String literal java automatically interned eg work get two separate instance
work str interned string ie explicitly interned assigned literal
JLS Moreover string literal always refers instance class String
This string literal generally string value constant expression interned share unique instance using method
C star support proposed solution since version came via Nullable struct
Great article Option Guava library solve
The title misleading attract traffic
NULL nothing computer science
That intro would killed ability read whole article except pain point cut deeper obscure last
How long sort got perfect order
If anyone challenge rewriting fundamental AND adopted sans NULL would Paul
Just kind read I would expect coming Lucid dev team
confusing source sloppy nullish behavior favorite The problem null never go away implementation detail least world high performance coding
In good way implement optional type without RTTI terrible idea carrying around extra state tagged union special type
With null pointer address size register tested simple instruction
The need simplicity get worse move assembly
Although said still use thing look awfully like optional type high level APIs
In project I working expected error dont use exception get returned struct look like struct RetVal enum Error None ResourceNotFound etc val It happens form suited actually execute computer
Excelent Post
Null context problem infinity mathematics
set integer N inf
It special case exist based one set rule felt essential based wider rule
Null limit N tends infinity sort zero actually zero
see mathematician side coin FYI NULL C value character ASCII character set
When hit NULL key terminal sends START BIT THE VALUE STOP BIT In comparison hit ZERO key terminal sends START BIT THE VALUE STOP BIT Because NULL character Boolean value false easy detect end string string x indicate end string also CR LF often used string terminator
They used anywhere withing string simply control display printer move cursor
note read next line new line In C compiler use end string allows multiple string per physical line string spanning many physical line typedef structure NewType int alpha beta long foo floating bar bottom line developer decide use end character
Hello Paul reason obvious I agree NULL point view The text found web page save lot typing NULL essential
void Your example C unstructured language use option
low level development even reconsider
void Your example Javascript
Javascript stinking unstructured pest making web programming real nightmare please replace
Dart Python
Your surely ca using Javascript demonstrate proper NULL handling
Algol W still using language NULL appropriately
Carpal tunnes syndrome
Write macro combine condition
How would like relational database system without NULLs
For example zero value column AMOUNT yet entered
btw null optionals treatment Swift excellent
Kind Regards Ted I wonder behind scene option concept implemented whatever testing pointer null
Two point substance
The repetitive stress disorder problem solved
We still test decide process instance

The phone book illustration suffers another implementation error null often used INTERPRET AN ASSIGNED VALUE AS A RESULT CODE
This far frequent abuse type safety Hoare NULL environment make exception handling nightmare
In language listed proper practice pas target reference
OUT parameter return specific result code
A failed method never modify caller context
Yves Not exactly
NUL one L ASCII character NULL two Ls actually defined IN C least I tracked lately general defined implementation pointer binary value zero
Ted link say A vitally important part nearly programming language
While computer program normally think term particular value sometimes need express lack value
This sort effect kludged via magic number like arbitary value better language choice internally eliminating possible ambiguity
I agree completely
My point NULL kludgy value cause semantics contradict type whether dynamic static
solution optionality
I agree comment referring SQL
Checking null inherent looking populated field coming database
The issue seems use NULL absence nullable non nullable type
My argument something like At time nullable type needed speed mostly For type safety non nullable type needed
Then impose compile time rule NullableThingy NULL NonNullableThingy NULL Not ok
NullableThingy NullableThingy safe NonNullableThingy NonNullableThingy safe NullableThingy NonNullibleThingy safe NonNullibleThingy NullibleThingy Not safe
The last till needed need different syntax force programmer write something If NULL The better solution To Non Nullable type primitive add ability overload suggest To Nullable type add ability overload Non Nullable Sadly language primitive type NULL good reason allow needed overloading primitive type good reason I see
I could also get argument whether type safety always productivity gain
My type safety useful sometimes useful sometimes
I get tired type safety intrinsic assumed people always win
biggest c pain use entity framework retrieve single object datastore
Consider var x x someval called x null every single time otherwise call check property cause null exception
If accidentally miss boom program c
notation help still great way deal
Call naive life would easier fallback lambda match record return object get value default constructor
If string null default string avoid null exception try trim
Interesting article good overview lot popular You stressed modern language like Rust Ceylon Kotlin aware issue try various way address
Rust eliminated null entirely although I suppose deal interoperating C I guess restricted unsafe layer
JVM JavaScript based language deal interoperability reason
But null bad tamed still used signal absence value
Ceylon solves issue quite elegantly putting Null type forcing declare explicitly type nullable using union type null compiler complain try put null variable must explicitly initialized
Now declare return type parameter type variable abbreviated since common case show clearly optional nature value allowing set null mark absence value eg
parsing incorrect string value better throwing exception verbose performance hit
The nice touch compiler aware type force test value null allowing use
So NPE Ceylon
Even nicer one test needed code path following test compiler know value null therefore force check usage
I find solution elegant since built language start risk forgetting wrap value Option In addition seconding Dan D comment bad look I like add coverage Swift still little bit confused
The
unwrapping operator basically equivalent method Java Optional compact usable lvalue
unsafeUnwrap equivalent
except bypass actual nil check simply assumes passed would use extremely code
Hence unsafe name
Both used Optional type cousin slightly dangerous ImplicitlyUnwrappedOptional
The various specie UnsafePointer also nil nothing unwrapping UnsafePointer feature used often step two FFI stuff excuse language
They also allow pointer arithmetic accessing unallocated memory leaking allocated memory dangerous shenanigan
Like unsafeUnwrap explicitly marked unsafe good reason
Your comment nul character C place
Null describe value value
So C pointer value NULL pointer good example
But char pointer
A char basically integer type particular size
For char value value name ASCII set
The value called nul spelt one l
But one normal value set value char
The originator C runtime library chose character value sentinel value string
They could chosen value best choice many reason
But nul char definitely value value
It value
Flick For pointer NULL may interchangeable pointer value C source code compiler fancy footwork address could actually valid pointer value normal fortunately architecture used hardware vector whatever valid address data
So yes value null value pointer char
But char another value
Pointers char char pointer
yes I know people sometimes put integer value address pointer
But integer type pointer
architecture casting possible
I enjoyed reading perhaps I agree position
I would love give NULL
I skeptical I would agree one would good read nonetheless
I agree Ted
We could write example language would fail way testing pointer using self respecting developer I know would admit writing poor code
Further I would actually want exception thrown case I could identify root cause misbehaving software clearly defective code
powerful language versatility mean everyone
For everyone else VBA
For sake clarity I see table present NULL
NULL NULL recommended practice time close two decade
NULL macro behave correctly C work nearly well
The best could done NULL map literal
As used bee using nullptr since four year worked Ok led annoying ambiguity
Cheers
Thanks NULL handling
As Ruby dev I count time I wrote nil check
Still I would add NullObjects typed Nones specific case seem tad much work case
I would like see Erlang Elixir table
And read opinion Erlang one real NULL Elixir add nil atom language
聿言 业界 function function data number data 次 留下评论 中 小 本文由 伯乐在线 SamLin Passend zum heutigen Freitag den habe ich einen sehr guten Artikel zum gruseligsten Fehler der Informatik gefunden The worst mistake computer science
The worst mistake computer science Really liked article rating chart broken
When I first read week ago I could see star rating table gone
The BIGGEST mistake CS modern movement assuming good idea automate memory management accommodate mediocre computer science graduate never acquired discipline manually manage memory instead rely expensive device like automatic garbage collection automatic reference counting
The current spate language attempt hide architecture actually work might make easier novice enter end making everyone jump ridiculously unnecessary hoop trying leverage efficient binary written legacy C simply NO ONE EVEN KNOWS WHAT A POINTER IS ANYMORE
A zero zero whether call NULL nil nullptr
If keep track pointer business calling programmer
The worst mistake computer science Uglier Windows backslash odder common PHP unfortunate CORS disappointing Java generic inconsistent XMLHttpRequest confusing C preprocessor flakier MongoDB regrettable worst mistake computer science introduced
blog post ago declared NULL worst ever mistake history computer science
The fact null existed meant code always written handle otherwise You learn read carefully
Tony Hoare call null mistake called mistake
Null concept predates ALGOL W quite useful called need value value
This much clearly demonstrated type system provide optional value
Speaking left C Nullable chart
计算机科学领域最糟糕的错误 了解更多为何不使用 I see notice Smalltalk null primitive
I see notice treating null problem Null Object pattern
The NULL reference problem instance general problem static type adequately capture type really want use
Our computation regarded function taking value producing value
Static typing supposed guarantee function called invalid value
Ideally every function ever use type domain range
But function always surjective injective
The NULL problem case function produce object certain type always hence produce NULL another function taking result
elegantly address
But case
Many operation number instance undefined case
division zero
So program divide w really nonzero integer nonzero floating point number type
But overflow dealt way
So possible completely eliminate problem general
Does Ada null
Julia another new language overarching NULL
It type whose possible value also called You also create thing T type hold value type T nothing fashion
Writer ignorant
Care elaborate
Javascript copy Java Optional type Plus multiple implementation community library
Therefore seems like get star Has NULL
Has alternative community Hi Ben
While community library Optional pattern JavaScript multiple NULL hence get one star per author rating system
Hi Paul
What think Crystal Programming Language
Crystal try check nil reference compile time
Thanks great post
Paul Draper розмірковує про NULL як найгіршу помилку інформатики C Nullable kind irrelevant score nothing save worst thing c Null Reference Exception type system way expressing proving reference NULL
You get NULL propagation compiler enforce use use correctly whether expression using evaluate non NULL value
This c get low score
vez lo más importante e que e inmune el error del billón de dolares el famoso Null Pointer For JavaScript several option directly npm maybe optional optionals type example alternative nullable reference something heavily criticized making program prone unexpected NullReferenceExceptions
The idea behind Now let get back error message probably still seeing
When call readline chance return null value
Essentially programming null mean nothing attempt operation null value program crash
The idea null referenced billion dollar mistake null pointer exception cost company lot money money read null bad idea
Ironically document Go decry use error indicator C recommended use panic recover check panic value nil
So error lead panic also fails set panic To fix func f var nopanic false defer func nopanic recover
stuff might panic nopanic true return Just certain computation panic
The intersection database NULL language nil rich source surprising behavior
Just
The example Ruby unfair
Certainly bad programmer indicated Hash
way check key exists
But also aware permit creation default value also use block compute value missing key
Ruby give enough rope hang set middle rope warehouse
Hilariously missing point
Recommend using Optional completely missing Option class store null value internally
Optional possible without null unless hackily exploit empty list still deep null terminated array
Safely wrapping null remove existence make problem
I better null safety much way Kotlin Swift provides still HAVE null
Without null optional field impossible represent via object oriented programming
Even wrapping object Optional class still relies existence null value I really get people hate null much
Just get better writing unit test use one many language provide better null safety
In NULL really rare need dynamic allocation
Because object default stack static allocated reference could reference null
And course could use Optional good exception deference null standard one Your email address published
Lucidchart used million people around world create flowchart network diagram ER diagram UML diagram mind map
Because intuitive user interface collaborative feature popular Lucidchart one popular productivity apps G Suite Confluence JIRA Jive many leading platform
Enter email get article right inbox
Lucidchart

Introducing Microsoft Research Podcast intimate conversation researcher behind cutting edge discovery plan change world
Hear directly Eric Horvitz Jamie Teevan every Wednesday
Learn cutting edge topic like future relationship machine AI beat productivity revolution
The Cloud AI Research Challenge invite researcher build AI application Microsoft AI service
The two best awarded
A new method discovering software security vulnerability us machine learning deep neural network
Researchers The Alan Turing Institute using artificial intelligence machine learning push data science better understand make u happy angry frustrated
An introduction world quantum computing
Learn Microsoft blending quantum physic computer science Quantum Computing
Microsoft brought together top physicist computer scientist engineer build scalable universal quantum computer
Read Microsoft quest quantum future
Microsoft path building first topological qubit type quantum bit serve basis scalable general purpose quantum computer marking profound breakthrough quantum physic
A tool formerly known Project Springfield developer use look bug security vulnerability software preparing release use saving company heartache patch bug deal crash respond attack released
Microsoft security privacy cryptography effort guided responsibility build maintain trust computing ecosystem system control service
Microsoft Research aim provide customer cloud computing complete control one able access data without permission
At point time day week cloud computing operation attack The company detects whopping million attempt day compromise system
But Microsoft fending attack
also learning
The ability differentiate thing like tree curb glass door come easily human still difficult system
Microsoft researcher aiming change working new set tool available GitHub researcher developer use train test robot drone gadget operating autonomously safely real world
How doctor keep explosion medical research
The Azure Research program provided Azure grant University College London quickly develop deploy AI solution cloud
Researchers AI pursuing computing advance create intelligent machine complement human reasoning augment enrich experience competency
Learn Project Malmo platform us world Minecraft testing ground advanced artificial intelligence research innovation
December December December We collaborate top researcher develop technology help solve global challenge
Â Work colleague meaningful research product incubation lab around world
Â Microsoft researcher received myriad prestigious national international honor including ACM Turing Award considered highest distinction computer science

