The noun sense operation occur without regular predictable time relation event Operations occur without regular predictable time relation event Nouns denoting natural process computer science data processing result completely specified rule especially processing result single instruction operation initiated predictably clock ASYNCHRONISM ASYNCHRONOUS ASYNCHRONOUS TRANSFER MODE ASYNCHRONY ASYNCLITISM ASYNDETIC ASYNDETON ASYNERGIA ASYNERGIC

A digital computer performance determined signal previous
Powered

learn share knowledge build career
What difference asynchronous synchronous execution
When execute something synchronously wait finish moving another task
When execute something asynchronously move another task finish
That said context computer translates executing process task another thread
A thread series command block code exists unit work
The operating system manage multiple thread assign thread piece slice processor time switching another thread give turn work
At core pardon pun processor simply execute command concept two thing one time
The operating system simulates allocating slice time different thread
Now introduce multiple mix thing CAN actually happen time
The operating system allocate time one thread first processor allocate block time another thread different processor
All allowing operating system manage completion task go code thing
Asynchronous programming complicated topic semantics thing tie together time
There numerous article book subject look
Synchronous mean connected dependent way
In word two synchronous task must aware one another one task must execute way dependent wait start task completed
Asynchronous mean totally independent neither one must consider way either initiation execution
Synchronous one thread Synchronous Asynchronous one thread Asynchronous Technically concept really
Although general unusual find asynchronous task running thread possible see example find two task executing synchronously thread No concept whether second subsequent task initiated first task completed whether must wait
That
What thread thread process CPUs indeed hardware task executed relevant
Indeed make point I edited graphic show
ASYNCHRONOUS EXAMPLE
In solving many engineering problem software designed split overall problem multiple individual task execute asynchronously
Inverting matrix finite element analysis problem good example
In computing sorting list example
The quick sort routine example split list two list sort calling recursively
In example two task often executed asynchronously
They need separate thread
Even machine one CPU one thread execution coded initiate processing second task first one completed
The criterion
As long start end time task overlap possible output neither needed input executed asynchronously matter many thread use
SYNCHRONOUS EXAMPLE
Any process consisting multiple task task must executed sequence one must executed another machine Fetch update data get stock quote financial service etc
If separate machine separate thread whether synchronous asynchronous
In simpler term SYNCHRONOUS You queue get movie ticket
You get one everybody front get one applies people queued behind
ASYNCHRONOUS You restaurant many people
You order food
Other people also order food wait food cooked served order
In kitchen restaurant worker continuously cooking serving taking order
People get food served soon cooked
I try explain simply I hopefully remember My bos busy man
He tell write code
I tell Fine
I get started watching like vulture standing behind shoulder
I like Dude WTF go something I finish
like No I finish
This synchronous
The bos tell rather waiting right work bos go task
When I finish job I simply report bos say I DONE
This Asynchronous Execution
It really simple
Hope help
Take advice NEVER work bos behind
mean execution happens single series

If calling routine run finish start finish start etc
With begin routine let run background start next point say wait finish
It like finish The advantage execute still running background separate thread take better advantage resource fewer hang wait
Synchronous mean caller wait response completion asynchronous caller continues response come later applicable
As example This always ouput But make doSomething asynchronous multiple way output become Because method making asynchronous call would immediately continue next line code
I say could order execution ca guaranteed asynch operation
It could also execute original depending thread timing etc
I think bit explanation still clarifies using real life example
Small Example Let say playing audio involves three step If audio player step sequentially every song synchronous
You wait time hear song till song actually get fetched decompressed
If audio player step independent asynchronous
ie
While playing audio step fetch audio harddisk parallel step decompresses audio parallel
step You end hearing song without waiting much fetch decompress
In nutshell synchronization refers two process point
In example Process A endpoint synchronized Process B start point Asynchronous process hand start endpoint synchronized Where Process A overlap Process B running concurrently dictionary definition hence confusion
It might helpful think term asynchronous synchronous instead asynchronous synchronous
Simply said asynchronous execution stuff background
For example want download file internet might use synchronous function block thread file finished downloading
This make application unresponsive user input
Instead could download file background using asynchronous method
In case download function return immediately program execution continues normally
All download operation done background program notified finished
When executing sequence like b c get failure middle execution like Then beginning synchronous If however sequence execute b c failure middle instead restarting beginning point failure know asynchronous
You confusing Synchronous Parallel v Series
Synchronous mean time
Syncronized mean related othere mean series fixed interval
While program running series
Get dictionary unsweet tea
You tea sweetened tea
Synchronous basically mean execute one thing time
Asynchronous mean execute multiple thing time finish executing current thing order move next one
As really simple example Imagine school student instructed walk queue road
The student got shoelace untied
Now stopped tying
All student behind stopped waiting get tied
The student walked past continuing usual pace
Just Imagine random people walking road
They queue course randomly walking different place road different pace
person shoelace got untied
She stopped get tied
But nobody waiting get tied
Everyone else still walking way pace
A synchronous operation work returning caller
An asynchronous operation work returning caller
When task executed synchronously wait task completed moving another task
One task depends end another When task executed asynchronously directly switch another task previous completed
One task depend
In programming task executed
It necessary understand several thread created task order avoid stacking single queue
That said concept synchronous asynchronous much thread reason I mention rare see task running asynchronously single thread although technically possible
In regard definition synchronous execution sometimes confusing good way understand Thank interest question
Because attracted spam answer removed posting answer requires site
Would like answer one instead
asked viewed active Get In get see By subscribing agree
site design logo Stack Exchange Inc user contribution licensed

In sends message process may relies process supporting infrastructure select invoke actual code run
Message passing differs conventional programming process subroutine function directly invoked name
Message passing key
Message passing used ubiquitously modern computer software
It used way object make program work mean object system running different computer Internet interact
Message passing may implemented various mechanism including
Message passing technique invoking behavior running program computer
In contrast traditional technique calling program name message passing us distinguish general function specific implementation
The invoking program sends message relies object select execute appropriate code
The justification using intermediate layer essentially fall two category encapsulation distribution
idea software object able invoke service object without knowing caring service implemented
Encapsulation reduce amount coding logic make system maintainable
rather statement determine subroutine function call developer send message object object select appropriate code based type
One first example used domain computer graphic
There sort complexity involved manipulating graphic object
For example simply using right formula compute area enclosed shape vary depending shape triangle rectangle elipse circle
In traditional computer programming would result long statement testing sort object shape calling appropriate code
The way handle define class called subclass turn subclass simply send message asking compute area
Each object invoke subclass method formula appropriate kind object
Distributed message passing provides developer layer architecture provides common service build system made run disparate computer different location different time
When distributed object sending message messaging layer take care issue One important distinction among message passing system whether use synchronous asynchronous message passing
Synchronous message passing occurs object running time
With asynchronous message passing possible receiving object busy running requesting object sends message
Synchronous message passing typical programming language Java Smalltalk use
Asynchronous message passing requires additional capability storing retransmitting data system may run concurrently
The advantage synchronous message passing conceptually le complex
Synchronous message passing analogous function call message sender function caller message receiver called function
Function calling easy familiar
Just function caller stop called function completes sending process stop receiving process completes
This alone make synchronous message unworkable application
For example synchronous message passing would used exclusively large distributed system generally would perform well enough usable
Such large distributed system may need continue operate subsystem subsystem may need go offline kind maintenance time subsystem open receiving input system
Imagine busy business office desktop computer send email using synchronous message passing exclusively
Because office system use asynchronous message passing one worker turning computer cause computer freeze worker turn computer back process single email
Asynchronous message passing generally implemented complexity naturally occur trying synchronize system data handled intermediary level software
Commercial vendor develop software product support intermediate level usually call software
One common type middleware support asynchronous messaging called MOM
With asynchronous message passing sending system wait response
Continuing function call analogy asynchronous message passing would function call return immediately without waiting called function execute
Such asynchronous function call would merely deliver argument called function tell called function execute return continue execution
Asynchronous message passing simply sends message message bus
The bus store message receiving process request message sent
When receiving process arrives result sends result message bus message bus hold message original process designated next process pick message message bus
Synchronous communication built top asynchronous communication using
For example work ensuring sender always wait acknowledgement message receiver
The sender sends next message acknowledgement received
On hand asynchronous communication also built top synchronous communication
For example modern generally provide primitive asynchronous messaging implemented top using
The buffer required asynchronous communication cause problem full
A decision made whether block sender whether discard future message
If sender blocked may lead unexpected
If message dropped communication longer reliable
These example kind problem middleware vendor try address
In addition distinction synchronous asynchronous message passing primary distinguishing feature message passing system whether use distributed local object
With distributed object sender receiver may exist different computer running different operating system using different programming language etc
In case bus layer take care detail converting data one system another sending receiving data across network etc
The RPC protocol early example
Note type message passing requirement either sender receiver implemented using programming
It possible wrap system developed using procedural language treat large grained object capable sending receiving message
Examples system support distributed object
Distributed object system called shared nothing system message passing abstraction hide underlying state change may used implementation sending message
Distributed asynchronous message passing overhead associated compared simpler way simply calling procedure
In traditional argument passed receiver typically one containing address argument
This form communication differs message passing least three crucial area In message passing transferring argument involved operation involves copying existing argument portion new message upon creation
This applies regardless size argument case argument large document megabyte worth data
The argument copied entirety transmitted receiving object
By contrast standard procedure call address bit need passed argument may even passed requiring zero additional storage zero transfer time
This course possible distributed system since absolute address caller address space normally meaningless remote program however might fact usable receiver copy least sender memory advance
Web example process communicate message passing
A example way referencing resource depend exposing internals process
A call invocation exit invoked computation terminated
Asynchronous message passing contrast result response arriving significant time request message sent
A message handler general process message one sender
This mean state change reason unrelated behavior single sender client process
This contrast typical behavior object upon method invoked latter expected remain state method invocation
In word message handler behaves analogously
The prominent mathematical model message passing
In mathematical term message single mean pas control object
If object responds message message
argued message passing important object OOP object often
The programming model build upon observation us concept characterize behavior complex distributed system term message pattern using specification

The operation may
A synchronous operation process till operation completes
An asynchronous operation operation
The caller could discover completion mechanism discussed later
Does make sense asynchronous RPC send
The notion synchronous operation requires understanding mean operation complete
In case remote assignment send receive complete message delivered receiver
In case remote procedure call send receive reply complete result delivered sender assuming return value
Otherwise send receive complete procedure finish execution
During time procedure executing sender receiver rendezvous mentioned
Note implies blocking vice versa every blocking operation synchronous every non blocking operation asynchronous
For instance send block till receiver machine received message blocking synchronous since receiver process may received
Similarly see later Xinu receive asynchronous
These definition operation similar identical one given text book tend equate synchronous blocking
Asynchronous message passing allows parallelism
Since process block computation message transit
In case receive mean process express interest receving message multiple port simultaneously
The select primitive discussed later provides facility synchronous receives
In synchronous system parallelism achieved forking separate process concurrent operation approach incurs cost extra process management
This cost typically bearable lwps hwps
Asynchronous message passing introduces several problem
What happens message delivered
The sender may never wait delivery message thus never hear error
Similarly mechanism needed notify asynchronous receiver message arrived
The operation invoker could learn polling getting software interrupt waiting explicitly completion later using special sycnhronous wait call
An asynchronous operation need return id application need later notified operation
At notification time id would placed global location passed argument handler wait call
Another problem related asynchronous message passing buffering
If message sent asynchronously buffered space managed OS process may fill space flooding system large number message

In general asynchronous pronounced Greek meaning meaning time adjective describing object event coordinated time
In information technology term several different usage
The virtualized network pose challenge network management system hardware component become virtualized challenge becomes even greater
This handbook discus step IT must take build corral virtualized infrastructure
You forgot provide Email Address
This email address appear valid
This email address already registered
Please
You exceeded maximum character limit
Please provide Corporate Address
By submitting Email address I confirm I read accepted Terms Use By submitting personal information agree TechTarget may contact regarding relevant content product special offer
You also agree personal information may transferred processed United States read agree
In telecommunication signaling within network network asynchronous signal one transmitted different clock rate another signal
signal almost quite synchronization method used adjust signal run clock rate
In computer program asynchronous operation mean process operates independently process whereas synchronous operation mean process run result process completed handing operation
A typical activity might use synchronous protocol would transmission file one point another
As transmission received response returned indicating success need resend
Each successive transmission data requires response previous transmission new one initiated
Synchronous program communication contrasted program communication
Find content member offer By submitting agree receive email TechTarget partner
If reside outside United States consent personal data transferred processed United States
The additional cost brought value LANs Nuffield hospital fitness center United Kingdom
SDN approach could key requirement networking container especially come
Check top SDN news trend story prepare come next
Figuring calculate bandwidth requirement vital ensuring network run smoothly best get
Learn different type noise data communication including thermal intermodulation impulse
This slideshow highlight best VPNs used enterprise network WANs offer principle designing With help technology video conference vendor roll option potential buyer face
In world WebRTC expect video codec war ramp back
Also learn browser could become irrelevant Take look top UC news story affected industry growth team collaboration market As organization embrace EMM trend cloud EoT UEM become significant
Learn use
When come mobile app development security crucial
The second half app security checklist cover factor
When developing app security number one priority
Review tip ensuring security drive mature technology eclipsed hard disk drive superior performance manageability
Edge computing colocation cloud IT staffing issue lead way industry analyst make prediction future
The improved remote management software capability system edge computing could ThousandEyes network performance monitoring vendor launched first channel program partnering
IT service company said providing vCIOs help small midsize customer acquire business technology guidance Ingram Micro purchase cloud distribution firm security tech specialist Cloud Harmonics IBM preview Watson Build All Rights Reserved

Not synchronized occurring predetermined regular interval
The term usually used describe transmitted intermittently rather steady stream
For example telephone conversation asynchronous party talk whenever like
If communication party would required wait specified interval speaking
The difficulty asynchronous communication receiver must way distinguish valid data
In computer communication usually accomplished special beginning end piece data
For reason asynchronous communication sometimes called
Most communication asynchronous
Stay date latest development Internet terminology free weekly newsletter Webopedia
Join subscribe
The following fact statistic capture changing landscape cloud computing service provider customer keeping
The following computer science fact statistic provide quick introduction changing trend education related career
From ZZZ guide list text message online chat abbreviation help translate understand today texting lingo
Learn five generation computer major technology development led computing device use Computer architecture provides introduction system design basic computer science student
Networking fundamental teach building block modern network design
Learn different type network concept architecture

Stack Exchange network consists Q A community including largest trusted online community developer learn share knowledge build career
Quoted interrupt signal indicating need attention event software indicating need change execution
I wondering asynchronous synchronous mean
When mention asynchronous interrupt using classical clocked definition synchronous applies digital circuit
A digital circuit said synchronous every part logic connected common clock like CPU
At rise fall every clock cycle state circuit updated
An asynchronous digital circuit hand clocked rather next state dependent current one switch soon
Reading logic circuit share common clock also defined asynchronous
If asynchronous interrupt triggered mean processor likely next clock cycle save current executing environment service interrupt request
This example hardware interrupt one triggered external connection processor
All software interrupt mentioned article technically synchronous since initiated CPU synchronous circuit
Since external device share common clock CPU external interrupt said asynchronous
Even though device triggered interrupt synchronous circuit interrupt triggered asynchronously since sharing common clock signal device
The actual external interrupt asynchronous CPU interrupt handler synchronous detect interrupt since point synchronous system allow system state change together
If curious processor handle interrupt see specifically Volume Part
From Etymology Dictionary
synchronus Gk
synchronos together time
Meaning recurring successive instant time attested mean synchronous
Now read context
The asynchronous interrupt would directly related activity hand think like reading suddenly hear noise behind turn around asynchronously interrupted Now reading wikipedia page interrupt see word look synchronous interrupt flow thought cause interrupt read result stopped reading looked word eventually came back reading
Basically way get attention kernel program
An example Lets say program download file
I want program still responsive file downloading I need tell program I done
In meantime however program continue whatever want completion downloaded file
It whatever need
It asynchronous happen predefined time predefined order
Sync mean expected happen next
Async mean know would happen
By posting answer agree
asked viewed active site design logo Stack Exchange Inc user contribution licensed

The Internet Things IoT environment object animal people assigned unique identifier given ability transfer data network without requiring interaction
In general synchronous pronounced Greek meaning meaning time adjective describing object event coordinated time
In information technology term several different usage
In telecommunication signaling within network network synchronous signal occur clock rate clock based single reference clock
signal almost quite synchronization signal run different clock different transition rate
In communication synchronous communication requires end exchange communication respond turn without initiating new communication
A typical activity might use synchronous protocol would transmission file one point another
As transmission received response returned indicating success need resend
Each successive transmission data requires response previous transmission new one initiated
Synchronous program communication contrasted program communication
By submitting agree receive email TechTarget partner
If reside outside United States consent personal data transferred processed United States
An internal audit IA organizational initiative monitor analyze business operation order determine
Pure risk also called absolute risk category threat beyond human control one possible outcome Risk assessment identification hazard could negatively impact organization ability conduct business
A polymorphic virus harmful destructive intrusive type malware change making difficult
According Federal Bureau Investigation cyberterrorism politically motivated attack Antimalware type software program designed prevent detect remove malicious software malware An accountable care organization ACO association hospital healthcare provider insurer party
Patient engagement ideal healthcare situation people motivated involved A personal health record PHR collection information documented maintained individual Business continuity disaster recovery BCDR closely related practice describe organization preparation A business continuity plan BCP document consists critical information organization need continue A call tree sometimes referred phone tree telecommunication chain notifying specific individual
Cloud object storage format storing unstructured data cloud
A parallel file system software component designed store data across multiple networked server facilitate flash storage us interface connect storage directly CPU A hybrid hard disk drive electromechanical spinning hard disk contains amount NAND Flash memory
All Rights Reserved

learn share knowledge build career
I encountered term lot even Googling still ca understand exactly mean
Is ideally example definition asynchronous event someone provide
Thanks
Non programming example You want pizza dinner frozen kind
So stop playing WOW upset clan
You go kitchen make dough cover sauce add cheese smother favorite bacon topping
You spent minute time making pizza another minute oven
The timer beep pull hot pie
You sit back front computer eat pizza continue conquest
You want pizza dinner playing WOW
You open browser window monitor
You load Pizza website order extra cheesy bacon pizza side bacon grease garlic sauce
You go back raid minute door bell ring
You get pizza
You sit back front computer eat pizza continue conquest
So difference
One way waste minute precious WOW time way waste plus tip
Your page delivered server client browser somewhere Internet
The browser drawn page screen somebody looking
It waiting game
Eyes shift back forth taking detail quick jump darting side away screen investigate distraction environment
The clock tick
The page glow softly passively user hovers inactive hand loosely draped mouse neck bent eye intent something inviting page offer
Suddenly without warning cursor begin move hand mouse stiffens slightly begin nudging little plastic bump rough surface table
As mouse move surrogate screen move close imitation grazing past interesting image witty remark content page
Eventually decision made movement pause muscle two contract slightly mouse button depressed insistent finger
The microswitch mouse trigger electronic impulse suddenly browser made aware happened mouse click
In everything user done gazing page happened way totally unpredictable browser client code web page anything resident server
There knowable wait time human action
The action therefore transmitted equipment hooked user computer happened according predictable clock happened
Think end interview guy say Do call u call
That essence asynchronous event
Normally define function call function explicitly
Your program structure start line line except conditional code iteration calling function simple liner synchronous structure
But case action triggered event outside direct control program thing come outside program like user interface event user click mouse network event someone try connect server
Your code generate event directly
They generated outside program often OS based monitoring user interface device system
These called asynchronous event
Just remember Do call u call In programming asynchronous event occurring independently main program flow
Asynchronous action action executed scheme allowing main program flow continue processing
With Ajax web application retrieve data server asynchronously background without interfering display behavior existing page
When click Edit Save SO happening asynchronously
An asynchronous event event run outside application main thread
The best way understand compare event run synchronously
The typical example would loading web page
When went page clicked link waited page load able interact use page finished loading
To contrast page AJAX event Asynchronous JavaScript XML event associated user action page would load data another source asynchronously parallel theoretically action going
Example Two Synchronous Events A B First A something
When A finished B something
Example Two Asynchronous Events A B Both A B something time neither event wait
Here example asynchronous operation javascript need javascript console open The call executed without blocking rest code happens
In real scenario replace setTimeout someone clicking button webpage
The response button click happen eventually without blocking code execution page rendering
Simply put mean something occurs unknown amount time expect immediate result
For example Mom I five dollar
Putting hand money expecting immediately respond giving money synchronous
Realistically look moment two decide respond want asynchronous
When two different event occure separate ca without checking really finished
regard Asynchronous event event know occurred future example server requested file know fulfilled request UI event know user click button UI element despite thing page application happening block anything say page greyed UI file server coming event happening thing independent power asynchronous event simply say independent event Events happen time synchronized
Events happen one time next event start previous completed
Synchronous Asynchronous Events Some event handler called immediately event occurs
These called event
An example DocumentNew
It get called soon user creates new document
However event called shortly event occurs usually short amount idle time
These called event
They asynchronous would destabalize Source Insight macro called exact time event occured
By posting answer agree
asked viewed active site design logo Stack Exchange Inc user contribution licensed

Asynchronous programming become important last year many programmer find
So exactly asynchronous programming necessary growing importance
This first two article asynchronous programming Before getting started earth introduction asynchronous programming mathematical analysis
It possible make whole subject seem complicated miracle make use
Asynchronous programming u early day computing need make best use hardware
But recently become almost standard programming paradigm
So much could say program written today object oriented asynchronous program
Often programmer fully aware object oriented vaguely aware writing asynchronous code
It start User Interface UI
If allow user interact program clicking button selecting object immediate problem The obvious answer nothing
Your program wait user give something
This case whenever program interacts user even simply waiting command line user type something
You implement sort system using polling
That program go around UI asking question button clicked button clicked
This tie resource looping around UI checking case something happened
This UI framework organize thing
Instead implement event handling system
The user clicking button defined event associate code event event handler
When event occurs event handler run
This familiar pattern hardy give second thought
For example suppose three button screen user click three high speed three different event handler get started
In case answer one even handler started time
The common event handling architecture single threaded one thread execution one time one instruction entire program obeyed
The idea program nothing thread look event queue
When event happens record event added queue program thread anything look event queue take first event front start running corresponding event handler
When event handler completes thread go back event queue process event might happened busy
So event added event queue UI framework provides dispatcher run thread call event handler needed
At moment program thread either dispatcher finding event process next event handler
Of course event process thread idle waiting event added queue
This single threaded event system
You might point ask reasonable question event get put event queue program thread running event handler
The answer operating system lot thread respond user place message event queue
Now hit subtle point might confuse know much operating system hardware
Until quite recently ever one thread execution typical machine
The multiple thread provided operating system created preemptive scheduling one thread run one time OS switch active thread
In sense entire machine OS single threaded system
The main distinction OS preemptive thread interrupted part way though event driven system cooperative sense event handler started run completion
It preemptive cooperative difference important
The final complication modern machine multiple core mean support one thread execution hence capable true parallelism
For moment ignore detail important though
The important distinction preemptive system programmer worry keeping main thread occupied
Every millisecond hardware interrupt running thread start running operating system
The operating system pick another process start run
In preemptive system one thread automatically shared fairly process matter programmed
So single threaded event system work placing event queue processing calling appropriate event handler
The event handler run completes return control dispatcher deal next event queue
This asynchronous system say exactly anything going happen
There set order code executed
You may program instruction say say order execution
What happens depends button option user click
Event handler called many different order
If consider idea moment might seem amazing write asynchronous code
All different way run
Of course point system made simpler restriction one event handler run time always run completion
The interaction event handler made simpler restriction
To put another way event handler atomic
indivisible action
Now come back problem single threading
The reason simply event handler never return thread dispatcher hence event handler ever get run
If event handler hold thread noticeable length time event processed user think UI unresponsive time
The cure problem keep work done event handler minimum
In sense event handling system cooperative multitasker case duty every event handler return control dispatcher soon possible
The fair sharing thread execution matter cooperation code need run
event handler
So event handler substantial amount work
The textbook answer simply use event handler set another thread get new thread work
The event handler return almost new thread continues job
This use new thread cause problem synchronization return little later
In short adding thread single threaded event system make much complex
Some language Visual Basic example special doEvents command act like yield command transfer control calling routine dispatcher case process pending event done transfer control back suspended event handler instruction following doEvents
The state event handler unchanged continues nothing happened
In word doEvents command say pause event handler allows dispatcher pending event keeping UI responsive
Languages doEvents similar often implement thing provide access dispatcher running event handler
Basically event handler put event record end queue restarts return control dispatcher
This seems ideal solution
A long running event handler cooperatively yield thread execution event processed UI kept active
When event processed long running event handler resumed
It indeed good solution flaw serious many give advice avoided cost bad practice
It interrupted point code event handler could change thing using
Worse could even called result event queue
Most event handler reenterable thing could get complicated
However programmer aware difficulty make doEvents work
You take account fact shared resource could change doEvents reject attempt start event handler still active
Both usually easy achieve arguably much easier starting worker thread get job done
However beginner rule use doEvents safe one
Powered
Valid

