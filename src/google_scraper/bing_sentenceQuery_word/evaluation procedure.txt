Logo one powerful programming language around
In order take advantage power must understand Logo central idea It idea exploration Logo programming begin
In response Logo prompt type instruction Logo respond instruction printing number printing another question mark indicate ready another instruction Remember thing one type computer print
This instruction much important understand put together
The word name piece computer program particular specialized task
The procedure named example task printing thing screen
If previously used programming language may accustomed idea different making repertoire language
For example BASIC statement statement statement etc
Pascal assignment statement statement statement etc
Each kind statement special punctuation organization
Logo different
It different kind instruction Logo done use procedure
If Logo first programming language worry
But people previous experience another language common source misunderstanding
When first start Logo know procedure
These initial procedure called procedure
Your task Logo programmer add Logo repertoire defining new procedure
You putting together procedure already exist
We see done later chapter
The procedure although specific task always thing print anything want always number
You seen several example Chapter
This may seem like obvious point later see procedure important part make powerful
To control flexibility need way tell procedure exactly want
Therefore procedure accept particular number An input piece information
It number example examining many kind information Logo procedure handle
The procedure named requires one input
Other procedure require different number input require
In ordinary conversation word pretty much meaning refer process recipe method carrying task
That situation talking computer programming
Each word specific technical meaning important keep straight head reading chapter
Soon start using word also similar meaning ordinary use different meaning u
An type Logo tell something
example instruction
We see complicated instruction made piece
An instruction contain enough information specify want Logo
To make analogy instructing human being Read Chapter book instruction read one tell read
A like recipe technique carrying certain kind task
name procedure lemon meringue pie name recipe
The recipe distinct name bunch instruction Preheat oven degree
A procedure contains information something procedure take action recipe book ca bake pie
Someone carry recipe
In Logo world something procedure
To invoke procedure mean carry procedure say
Procedures invoked instruction
The instruction gave invoked procedure named
If instruction made name procedure procedure invoked instruction made instruction computer get caught vicious circle always finding detailed procedure invoke never actually anything
This question lot like one dictionary When look definition word find word
How know word mean
For word dictionary turn profound difficult question
For Logo programming answer much simpler
In end instruction procedure invoke must defined term primitive procedure
Those procedure made Logo instruction
They thing Logo know first place
Now try instruction If everything going according plan Logo print word printed number
The input expression Logo input passing procedure
This mean Logo invoked necessary procedure case compute value expression
In instruction word also name procedure
requires two input
In case gave number input
Just task procedure print something task procedure add two number
It result addition becomes
Do confuse In Logo word output one technical term I mentioned
It refers value one procedure computes hand another procedure need input
In example output number output anything another procedure
When print end story
There procedure waiting input
See figure instruction try Here step Logo take evaluate instruction That lot talking pretty simple instruction
I promise quite much detail
It important though able call upon understanding detail figure complicated situation later
Using output one procedure input another procedure called Some people find helpful look pictorial form analysis
We represent procedure kind tank input hopper top perhaps output pipe bottom
This organization make sense gravity pull information downward
For example one input represented hopper tank
It output pipe coming bottom
two input shown top output shown bottom
We put part together form kind plumbing diagram instruction In diagram output pipe one procedure connected input hopper another
Every pipe must connected something
The input explicitly given number instruction shown arrow pointing hopper
You annotate diagram indicating actual information flow pipe
Here would look instruction By way I introduced procedure casually might think law nature every programming language must procedure name
Actually detail Logo repertoire primitive procedure quite arbitrary
It would hard avoid way add number might named instead
For primitive additional arbitrary detail noncommutative operation example rule input come first arbitrary choice Logo designer
Experiment see describe well enough someone else use without needing experiment
I making point arbitrary nature detail people learning program sometimes think badly primitive procedure work advance
But rule thing work thing someone tell like capital Kansas
We observed Logo know advance many input particular procedure need
need one need two
What give procedure wrong number input
Try That word instruction input
You see something like This gentle complaint Logo tell two thing
First indicates general thing went wrong enough input procedure
Second name procedure complained
In case pretty obvious procedure involved since used one procedure
But try In case Logo message helpful pinpointing fact lacked input
The reason I beating error message death one common mistake made beginning programmer ignore error message say
Some people get upset seeing kind message give without trying figure problem
Other people make opposite mistake breezing past message without taking advantage detailed help offer
Some smart people
put lot effort designing error message please pay attention
What give procedure many input
Try The exact text message way may slightly different version Logo
What happened Logo carried instruction found extra number line
It would okay done something It okay one instruction line long complete instruction
What complete instruction
Before I answer question understand Logo two kind procedure command operation
An procedure computes value output
operation example
A procedure output value instead printing something screen moving turtle making sound
command
Some command effect apparent outside instead change something inside computer might become important later program
A complete instruction consists name command followed many expression necessary provide input
An something like
Operations used construct expression
More formally expression one two thing either explicitly provided value number else name operation followed many expression necessary provide input
For example expression consists operation name followed two expression number number
Numbers value seen provide explicitly change
So far example number arithmetic
Many people think computer arithmetic actually much interesting use computer kind information
You seen example text processing Chapter time going Suppose want Logo print word
You might try Logo interpreted word name procedure example earlier
The error message mean procedure named Logo repertoire
When Logo evaluating instruction always interprets unadorned word name procedure
In order convince Logo treat word simply must type quotation mark front Here quotation mark used purpose Logo In computer science something mean Another way say thing value evaluation evaluation
For example already seen Logo number automatically quoted
It hurt use quotation mark number however
Logo perfectly happy add number
People programmed language note quotation mark used pair Logo
This arbitrary syntactic foible reflects fact Logo different idea would called language
I urge program Logo even think Logo terminology
What want print one word
You combine several word form The easiest way enclose word square bracket tell Logo quote list
That list bracket evaluates list If square bracket quote list mean evaluate list
Well every instruction line type Logo actually list evaluated invoking procedure name
Most time remember instruction list fact become useful later
The list example contains three In example member word
For example first member word
But member list required word also list
The fact list another list member make list flexible way grouping information
For example list contains three member
The first third member list second member word
A list like represented using This diagram name tree resembles tree trunk top branch extending downward
Often tree diagram drawn labeled word make smallest sublists Keep mind square bracket Logo serve two purpose list show list begin end also list evaluator interprets list representing requesting invocation procedure
The bracket surround list list
Similarly quotation mark indicates quoted word part word
Words list two kind information Logo process
Numbers special case word
The name I use either word list A list word called It called flat tree diagram one level counting root top
The name sentence meant suggest flat list often although always used represent English sentence
A sentence special kind list number special kind word
We see kind list later
My high school history teacher fussy considered proper way color outline map
He would make u used color shading technique like
We humored good teacher way example gave u original historical document read instead boring textbook
I hope humor I tell right way wrong way talk procedure
If I teaching person understanding mistake I hit head gently course sloppy Here example wrong way add two number
It description true inadequate
It leaf much
Here example right way operation
It two input
Both input must number
The output number result adding two input
Here ingredient right way Another example The command one input
The input datum
The effect print input datum screen
Logo provides several primitive operation taking data apart putting data together
Words come apart letter digit punctuation mark
A character third kind datum
It word happens one character long
Lists come apart whatever data list
A sentence list word come apart word
operation take one input
The input nonempty datum
In moment see empty datum
The output first member input input list first character input word
Try example also operation take one input
The input nonempty datum
The output list containing first member input input list word containing first character input word Notice list word datum always another datum type
Also notice happens take datum one thing In case Logo printed blank line
In first case blank line represents empty word word character
The second blank line represents empty list list member
You indicate empty word instruction using quotation mark space RETURN key end instruction
To indicate empty list use bracket nothing inside Do understand make sense use empty word empty list input
Try see happens
You also notice list word
They look print act differently take
There also primitive operation
sure trouble guessing
Try practice describing properly
This probably good place mention Logo primitive procedure
For example abbreviation
abbreviation
There abbreviation
If want extract piece word list beginning end use general operation two input positive integer indicate member select word list
For example operation Logo also provides operation constructor
It take two input data
Its output always list
Describing output little tricky procedure serf two different purpose
The first purpose one suggested name constructing sentence
If use word sentence flat list input output sentence concatenating stringing together word contained input
Here example On hand also used append two list flat
With list input output list first input second input concatenated In second example output list four member two word two list
Using word input equivalent using list word single member
primitive operation treat word list seen earlier example treat word list differently
Another constructor list
Its input data output list whose member input member input
operation take two input
Both input must word
They may empty word
The output word formed concatenating character input word Selectors constructor composed way composed earlier
See work example try computer Other Logo dialect rule line continuation
In dialect everything type automatically taken one big line think
In book I indent continuation line make quite clear meant part instruction line
But Logo pay attention indentation
Here I analyze
The input output
The first input output
The first input second output
The input quoted word
The output word becomes first input second
The second input second output
The input output
The input quoted word
The output word becomes input
The output word becomes second input second
The output second word becomes first input first
The second input first output second
The input sentence
The output word becomes second input first
The output word becomes input
Finally print word
And plumbing diagram If made find easy predict instruction Remember number word combine arithmetic operation word list operation operation take one input
The input datum
The output number indicating length input
If input word output number character word
If input list output number member list
Because list often used represent English sentence conversational program like procedure Chapter print member list without enclosing bracket
This behavior could confusing list contains one member There visible difference word list
But two value actually quite different see use input The sentence first word even one word word first letter
To help distinguish word list Logo another printing command called display bracket around list Use program want carry conversation user English
Use using list represent structure sentence
You may hear people say something like Logo evaluates right left
What mean instruction Logo first evaluates next evaluates finally In word procedure named toward right end instruction line must invoked Logo know appropriate input value procedure farther left
This idea useful way helping understand evaluation Logo
But realize quite true
It work way instruction line contains one instruction procedure used instruction take one input
If look back one example procedure used see Logo really read instruction line left right
And two instruction line one left evaluated first
The reason seeming evaluation Logo evaluating procedure invocation collected evaluated input procedure
But Logo evaluating instruction line looking first word line
In example evaluation evaluation
So far evaluation process uniform
Logo look first word instruction interprets word name procedure
Logo know many input procedure requires
It evaluates many expression necessary assign value input
The expression evaluated way Logo look first word
Although evaluation process perfectly general Logo also provides couple special form evaluation make certain thing easier type
The computer science terminology special case kludge
The letter u word pronounced rude sludge
One special case Logo provides well used far
That say instead When use infix operation usual rule precedence apply multiplication division done addition subtraction unless use parenthesis
In word asterisk represents multiplication mean mean
You take note issue precedence arise prefix operation used
For example look expression Each indicates precisely order operation desired
The first example equivalent
Try converting others infix form
Which one require parenthesis
The second special form evaluation certain primitive procedure given extra input fewer input usual using parenthesis around procedure name input
Here example used number input
By way always permitted enclose procedure name input correct number
parenthesis even necessary make instruction readable
One earlier illustration example might easier read form Notice Logo placement parenthesis different function notation used algebra
In algebra say
In Logo would express idea
With tool ready begin writing new procedure
Type command special one
It one evaluate input
Remember earlier said Logo complained know
Well make kind complaint
Instead prepares
That called
What see screen something like Instead question mark Logo printed symbol prompt
This special prompt warns whatever instruction type wo carried immediately usual
Instead Logo remembers type part procedure named
Continue like The word name procedure
It special signal Logo finished defining procedure
Now try new procedure You also examine procedure asking Logo print
The command Print Out take one input word list
The input either name procedure word list name procedure
The effect print definition procedure named input
Here example Unlike like Logo procedure evaluate input
That word must quoted example
In procedure definition line starting called The line containing instruction naturally called We wo many occasion talk line containing word case call The command Print Out ProcedureS take input
Its effect print definition procedure defined
The command Print Out TitleS also take input print title line procedure defined
Some writer teacher reserve word procedure refer one write
They use word primitive noun mean thing like
They say thing like Logo instruction made procedure primitive
This big mistake
The procedure write procedure Logo happens know first place
It somebody else wrote primitive procedure
But use procedure exactly way use primitive procedure type name procedure Logo evaluates name invoking procedure
It okay say primitive abbreviation primitive procedure long know talking
Try defining procedure
You find quite enough tool yet make procedure interesting main problem take input exactly thing every time use
We solve problem next chapter
As may remember earlier experience Logo includes program allows make correction procedure defined
You also use editor write procedure definition first place
The editor work slightly differently version Logo consult manual computer Appendix A Berkeley Logo review detail
By way learning command forget accept list procedure name input single word
By listing several procedure input visible editing copy instruction one another
This powerful capability Logo editor beginner often neglect
Once gotten familiar Logo editor probably find wanting use time rarely choose define procedure invoking directly
Do get confused last sentence course type using editor type command Logo interpreter response question mark prompt
The editor make much easier correct typing mistake
Nevertheless need define short procedure middle something else may occasionally find simpler use rather wait editor start
Except special case Logo instruction follow rule meaning punctuation subexpression provides input procedure call
These called rule
The rule pay attention particular procedure mean input might might sensible procedure aspect program called fancy word meaning
You might say Logo plumber part Logo hook plumbing diagram know anything semantics
So example make mistake like get Logo error message might feel obvious meant would another person Logo figured done right thing
But computer smart people rely Logo syntax rule semantics program help Logo make sense write
To illustrate difference syntax semantics start examining following Logo instruction Here plumbing diagram The connection plumbing diagram depend number input output procedure used
Logo connects plumbing invoking procedure named instruction
The plumbing connected regardless whether specified input actually make sense procedure question
For example suppose make slight change instruction given The change interchanged
Since operation shape plumbing diagram unchanged
The plumbing connection syntactically fine Logo work expression provides input procedure call
However Logo get around invoking procedure input error message result second input number
This error
By contrast following instruction show error Logo unable figure plumbing diagram piece connect
The question mark diagram indicates missing input
In example programmer intended word second input programmer point view number desired second input really missing
But Logo know programmer intention Logo plumber follows uniform rule deciding input go procedure call
The rule Logo start looking input
The first thing find output hooked input
Now Logo looking two input
The next thing find output hooked first input
Now Logo looking two input syntax rule say Logo must find two input continue task finding second input
Logo plumber smart enough say Hey input I happen remember still need another input must programmer meant
There really two kind plumbing error
In one shown expression included instruction message result
The error many expression appear inside instruction
This may result message something extra expression within parenthesis
Parentheses used Logo instruction three reason readability show precedence infix operator include nonstandard number input certain primitive
In three case syntax rule everything inside parenthesis must form one single complete expression
In plumbing diagram term mean stuff inside parenthesis must correspond subdiagram input exactly one output unless entire instruction parenthesized case diagram output The dotted rectangle indicates subdiagram corresponding expression inside parenthesis
That rectangle input three input rectangle case source input recipient input inside
There recipient inside rectangle need source outside
The rectangle one output entire expression within rectangle provides input
The mathematical function notation used algebra often tempts beginning Logo programmer write example thinking plumbing diagram see would put one single expression inside parenthesis The part instruction inside parenthesis trying provide three output one
This violates rule
Also since word inside parenthesis procedure follows ordinary rule expects two input
To emphasize point plumbing diagram depends number input expected procedure purpose meaning procedure draw plumbing diagram nonsense instruction using unknown procedure
The rule game procedure name includes number indicating many input accepts
For example procedure requires two input
If procedure accept extra input used parenthesis put number ordinarily take three input given number input using parenthesis around subexpression invokes
We know procedure
The information need word instruction quoted others name procedure take known number input
This syntactically correct instruction procedure given exactly many input requires
Try chapter thread

In sequence program instruction perform specific task packaged unit
This unit used program wherever particular performed
Subprograms may defined within program separately used multiple program
In different programming language subroutine may called
The generic term sometimes used
The name suggests subroutine behaves much way computer program used one step larger program another subprogram
A subroutine often coded started called several time several place one execution program including subroutine branch back next instruction subroutine task done
credited invention concept termed contrasted
Subroutines powerful tool many includes support writing using
Judicious use subroutine example approach often substantially reduce cost developing maintaining large program increasing quality reliability
Subroutines often collected important mechanism sharing trading software
The discipline based subroutine attached object object
In method called executable program basically sequence subroutine call
The content subroutine body piece program code executed subroutine called invoked
A subroutine may written expects obtain one data value calling program replace formal parameter
The calling program provides actual value parameter called
Different programming language may use different convention passing argument The subroutine may return computed value caller provide various result value output parameter
Indeed common use subroutine implement purpose subroutine purely compute one result whose value entirely determined argument passed subroutine
Examples might include computing number
A subroutine call may also modifying reading writing creating halting program machine even delaying program execution specified time
A subprogram side effect may return different result time called even called argument
An example available many language return different number time called
The widespread use subroutine side effect characteristic language
A subroutine coded may one place perform task
This method allows direct implementation function defined recursive
A subroutine whose purpose compute one answer question sometimes called predicate
In language often subroutine called predicate since primarily determine success failure
For example type function subroutine main
usually include specific construct Some many distinguish function function subprogram provide explicit return value calling program subroutine procedure
In language function call normally embedded function may called
Procedure call either behave syntactically procedure may called explicitly invoked statement

Other language distinguish function subroutine
In strictly language subprogram mean various internal state program change
Functions always return result repeatedly called argument
Such language typically support function since subroutine return value use unless cause side effect
In subroutine may also simply called function confused different concept
A language usually translate procedure call return machine instruction according subroutine compiled separately program call
The instruction sequence corresponding call return statement called procedure
The advantage breaking program subroutine include Invoking subroutine versus using code imposes call mechanism
A subroutine typically requires standard code entry exit function usually saving return address minimum
The idea subroutine worked computing machine already existed time
The arithmetic conditional jump instruction planned ahead time changed relatively little special instruction used procedure call changed greatly year
The earliest computer microprocessor single subroutine call instruction
Subroutines could implemented required programmer use call series
Some early computer microprocessor subroutine call us dedicated hardware stack store return hardware support level subroutine nesting support recursive subroutine
Machines mid use saved instruction counter first memory location called subroutine
This allows arbitrarily deep level subroutine nesting support recursive subroutine
The one first computer subroutine call instruction feature support arbitrarily deep subroutine nesting also support recursive subroutine
In early assembler subroutine support limited
Subroutines explicitly separated main program indeed source code subroutine could interspersed subprogram
Some assembler would offer predefined generate call return sequence
By assembler usually much sophisticated support inline separately assembled subroutine could linked together
Even cumbersome approach subroutine proved useful
For one thing allowed use code many different program
Moreover memory scarce resource early computer subroutine allowed significant saving size program
Many early computer loaded program instruction memory
Each subroutine could provided separate piece tape loaded spliced main program mainline subroutine tape could used many different program
A similar approach applied computer used main input
The name originally meant library literal sense kept indexed collection tape collective use
To remove need computer designer eventually provided instruction whose operand instead location variable containing return address
On computer instead modifying subroutine return jump calling program would store return address variable subroutine completed would execute indirect jump would direct execution location given predefined variable
Another advance instruction combined saving return address calling jump thereby minimizing significantly
In IBM example branch instruction BAL BALR designed procedure calling would save return address processor register specified instruction
To return subroutine execute indirect branch instruction BR register
If subroutine needed register purpose calling another subroutine would save register content private memory location register
In system JSB instruction would perform similar task except return address stored memory location target branch
Execution procedure would actually begin next memory location
In HP assembly language one would write example call subroutine called MYSUB main program
The subroutine would coded The JSB instruction placed address NEXT instruction namely BB location specified operand namely MYSUB branched NEXT location namely AA MYSUB
The subroutine could return main program executing indirect jump JMP MYSUB I branched location stored location MYSUB
Compilers Fortran language could easily make use instruction available
This approach supported multiple level call however since return address parameter return value subroutine assigned fixed memory location allow recursive call
Incidentally similar method used early discover recalculation dependency spreadsheet
Namely location reserved cell store address
Since allowed natural recalculation order allows tree walk without reserving space stack memory limited small computer
Most modern implementation use special case implement subroutine call return
Each procedure call creates new entry called top stack procedure return stack frame deleted stack space may used procedure call
Each stack frame contains corresponding call typically includes procedure parameter internal variable return address
The call sequence implemented sequence ordinary instruction approach still used RISC VLIW architecture many traditional machine designed since late included special instruction purpose
The call stack usually implemented contiguous area memory
It arbitrary design choice whether bottom stack lowest highest address within area stack may grow forward backwards memory however many architecture chose latter
Some design notably implementation used two separate stack one mainly control information like return address loop counter data
The former worked like call stack indirectly accessible programmer language construct latter directly accessible
When procedure call first introduced important motivation save precious memory
With scheme compiler reserve separate space memory private data parameter return address local variable procedure
At moment stack contains private data call currently namely called returned yet
Because way program usually assembled library still uncommon find program include thousand subroutine handful active given moment
For program call stack mechanism could save significant amount memory
Indeed call stack mechanism viewed earliest simplest method
However another advantage call stack method allows since nested call procedure get separate instance private data
One disadvantage call stack mechanism increased cost procedure call matching return
The extra cost includes incrementing decrementing stack pointer architecture checking accessing local variable parameter address instead absolute address
The cost may realized increased execution time increased processor complexity
This overhead obvious objectionable return without making procedure call
To reduce overhead many modern compiler try delay use call stack really needed
For example call procedure may store return address parameter called procedure certain processor register transfer control procedure body simple jump
If procedure return without making call call stack used
If need call another procedure use call stack save content register return address needed return
In programming language subprogram termed classified associated
These language use special keyword indicate function take parameter especially C return value
Note function including modifying variable whose address passed parameter
Examples The function return value called function This function return result number call part expression This function convert number initial letter corresponding day week namely
The result calling might assigned variable
This function return value modifies variable whose address passed parameter would called
In example call subroutine define actual subroutine keyword must used subroutine name following
After content followed must typed
In language subprogram termed associated class
Visual Basic us various term called define passed parameter
By default unspecified variable registered passed default
Also function sub declared given public private friend designation determines whether accessed outside module project declared
The function return value called function This function return result number call part expression This function convert number initial letter corresponding day week namely
The result calling might assigned variable
This function return value modifies variable whose address passed parameter would called
In called procedure may passed providing information argument string length array bound
This allows procedure general eliminates need programmer pas information
By default pass argument reference
A trivial subroutine change sign element array might look like This could called various array follows A subprogram may find useful make use certain amount space used execution subprogram hold intermediate result
Variables stored scratch space termed scratch space termed
An activation record typically tell pas control back subprogram finish
A subprogram may number nature call site
If recursion supported subprogram may even call causing execution suspend another execution subprogram occurs
useful mean simplify complex algorithm break complex problem
Recursive language generally provide new copy local variable call
If programmer desire value local variable stay call declared language global value common area used
Here example recursive subroutine find number Early language like initially support recursion variable statically allocated well location return address
Most computer late support hardware stack register
Modern language almost invariably use stack usually supported modern computer instruction set provide fresh activation record every execution subprogram
That way nested execution free modify local variable without concern effect suspended execution progress
As nested call accumulate structure formed consisting one activation record suspended subprogram
In fact stack structure virtually ubiquitous activation record commonly termed
Some language also support subroutine callable within outer parent subroutine
Inner subroutine access local variable outer subroutine called
This accomplished storing extra context information within activation record also termed
If subprogram executed properly even another execution subprogram already progress subprogram said
A recursive subprogram must reentrant
Reentrant subprogram also useful situation since multiple thread call subprogram without fear interfering
In slightly le restrictive similar requirement application program shared many thread
In environment generally one stack
An environment fully support may use data structure stack store activation record
In sometimes desirable number function name operating different type data different parameter profile
For example square root function might defined operate real complex value matrix
The algorithm used case different return result may different
By writing three separate function name programmer convenience remember different name type data
Further subtype defined real separate positive negative real two function written real one return real parameter positive another return complex value parameter negative
In series function name accept different parameter profile parameter different type function said
Here example subroutine overloading In code two function name different parameter
As another example subroutine might construct accept direction trace path point screen
There plethora parameter could passed constructor colour trace starting x trace speed
If programmer wanted constructor able accept color parameter could call another constructor accepts color turn call constructor parameter passing set parameter X Y would generally centered screen placed origin speed would set another value coder choosing
A subprogram together value variable captured environment created
Closures notable feature Lisp programming language introduced
Depending implementation closure serve mechanism
A wide number convention coding subroutine developed
Pertaining naming many developer adopted approach name subroutine certain task make inquiry used substitute variable
Some programmer suggest subroutine perform one task subroutine perform one task split subroutine
They argue subroutine key component role program must remain distinct
Proponents modularizing code advocate subroutine minimal dependency piece code
For example use generally deemed unwise advocate perspective add tight coupling subroutine global variable
If coupling necessary advice subroutine accept passed instead
However increasing number parameter passed subroutine affect code readability
Besides effect subroutine may need inform calling program condition may occurred execution
In language programming standard often done integer value placed subroutine standard location encodes normal exceptional condition
In return code expected subroutine return value often designed multiple could used direct index branch table often located immediately call instruction avoid extra conditional test improving efficiency
In one would write example There significant runtime calling subroutine including passing argument branching subprogram branching back caller
The overhead often includes saving restoring certain processor register allocating reclaiming call frame storage
In language subroutine call also implies automatic testing subroutine return code handling may raise
In language significant source overhead intensively used method call
There seemingly obvious optimization procedure call applied procedure may side effect
For example expression function must called twice two call may return different result
Moreover value must fetched second call since first call may changed
Determining whether subprogram may side effect difficult indeed
So optimization safe purely functional programming language compiler typical imperative programming usually assume worst
A method used eliminate overhead subprogram body versus branching subroutine back
Not avoid call overhead also allows procedure effectively taking account context argument call
The inserted body optimized compiler
Inlining however usually increase code size unless program contains one call subroutine subroutine body le code call overhead

âãÏÓ obj endobj xref n n n n n n n n n n n n n n trailer startxref EOF obj stream xÚb ÈÂÀÑ á gÙe
Å
endstream endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj stream wðÅþ
VË Öyë

method solution problem depends solution smaller instance problem opposed
The approach applied many type problem one central idea computer science
The power recursion evidently lie possibility defining infinite set object finite statement
In manner infinite number computation described finite recursive program even program contains explicit repetition
Most computer programming language support recursion allowing call within program text
Some define looping construct rely solely recursion repeatedly call code
prof language computationally powerful Turing complete imperative language meaning solve kind problem imperative language even without iterative control structure
A common tactic divide problem type original solve combine result
This often referred combined store result solving avoid solving repeatedly incurring extra computation time referred
A recursive function definition one meaning input function produce result without recurring one meaning input program recurs call
For example function defined recursively equation
Neither equation constitutes complete definition first base case second recursive case
Because base case break chain recursion sometimes also called terminating case
The job recursive case seen breaking complex input simpler one
In properly designed recursive function recursive call input problem must simplified way eventually base case must reached
Functions intended terminate normal example exception
Neglecting write base case testing incorrectly cause
For function one computes obvious base case implied input data one may add number term added series example provide criterion establishes base case
Such example naturally treated successive term output partial sum converted recursion using indexing parameter say compute th term th partial sum
Many must process generate arbitrarily large quantity
Recursion one technique representing data whose exact size know programmer specify data definition
There two type definition inductive definition
An inductively defined recursive data definition one specifies construct instance data
For example defined inductively using syntax The code specifies list string either empty structure contains string list string
The definition permit construction list finite number string
Another example inductive positive Similarly recursive often used model structure programming language
Language designer often express grammar syntax grammar simple language arithmetic expression multiplication addition This say expression either number product two expression sum two expression
By recursively referring expression second third line grammar permit arbitrarily complex arithmetic expression one product sum operation single expression
A coinductive data definition one specifies operation may performed piece data typically coinductive definition used data structure infinite size
A coinductive definition infinite string given informally might look like This similar inductive definition list string difference definition specifies access content data via function content may whereas inductive definition specifies create structure may created
related coinduction used compute particular instance possibly infinite object
As programming technique used often context programming language preferable recursion desired size precision program output unknown
In case program requires definition infinitely large infinitely precise result mechanism taking finite portion result
The problem computing first n one solved corecursive program

Recursion contains single known recursion contains multiple known
Standard example single recursion include list traversal linear search computing factorial function standard example multiple recursion include search
Single recursion often much efficient multiple recursion generally replaced iterative computation running linear time requiring constant space
Multiple recursion contrast may require exponential time space fundamentally recursive able replaced iteration without explicit stack
Multiple recursion sometimes converted single recursion desired thence iteration
For example computing Fibonacci sequence naively multiple iteration value requires two previous value computed single recursion passing two successive value parameter
This naturally framed corecursion building initial value tracking step two successive value see
A sophisticated example using allows iterative tree traversal rather multiple recursion
Most basic example recursion example presented demonstrate function call
recursion occurs function called another function called either directly indirectly
For example call direct recursion call call indirect recursion Chains three function possible example function call function function call function function call function
Indirect recursion also called symmetric term though simply difference emphasis different notion
That call call turn call point view alone indirectly recursing point view alone indirectly recursing point view mutually recursing
Similarly set three function call called set mutually recursive function
Recursion usually done explicitly calling function name
However recursion also done via implicitly calling function based current context particularly useful known
Some author classify recursion either structural generative
The distinction related recursive procedure get data work process data Functions consume structured data typically decompose argument immediate structural component process component
If one immediate component belongs class data input function recursive
For reason refer function STRUCTURALLY RECURSIVE FUNCTIONS
Thus defining characteristic structurally recursive function argument recursive call content field original input
Structural recursion includes nearly tree traversal including XML processing binary tree creation search etc
By considering algebraic structure natural number natural number either zero successor natural number function factorial may also regarded structural recursion
alternative Many recursive algorithm generate entirely new piece data given data recur
refers kind generative recursion
Examples generative recursion include
This distinction important function
A classic example recursive procedure function used calculate The function also written This evaluation recurrence relation demonstrates computation would performed evaluating pseudocode This factorial function also described without using recursion making use typical looping construct found imperative programming language The imperative code equivalent mathematical definition using accumulator variable The definition translates straightforwardly example iteration implemented recursively
The computes two integer written recursively
Function definition greatest common divisor express The recursive program equivalent iterative algorithm computation shown show step evaluation would performed language eliminates tail call
Below version algorithm using explicit iteration suitable language eliminate tail call
By maintaining state entirely variable using looping construct program avoids making recursive call growing call stack
The iterative algorithm requires temporary variable even given knowledge Euclidean algorithm difficult understand process simple inspection although two algorithm similar step
The Towers Hanoi mathematical puzzle whose solution illustrates recursion
There three peg hold stack disk different diameter
A larger disk may never stacked top smaller
Starting disk one peg must moved another peg one time
What smallest number step move stack
Example implementation Although recursive function explicit solution Tower Hanoi sequence reduced explicit formula
The algorithm method searching single element cutting array half recursive pas
The trick pick midpoint near center array compare data point data searched responding one three possible condition data found midpoint data midpoint greater data searched data midpoint le data searched
Recursion used algorithm pas new array created cutting old one half
The binary search procedure called recursively time new smaller array
Typically array size adjusted manipulating beginning ending index
The algorithm exhibit logarithmic order growth essentially divide problem domain half pas
Example implementation binary search C An important application recursion computer science defining dynamic data structure
Recursive data structure dynamically grow theoretically infinite size response runtime requirement contrast size static array must set compile time
Recursive algorithm particularly appropriate underlying problem data treated defined recursive term
The example section illustrate known structural recursion
This term refers fact recursive procedure acting data defined recursively
As long programmer derives template data definition function employ structural recursion
That recursion function body consume immediate piece given compound value
Below C definition linked list node structure
Notice especially node defined term
The next element pointer another effectively creating list type
Because data structure defined recursively procedure operate implemented naturally recursive procedure
The procedure defined walk list list empty list pointer value NULL
For node print data element integer
In C implementation list remains unchanged procedure
Below simple definition binary tree node
Like node linked list defined term recursively
There two pointer left pointing left right pointing right
Operations tree implemented using recursion
Note two pointer left right tree operation may require two recursive call At two recursive call made given call defined
The example illustrates binary tree
A special case binary tree data element node order
Since number file may vary practical way traverse thus enumerate content
Traversing filesystem similar therefore concept behind tree traversal applicable traversing filesystem
More specifically code would example filesystem
This code blend line least somewhat recursion
It essentially recursive implementation best way traverse
It also example direct indirect recursion
The method rtraverse purely direct example method traverse indirect call rtraverse
This example need base case scenario due fact always fixed number file directory given filesystem
In actual implementation rather pure recursive function single check base case otherwise recursive step number modification may made purpose clarity efficiency
These include On basis elegance wrapper function generally approved base case frowned upon particularly academia
Hybrid algorithm often used efficiency reduce overhead recursion small case recursion special case
A function directly called recurse instead calling separate auxiliary function actually recursion
Wrapper function used validate parameter recursive function skip perform initialization allocate memory initialize variable particularly auxiliary variable level recursion partial computation handle exception error
In language support auxiliary function nested inside wrapper function use shared scope
In absence nested function auxiliary function instead separate function possible private called directly information shared wrapper function using
base case also known consists checking base case making recursive call checking next call base case instead calling checking base case
particularly done efficiency reason avoid overhead function call immediately return
Note since base case already checked immediately recursive step need checked separately one need use wrapper function case overall recursion start base case
For example factorial function properly base case
immediately returning
may miss mitigated wrapper function
primarily concern many base case encountered Null pointer tree linear number function call hence significant saving algorithm illustrated search
tree corresponds considering leaf node child base case rather considering empty node base case
If single base case computing factorial provides saving
Conceptually considered either base case recursive step checking base case recursion considered different base case one step removed standard base case complex recursive step namely check valid recurse considering leaf node rather Null node base case tree
Because complicated flow compared clear separation base case recursive step standard recursion often considered poor style particularly academia
A basic example given DFS binary tree see section standard recursive discussion
The standard recursive algorithm DFS In instead In term standard step move base case check recursive step
Alternatively considered different form base case recursive step respectively
Note requires wrapper function handle case tree empty root node Null
In case height node Null pointer child leaf cut number function call half worst case
In C standard recursive algorithm may implemented The algorithm may implemented Note use Boolean AND operator recursive call made node valid
Note first term AND pointer node second term bool overall expression evaluates bool
This common idiom recursive
This addition evaluation Boolean OR operator check right child left child fails
In fact entire function replaced single Boolean expression return statement legibility suffers benefit efficiency
Recursive algorithm often inefficient small data due overhead repeated function call return
For reason efficient implementation recursive algorithm often start recursive algorithm switch different algorithm input becomes small
An important example often implemented switching data sufficiently small
Hybrid recursive algorithm often refined derived hybrid merge sort
Recursion iteration equally expressive recursion replaced iteration explicit stack iteration replaced tail recursion
Which approach preferable depends problem consideration language used
In iteration preferred particularly simple recursion avoids overhead function call call stack management recursion generally used multiple recursion
By contrast recursion preferred tail recursion optimization leading little overhead sometimes explicit iteration available
Compare template compute x defined x f n x x For imperative language overhead define function functional language overhead define accumulator variable x
For example factorial function may implemented iteratively C assigning loop index variable accumulator variable rather passing argument returning value recursion Most use today allow direct specification recursive function procedure
When function called program keep track various instance function often using although method may used
Every recursive function transformed iterative function replacing recursive call simulating call stack explicitly managed program
Conversely iterative function procedure evaluated computer see expressed term recursive function iterative control construct routinely rewritten recursive form
However practice rewriting depends feature language
notable mainstream language function call including may cause stack allocation would occur use looping construct language working iterative program rewritten recursive form may although tail call elimination may feature covered language specification different implementation language may differ tail call elimination capability
In language favor iterative looping construct usually significant time space cost associated recursive program due overhead required manage stack relative slowness function call function call particularly typically fast operation difference usually le noticeable
As concrete example difference performance recursive iterative implementation factorial example depends highly compiler used
In language looping construct preferred iterative version may much several order magnitude faster recursive one
In functional language overall time difference two implementation may negligible fact cost multiplying larger number first rather smaller number iterative version given happens may overwhelm time saved choosing iteration
In programming language maximum size much le space available recursive algorithm tend require stack space iterative algorithm
Consequently language sometimes place limit depth recursion avoid stack overflow one language
Note caveat regarding special case
Multiply recursive problem inherently recursive prior state need track
One example contrast list traversal linear search list singly recursive thus naturally iterative
Other example include function
All algorithm implemented iteratively help explicit programmer effort involved managing stack complexity resulting program arguably outweigh advantage iterative solution
function function recursive call hence build deferred operation
For example gcd function shown
In contrast factorial function also recursive call tail position build deferred multiplication operation must performed final recursive call completes
With treat call rather function call function gcd execute using constant space
Thus program essentially iterative equivalent using imperative language control structure like loop
The significance tail recursion making call tail call caller return position need saved recursive call return branch directly previously saved return position
Therefore language recognize property tail call tail recursion save space time
In simple case function calling instruction placed recursive call executed per recursion instruction placed recursive call
The latter executed repeatedly maximum recursion reached
Consider example The recursive algorithm expressed
They usually simplified single term
If function form Then thus represents number recursive call level recursion represents factor smaller input next level recursion
number piece divide problem represents work function independent recursion
partitioning recombining level recursion

If need know visa eligibility short question
If immigration issue unclear visa option
If want VisaPro expert guidance accurate preparation case
The visa one work visa offer wide range employment possibility USA
The visa allows foreign national specialty occupation enter work variety field including accounting architecture engineering modeling medicine health
immigration law state specialty occupation must require The visa support dual intent mean apply Green Card status
The regulation allow applicant
A bachelor degree accredited recognized foreign university college generally considered equivalent bachelor degree
In case unless education completed Credentials Evaluation showing equivalency bachelor degree required obtain visa
Thus wish come specialty occupation visa degree foreign degree submit evaluation petition
If le degree USCIS allows combine degree multiple degree
The regulation also allow combine progressive work experience field university study case use work experience alone meet equivalency requirement
The regulation specifically state purpose three year progressive work experience field considered equivalent one year university study
This article answer important question
A Credential Evaluation visa procedure seek
If seeking foreign degree evaluation visa purpose USCIS requires report include equivalency statement along brief information institution study completed
A credential evaluation usually contains description education credential including degree awarded year awarded name institution attended major field study together opinion evaluator whether foreign degree education equivalent bachelor degree
A credential evaluation typically evaluation education credential foreign national
It comment evaluate foreign national work experience training unless individual seeking evaluation taking advantage rule three year work experience one year education

Because visa requires applicant bachelor degree equivalent USCIS must evidence
Act Now free spot fill fast
Harry British national seeking job US electrical engineer
He completed apprenticeship electrician year ago
The apprenticeship extensive approximately year classroom work together training
The classroom work covered theory physic electricity well technical aspect job
With Harry apprenticeship year progressive experience leading current job South Africa electrical engineer education credential evaluator USCIS found equivalent bachelor degree Electrical Engineering
He got petition approved happily working US
The equivalency United States bachelor advanced degree determined one following route Michael graduated thought university Sweden degree computer science
He seeking job IT industry US software engineer
He want spend money evaluation believe needed credential evaluation degree computer science everybody know reputable university
Unfortunately Michael USCIS officer reviewing case disagreed asked credential evaluation Request Evidence
When Michael sought credential evaluation found degree program accredited country education system would deemed equivalent degree
Michael employer withdraw application
Michael reluctance spend money evaluation cost employer lot time money aggravation
US immigration regulation limit scope foreign credential evaluator evaluating foreign education experience

Obtaining appropriate foreign degree evaluation qualified source filing petition help avoid RFEs potential denial
Contact VisaPro Law Firm today FREE Visa Consultation
We talk priority recommend strategy filing visa based attorney near success rate
VisaPro attorney handled complex foreign credential evaluation visa involving degree around world assist procuring suitable evidence analyzing specialty occupation position foreign national background
Knowledgeable fast courteous efficient word describe service I received VisaPro
They helpful phase visa process got right first time
I tried Visa service VisaPro best far
VisaPro way go


Until using procedure Scheme already know begin working
In chapter find create new procedure
A Scheme program consists one A procedure description process computer work result want
Here define procedure return square argument The value returned may differ depending version Scheme using
Many version return name procedure defining others return something else
It matter use interested returned value rather fact Scheme remembers new definition later use
This definition procedure called
take one argument number return square number
Once defined use way use primitive procedure This procedure definition four part
The first word indicates defining something
The second third come together inside parenthesis name want give procedure name want use argument
This arrangement chosen designer Scheme look like form procedure invoked
That look like
The fourth part definition expression whose value provides function return value
exception evaluation rule going
Usually expression represents procedure invocation general rule Scheme first evaluates subexpressions applies resulting procedure resulting argument value
The specialness special form Scheme evaluate subexpressions
Instead special form particular evaluation rule
For example defined part definition evaluated
It would make sense evaluate ca invoke procedure define
It would possible describe special form using following model Certain procedure want argument unevaluated Scheme recognizes
After refraining evaluating argument example Scheme invokes procedure unevaluated argument
But fact designer Scheme chose think differently
The entire special form start completely different kind thing procedure call
In Scheme procedure named
In fact name anything Nevertheless book unless really important make distinction talk procedure called
For example talk argument value returned invoking
Throughout book procedure describe process compute A function connection value already know new value want find
For example function take number input value return another number case output value
The function take noun computer return another word computer example
The technical term input value A function may take one argument example function take two argument
It return one value remainder dividing first argument second case
We said earlier procedure description process computer work result want
What mean
Consider two definition say two procedure represent function
In real life function always represented procedure
We could represent function showing possible value like We say procedure want discus operation telling Scheme carry
We say function represented attention focused value returned rather mechanism
But often abbreviate lengthy second phrase function unless context especially confusing
It long said Knight beautiful
Everybody hears sing brings eye Or else
said Alice Knight made sudden pause
Or else know
The name song called Oh name song
Alice said trying feel interested
No understand Knight said looking little vexed
That name The name really rsquo Then I ought said That called Alice corrected
No ought quite another thing
The called lsquo rsquo know Well song
said Alice time completely bewildered
I coming Knight said
The song really lsquo tune Lewis Carroll Notice procedure gave argument
By contrast provided argument
The word place holder definition stand whatever value use call procedure
So read definition saying In order number multiply The name hold place particular number mean
Be sure understand distinction defining procedure calling
A procedure represents general technique applied many specific case
We want build particular case procedure definition want definition express general nature technique
You would want procedure knew take square
But actually get around using specific number squaring
The name name argument whew
In example formal parameter
You may hear people say either formal alone parameter alone feeling lazy
The technical term actual value argument In case like may want distinguish
Most time perfectly clear mean say argument thing right learning idea important able talk precisely
The procedure take one argument
If procedure requires one argument question arises actual argument go formal parameter
The answer go order write like What average
To answer question could add two number getting divide two getting
You could ask Scheme What average
Once understand technique could answer question typing expression form Scheme
But going faced problem obvious next step technique defining procedure With definition think next problem come along term problem rather term step required solution This example meant defined abstraction noticing pattern giving name
It different naming pattern English someone invented name average probably noticing often useful find value halfway two value
This naming process important sound name idea use idea without thinking piece
For example suppose want know average number also measure whether number clumped together close average widely spread
Statisticians developed standard deviation measure second property
You rather think mysterious formula happy use procedure found collection statistical program
After law nature say computer automatically know add subtract
You could imagine instruct Scheme compute sum two large number digit digit way elementary school
But instead someone taught computer add get giving technique name ask sum two number without thinking step required
By inventing extending repertoire computation ask without concerning detail
We suggested procedure define essentially similar one built Scheme
In particular rule building expression whether building block primitive procedure defined procedure
Any return value used end return value used last example provide argument another procedure return value used first example
These small example may seem arbitrary idea composition function basis Scheme programming
For example complicated formula gave standard deviation requires computing square several number
So write procedure would invoke
We paid lot attention detail formal parameter actual argument little handwavy procedure actually computes value invoke
We going explain happens invoke procedure
Every explanation story
No story tell entire truth always detail left
A story enough detail help understand whatever trying explain much detail ca see forest tree
Today story model
When procedure invoked goal carry computation described body
The problem body written term formal parameter computation use actual argument value
So Scheme need way associate actual argument value formal parameter
It making new copy body procedure substitute argument value every appearance formal parameter evaluating resulting expression
So defined body
When want know square particular number Scheme substitute everywhere body square evaluates expression
In word Scheme take substitution getting evaluates expression getting
If type Scheme get error message complaining mean anything
Only substitution become meaningful expression
By way talk substituting body mean procedure definition changed permanent way
The body procedure change happens said Scheme construct new expression look like body except substitution
There little people specialize little people specialize
The difference little people primitive procedure work head
The little people carry procedure go substitution business talking
Then hire little people help evaluate resulting expression Alonzo hire people help evaluate expression type directly Scheme
Let say Sam little person specializes asked compute
Sam carry substitution left expression evaluate
Sam hire Tessa multiplication specialist evaluate new expression
Tessa tell Sam answer multiplication entire problem solved Sam answer also
Here another example Suppose Alonzo hire Harry compute expression
Harry must first substitute actual argument value body Now evaluates expression Alonzo would evaluate typed Scheme prompt
That Harry hire four little people one expert one expert two expert
In particular little person evaluate substituting body earlier example
Similarly substitute order evaluate Do forget heady rush learning substitution model already knew Each piece computation done little person little person waiting result
In word substitution model tell u carried change picture way procedure invocation larger expression
Do forget function return value
For example program supposed return sum square two argument The problem body procedure two expression instead one
As turn Scheme ignores value first expression case like return value last one
What programmer want two value procedure say Another pitfall come thinking procedure call change value parameter
Here faulty program supposed compute function described Again first expression effect Scheme return value
A common pitfall Scheme come choosing name procedure parameter
It come often procedure like one chapter whose domain range number likely later
If program like get trouble invoke procedure example saying
The little person substitute everywhere procedure definition leaving expression evaluate
That expression would mean apply procedure argument procedure error message result
It problem formal parameter name procedure use inside body
The problem arises try use name two meaning within single procedure
But special form exception never use name special form parameter
A similar problem name conflict come try use keyword name special form kind formal parameter name procedure defining
We listing separately result likely different
Instead getting wrong value substituted probably see special error message along line improper use keyword
Formal parameter word
Some people try write procedure compound expression formal parameter like Remember job procedure definition provide argument
The argument pinned invoke procedure
People write program like one trying make procedure definition job procedure invocation
Consider procedure Show substitution occurs evaluate Given following procedure list little people involved evaluating Give name specialty argument hire answer
Here procedure definition
For one describe function English show sample invocation show result invocation
Each following procedure definition error kind
Say wrong fix Write procedure convert temperature Fahrenheit Celsius another convert direction
The two formula
Define procedure computes fourth power argument
Do two way first using multiplication function using directly using multiplication
Write procedure computes absolute value argument finding square root square argument
Scientific notation way represent small large number combining number power
For example represents number represents scientific notation
Write procedure take two argument number exponent return corresponding value Some version Scheme represent fraction form use scientific notation might see result last example instead value
A harder problem hotshot Can write procedure go direction
So You might find primitive procedure helpful
Define procedure take two argument initial price percentage discount
It return new price Write procedure compute tip leave restaurant
It take total bill argument return amount tip
It tip know round total amount money leave tip plus original bill whole number dollar
Use procedure round
Also sometimes use term domain range talking procedure although technically function domain range
You know wave hand around air instead explaining mean
You may thinking rather inefficient way copying replacement actually compute anything
Perhaps afraid Scheme program run slowly result
Do worry
It really happens different way effect except speed
Until started defining procedure chapter little people hired Alonzo expression typed directly Scheme prompt
Now expression come body procedure little people needed compute expression hired little person computing procedure
Notice also little person another little person necessarily one
In case Harry hire Shari Paul Slim Sydney two Slim report Paul Harry
Only Shari report directly Harry
This especially problematic people used program language like Pascal BASIC say thing like time
chapter thread

µµµµ obj endobj obj endobj obj R R R R R R R R endobj obj stream ì OÀxÃy bÃB A I ÝwÖ Oæp ud S ü endstream endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj stream T KQ ø Áa é B ü ûúWæÉæÀ Tì ð hÈC Å êÈj endstream endobj obj stream pÛ Z ùÉÓO ã TL ÖÔ deI Z ZêµgÏM À Â õ Ð aE æþÜ wêµlöbÕáþÔ öí atðØää
u ê ÖÔ cÔwG Ô
HØ V Ô öVËÍZí ß jý ARô

Campus Box Oval Drive Engineering Building II Raleigh NC

âãÏÓ obj endobj xref n n n n n n n n n n n n n n trailer startxref EOF obj stream xÚb

Computer science also strong connection discipline
Many problem science engineering health care business area solved effectively computer finding solution requires computer science expertise knowledge particular application domain
Thus computer scientist often become proficient subject
Finally computer science wide range specialty
These include computer architecture software system graphic artifical intelligence computational science software engineering
Drawing common core computer science knowledge specialty area focus particular challenge
Finally importantly computer scientist computer scientist fun
Not mention lucrative career opportunity
Computer Science The Profession Computer science discipline involves understanding design computer computational process
In general form concerned understanding information transfer transformation
Particular interest placed making process efficient endowing form intelligence
The discipline range theoretical study algorithm practical problem implementation term computational hardware software
A central focus process handling manipulating information
Thus discipline span advancing fundamental understanding algorithm information process general well practical design efficient reliable software hardware meet given specification
Computer science young discipline evolving rapidly beginning
As includes theoretical study experimental method engineering design one discipline
This differs radically physical science separate understanding advancement science application science field engineering design implementation
In computer science inherent intermingling theoretical concept computability algorithmic efficiency modern practical advancement electronics continue stimulate advance discipline
It close interaction theoretical design aspect field bind together single discipline
Because rapid evolution difficult provide complete list computer science area
Yet clear crucial area theory algorithm data structure programming methodology language computer element architecture
Other area include software engineering artificial intelligence computer networking communication database system parallel computation distributed computation interaction computer graphic operating system numerical symbolic computation
A professional computer scientist must firm foundation crucial area field likely knowledge one area discipline depending upon person particular area practice
Thus well educated computer scientist able apply fundamental concept technique computation algorithm computer design specific design problem
The work includes detailing specification analysis problem provides design function desired satisfactory performance reliable maintainable meet desired cost criterion
Clearly computer scientist must sufficient training computer science area able accomplish task must also firm understanding area mathematics science well broad education liberal study provide basis understanding societal implication work performed
Computer Science study principle application technology computing computer
It involves study data data structure algorithm process structure principle computer hardware software design methodology topic numerical analysis operation research artificial intelligence language design structure translation technique
Computer Science provides foundation knowledge student career objective wide range computing profession
The study efficient effective software development technique
Team work communication skill
An interest applying technology problem wide variety discipline
Computer Science concerned information much sense physic concerned energy devoted representation storage manipulation presentation information
Computer Science concerned study machine communication man machine application machine
Major area Computer Science include
Operating Systems concerned development structure complex program facilitate communication

Computational Science analysis numerical method solving mathematical problem computer

Programming Languages study design property language human communicate computer

Architecture study use mathematical logic design electronic circuit

Intelligent Systems concerned mean computer may perform task might characterized intelligent performed human

Automata Theory abstract study computer capability

Information Storage Retrieval study method storing vast amount data computer method searching retrieving data

Software Engineering study tool technique software design development testing maintenance

