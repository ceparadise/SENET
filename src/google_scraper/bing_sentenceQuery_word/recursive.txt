learn share knowledge build career
One topic seems come regularly mailing list online discussion merit lack thereof Computer Science Degree
An argument seems come time negative party coding number year never used recursion
So question This question exists historical significance please use evidence ask similar question
This question answer frozen changed
More info
There number good explanation thread answer use language
In majority major imperative language implementation
every major implementation C Basic Python Ruby Java C vastly preferable recursion
To see walk step language use call function Doing step take time usually little bit take iterate loop
However real problem step
When many program start allocate single chunk memory stack run memory often always due recursion program crash due
So language recursion slower make vulnerable crashing
There still argument using though
In general code written recursively shorter bit elegant know read
There technique language implementers use called eliminate class stack overflow
Put succinctly function return expression simply result function call need add new level onto stack reuse current one function called
Regrettably imperative optimization built
By way Mario typical name ArrangeString function join I surprised language choice already implementation
Simple english example recursion
In basic computer science sense recursion function call
Say linked list structure And want find long linked list recursion This could course done loop well useful illustration concept Whenever function call creating loop recursion
As anything good us bad us recursion
The simple example tail recursion last line function call However lame almost pointless example easily replaced efficient iteration
After recursion suffers function call overhead example could substantial compared operation inside function
So whole reason recursion rather iteration take advantage clever stuff
For example call function multiple time different parameter inside loop way accomplish
A classic example
You draw one simply recursion call stack branch direction If attempt thing iteration I think find take lot code accomplish
Other common use case might include traversing hierarchy
website crawler directory comparison etc
In practical term recursion make sense whenever need iterative branching
Recursion method solving problem based divide conquer mentality
The basic idea take original problem divide smaller easily solved instance solve smaller instance usually using algorithm reassemble final solution
The canonical example routine generate Factorial The Factorial n calculated multiplying number An iterative solution C look like There nothing surprising iterative solution make sense anyone familiar C
The recursive solution found recognising nth Factorial n Fact
Or put another way know particular Factorial number calculate next one
Here recursive solution C The first part function known sometimes Guard Clause prevents algorithm running forever
It return value whenever function called value le
The second part interesting known
Here call method slightly modified parameter decrement multiply result copy When first encountered kind confusing instructive examine work run
Imagine call FactRec
We enter routine picked base case end like If method parameter stopped guard clause end If substitute return value return value get This give clue final solution arrived fast track show step way That final substitution happens base case triggered
At point simple algrebraic formula solve equates directly definition Factorials first place
It instructive note every call method result either base case triggered call method parameter closer base case often called recursive call
If case method run forever
Recursion solving problem function call
A good example factorial function
Factorial math problem factorial example
This function solves C positive integer tested may bug
The canonical example factorial look like In general recursion necessarily fast function call overhead tends high recursive function tend small see suffer problem stack overflow anyone
Some say tend hard get case I really buy
In situation recursion make sense elegant clear way write particular function
It noted language favor recursive solution optimize much LISP come mind
Recursion refers method solves problem solving smaller version problem using result plus computation formulate answer original problem
Often time process solving smaller version method solve yet smaller version problem reach base case trivial solve
For instance calculate factorial number one represent
Thus method recurses find factorial multiplies whatever got give final answer
Of course find factorial first calculate factorial
The base case would case know return since
Consider In mathematics gcd two integer largest positive integer divide number without remainder
The definition gcd surprisingly simple mod remainder integer division
In English definition say greatest common divisor number zero number greatest common divisor two number greatest common divisor remainder dividing
If like know work see Wikipedia article
Let compute gcd example
Each step equal one In first step equal zero second part definition applies
mod go remainder
At step second part applies time mod divide remainder
At step second argument answer
Did notice gcd appears left right side equal sign
A mathematician would say definition recursive expression defining inside definition
Recursive definition tend elegant
For example recursive definition sum list first element list rest list
Note recurs inside definition end
Maybe prefer maximum value list instead You might define multiplication integer recursively turn series addition If bit transforming multiplication series addition make sense try expanding simple example see work
lovely recursive definition Recursive definition around know look
Notice definition simple base case gcd The recursive case whittle away problem get easy answer
With understanding appreciate algorithm
A recursive function one call
The common reason I found use traversing tree structure
For example I TreeView checkboxes think installation new program choose feature install page I might want check button would something like pseudocode So see checkRecursively first check node passed call node child
You need bit careful recursion
If get infinite recursive loop get Stack Overflow exception I ca think reason people use appropriate
It useful circumstance others
I think interesting technique coder perhaps end using often without real justification
This given recursion bad name circle
Recursion work best I like call fractal problem dealing big thing made smaller version big thing even smaller version big thing
If ever traverse search something like tree nested identical structure got problem might good candidate recursion
People avoid recursion number reason Most people included cut programming teeth procedural programming opposed functional programming
To people iterative approach typically using loop feel natural
Those u cut programming teeth procedural programming often told avoid recursion error prone
We often told recursion slow
Calling returning routine repeatedly involves lot stack pushing popping slower looping
I think language handle better others language likely dominant paradigm procedural
For least couple programming language I used I remember hearing recommendation use recursion get beyond certain depth stack deep
Recursion expression directly indirectly referencing
Consider recursive acronym simple example Here simple example many element set
better way count thing nice simple recursive example
First need two rule Suppose set like x x x
let count many item
We represent When applying recursive solution usually least rule If translate pseudocode get There lot useful example traversing tree example I sure people cover
For example take factorial But easy see factorial also So generally Of course tricky thing recursion want define thing term already done need place start
In example make special case defining factorial
Now see bottom Since defined factorial reach bottom
Generally speaking recursive procedure two part The recursive part defines procedure term new input combined already done via procedure

A base part make sure process repeat forever giving place start
It bit confusing get head around first look bunch example come together
If want much deeper understanding concept study mathematical induction
Also aware language optimize recursive call others
It pretty easy make insanely slow recursive function careful also technique make performant case
Hope help
I like definition In recursion routine solves small part problem divide problem smaller piece call solve smaller piece
I also like Steve McConnells discussion recursion Code Complete criticises example used Computer Science book Recursion
One problem textbook present silly example recursion
The typical example computing factorial computing Fibonacci sequence
Recursion powerful tool really dumb use either case
If programmer worked used recursion compute factorial hire someone else
I thought interesting point raise may reason recursion often misunderstood
EDIT This dig Dav answer I seen reply I posted
A method recursive call either directly indirectly
When use recursion
People use recursion complex write iterative code
For example tree traversal technique like preorder postorder made iterative recursive
But usually use recursive simplicity
To recurse solved problem nothing done
To recurse open problem next step recurse rest
Well pretty decent definition
And wikipedia good definition
So I add another probably worse definition
When people refer recursion usually talking function written call repeatedly done work
Recursion helpful traversing hierarchy data structure
An example A recursive definition staircase A staircase consists single step staircase recursion single step termination In plain English Assume thing The process repeating thing till done called recursion
I hope plain english answer looking
A recursive function function contains call
A recursive struct struct contains instance
You combine two recursive class
The key part recursive item contains
Consider two mirror facing
We seen neat infinity effect make
Each reflection instance mirror contained within another instance mirror etc
The mirror containing reflection recursion
A good programming example recursion
The structure recursive Node containing instance Node
Functions work binary search tree also recursive
This old question I want add answer logistical point view algorithm correctness point view performance point view
I use Java work Java support nested function
As I want recursion I might define external function exists code bump Java bureaucratic rule I might refactor code altogether I really hate
Thus I often avoid recursion use stack operation instead recursion essentially stack operation
You want use anytime tree structure
It useful reading XML
Recursion applies programming basically calling function inside definition inside different parameter accomplish task
Recursion strategy problem every step turn small thing one bigger thing time hammer
Suppose desk covered disorganized mess paper
How make one neat clean stack paper mess using recursion
Notice pretty intuitive aside counting everything strictly necessary
You might go way stack reality could would still work
The important part hammer With arm always put one stack top make bigger stack matter within reason big either stack
Recursion process method call iself able perform certain task
It reduces redundency code
Most recurssive function method must condifiton break recussive call
stop calling condition met prevents creating infinite loop
Not function suited used recursively
hey sorry opinion agrees someone I trying explain recursion plain english
suppose three manager Jack John Morgan
Jack manages programmer John Morgan going give every manager want know would cost
The answer obvious employee also manager
HERE come recursion
start top hierarchy
summery cost
start Jack Then check manager employee
find check manager employee
Add summery cost every time find manager
finished Jack go John employee Morgan
You never know much cycle go getting answer though know many manager many Budget spend
Recursion tree branch leaf called parent child respectively
When use recursion algorithm le consciously building tree data
In plain English recursion mean repeat someting
In programming one example calling function within
Look following example calculating factorial number Any algorithm exhibit recursion datatype basically consists case case datatype
example working type structural recursive algorithm would form really obvious way write algorith work data structure
look integer well natural number defined using Peano axiom see structural recursive algorithm integer look like factorial function trivial example form
function call use definition
asked viewed active Get In get see By subscribing agree
site design logo Stack Exchange Inc user contribution licensed

method solution problem depends solution smaller instance problem opposed
The approach applied many type problem one central idea computer science
The power recursion evidently lie possibility defining infinite set object finite statement
In manner infinite number computation described finite recursive program even program contains explicit repetition
Most computer programming language support recursion allowing call within program text
Some define looping construct rely solely recursion repeatedly call code
prof language computationally powerful Turing complete imperative language meaning solve kind problem imperative language even without iterative control structure
A common tactic divide problem type original solve combine result
This often referred combined store result solving avoid solving repeatedly incurring extra computation time referred
A recursive function definition one meaning input function produce result without recurring one meaning input program recurs call
For example function defined recursively equation
Neither equation constitutes complete definition first base case second recursive case
Because base case break chain recursion sometimes also called terminating case
The job recursive case seen breaking complex input simpler one
In properly designed recursive function recursive call input problem must simplified way eventually base case must reached
Functions intended terminate normal example exception
Neglecting write base case testing incorrectly cause
For function one computes obvious base case implied input data one may add number term added series example provide criterion establishes base case
Such example naturally treated successive term output partial sum converted recursion using indexing parameter say compute th term th partial sum
Many must process generate arbitrarily large quantity
Recursion one technique representing data whose exact size know programmer specify data definition
There two type definition inductive definition
An inductively defined recursive data definition one specifies construct instance data
For example defined inductively using syntax The code specifies list string either empty structure contains string list string
The definition permit construction list finite number string
Another example inductive positive Similarly recursive often used model structure programming language
Language designer often express grammar syntax grammar simple language arithmetic expression multiplication addition This say expression either number product two expression sum two expression
By recursively referring expression second third line grammar permit arbitrarily complex arithmetic expression one product sum operation single expression
A coinductive data definition one specifies operation may performed piece data typically coinductive definition used data structure infinite size
A coinductive definition infinite string given informally might look like This similar inductive definition list string difference definition specifies access content data via function content may whereas inductive definition specifies create structure may created
related coinduction used compute particular instance possibly infinite object
As programming technique used often context programming language preferable recursion desired size precision program output unknown
In case program requires definition infinitely large infinitely precise result mechanism taking finite portion result
The problem computing first n one solved corecursive program

Recursion contains single known recursion contains multiple known
Standard example single recursion include list traversal linear search computing factorial function standard example multiple recursion include search
Single recursion often much efficient multiple recursion generally replaced iterative computation running linear time requiring constant space
Multiple recursion contrast may require exponential time space fundamentally recursive able replaced iteration without explicit stack
Multiple recursion sometimes converted single recursion desired thence iteration
For example computing Fibonacci sequence naively multiple iteration value requires two previous value computed single recursion passing two successive value parameter
This naturally framed corecursion building initial value tracking step two successive value see
A sophisticated example using allows iterative tree traversal rather multiple recursion
Most basic example recursion example presented demonstrate function call
recursion occurs function called another function called either directly indirectly
For example call direct recursion call call indirect recursion Chains three function possible example function call function function call function function call function
Indirect recursion also called symmetric term though simply difference emphasis different notion
That call call turn call point view alone indirectly recursing point view alone indirectly recursing point view mutually recursing
Similarly set three function call called set mutually recursive function
Recursion usually done explicitly calling function name
However recursion also done via implicitly calling function based current context particularly useful known
Some author classify recursion either structural generative
The distinction related recursive procedure get data work process data Functions consume structured data typically decompose argument immediate structural component process component
If one immediate component belongs class data input function recursive
For reason refer function STRUCTURALLY RECURSIVE FUNCTIONS
Thus defining characteristic structurally recursive function argument recursive call content field original input
Structural recursion includes nearly tree traversal including XML processing binary tree creation search etc
By considering algebraic structure natural number natural number either zero successor natural number function factorial may also regarded structural recursion
alternative Many recursive algorithm generate entirely new piece data given data recur
refers kind generative recursion
Examples generative recursion include
This distinction important function
A classic example recursive procedure function used calculate The function also written This evaluation recurrence relation demonstrates computation would performed evaluating pseudocode This factorial function also described without using recursion making use typical looping construct found imperative programming language The imperative code equivalent mathematical definition using accumulator variable The definition translates straightforwardly example iteration implemented recursively
The computes two integer written recursively
Function definition greatest common divisor express The recursive program equivalent iterative algorithm computation shown show step evaluation would performed language eliminates tail call
Below version algorithm using explicit iteration suitable language eliminate tail call
By maintaining state entirely variable using looping construct program avoids making recursive call growing call stack
The iterative algorithm requires temporary variable even given knowledge Euclidean algorithm difficult understand process simple inspection although two algorithm similar step
The Towers Hanoi mathematical puzzle whose solution illustrates recursion
There three peg hold stack disk different diameter
A larger disk may never stacked top smaller
Starting disk one peg must moved another peg one time
What smallest number step move stack
Example implementation Although recursive function explicit solution Tower Hanoi sequence reduced explicit formula
The algorithm method searching single element cutting array half recursive pas
The trick pick midpoint near center array compare data point data searched responding one three possible condition data found midpoint data midpoint greater data searched data midpoint le data searched
Recursion used algorithm pas new array created cutting old one half
The binary search procedure called recursively time new smaller array
Typically array size adjusted manipulating beginning ending index
The algorithm exhibit logarithmic order growth essentially divide problem domain half pas
Example implementation binary search C An important application recursion computer science defining dynamic data structure
Recursive data structure dynamically grow theoretically infinite size response runtime requirement contrast size static array must set compile time
Recursive algorithm particularly appropriate underlying problem data treated defined recursive term
The example section illustrate known structural recursion
This term refers fact recursive procedure acting data defined recursively
As long programmer derives template data definition function employ structural recursion
That recursion function body consume immediate piece given compound value
Below C definition linked list node structure
Notice especially node defined term
The next element pointer another effectively creating list type
Because data structure defined recursively procedure operate implemented naturally recursive procedure
The procedure defined walk list list empty list pointer value NULL
For node print data element integer
In C implementation list remains unchanged procedure
Below simple definition binary tree node
Like node linked list defined term recursively
There two pointer left pointing left right pointing right
Operations tree implemented using recursion
Note two pointer left right tree operation may require two recursive call At two recursive call made given call defined
The example illustrates binary tree
A special case binary tree data element node order
Since number file may vary practical way traverse thus enumerate content
Traversing filesystem similar therefore concept behind tree traversal applicable traversing filesystem
More specifically code would example filesystem
This code blend line least somewhat recursion
It essentially recursive implementation best way traverse
It also example direct indirect recursion
The method rtraverse purely direct example method traverse indirect call rtraverse
This example need base case scenario due fact always fixed number file directory given filesystem
In actual implementation rather pure recursive function single check base case otherwise recursive step number modification may made purpose clarity efficiency
These include On basis elegance wrapper function generally approved base case frowned upon particularly academia
Hybrid algorithm often used efficiency reduce overhead recursion small case recursion special case
A function directly called recurse instead calling separate auxiliary function actually recursion
Wrapper function used validate parameter recursive function skip perform initialization allocate memory initialize variable particularly auxiliary variable level recursion partial computation handle exception error
In language support auxiliary function nested inside wrapper function use shared scope
In absence nested function auxiliary function instead separate function possible private called directly information shared wrapper function using
base case also known consists checking base case making recursive call checking next call base case instead calling checking base case
particularly done efficiency reason avoid overhead function call immediately return
Note since base case already checked immediately recursive step need checked separately one need use wrapper function case overall recursion start base case
For example factorial function properly base case
immediately returning
may miss mitigated wrapper function
primarily concern many base case encountered Null pointer tree linear number function call hence significant saving algorithm illustrated search
tree corresponds considering leaf node child base case rather considering empty node base case
If single base case computing factorial provides saving
Conceptually considered either base case recursive step checking base case recursion considered different base case one step removed standard base case complex recursive step namely check valid recurse considering leaf node rather Null node base case tree
Because complicated flow compared clear separation base case recursive step standard recursion often considered poor style particularly academia
A basic example given DFS binary tree see section standard recursive discussion
The standard recursive algorithm DFS In instead In term standard step move base case check recursive step
Alternatively considered different form base case recursive step respectively
Note requires wrapper function handle case tree empty root node Null
In case height node Null pointer child leaf cut number function call half worst case
In C standard recursive algorithm may implemented The algorithm may implemented Note use Boolean AND operator recursive call made node valid
Note first term AND pointer node second term bool overall expression evaluates bool
This common idiom recursive
This addition evaluation Boolean OR operator check right child left child fails
In fact entire function replaced single Boolean expression return statement legibility suffers benefit efficiency
Recursive algorithm often inefficient small data due overhead repeated function call return
For reason efficient implementation recursive algorithm often start recursive algorithm switch different algorithm input becomes small
An important example often implemented switching data sufficiently small
Hybrid recursive algorithm often refined derived hybrid merge sort
Recursion iteration equally expressive recursion replaced iteration explicit stack iteration replaced tail recursion
Which approach preferable depends problem consideration language used
In iteration preferred particularly simple recursion avoids overhead function call call stack management recursion generally used multiple recursion
By contrast recursion preferred tail recursion optimization leading little overhead sometimes explicit iteration available
Compare template compute x defined x f n x x For imperative language overhead define function functional language overhead define accumulator variable x
For example factorial function may implemented iteratively C assigning loop index variable accumulator variable rather passing argument returning value recursion Most use today allow direct specification recursive function procedure
When function called program keep track various instance function often using although method may used
Every recursive function transformed iterative function replacing recursive call simulating call stack explicitly managed program
Conversely iterative function procedure evaluated computer see expressed term recursive function iterative control construct routinely rewritten recursive form
However practice rewriting depends feature language
notable mainstream language function call including may cause stack allocation would occur use looping construct language working iterative program rewritten recursive form may although tail call elimination may feature covered language specification different implementation language may differ tail call elimination capability
In language favor iterative looping construct usually significant time space cost associated recursive program due overhead required manage stack relative slowness function call function call particularly typically fast operation difference usually le noticeable
As concrete example difference performance recursive iterative implementation factorial example depends highly compiler used
In language looping construct preferred iterative version may much several order magnitude faster recursive one
In functional language overall time difference two implementation may negligible fact cost multiplying larger number first rather smaller number iterative version given happens may overwhelm time saved choosing iteration
In programming language maximum size much le space available recursive algorithm tend require stack space iterative algorithm
Consequently language sometimes place limit depth recursion avoid stack overflow one language
Note caveat regarding special case
Multiply recursive problem inherently recursive prior state need track
One example contrast list traversal linear search list singly recursive thus naturally iterative
Other example include function
All algorithm implemented iteratively help explicit programmer effort involved managing stack complexity resulting program arguably outweigh advantage iterative solution
function function recursive call hence build deferred operation
For example gcd function shown
In contrast factorial function also recursive call tail position build deferred multiplication operation must performed final recursive call completes
With treat call rather function call function gcd execute using constant space
Thus program essentially iterative equivalent using imperative language control structure like loop
The significance tail recursion making call tail call caller return position need saved recursive call return branch directly previously saved return position
Therefore language recognize property tail call tail recursion save space time
In simple case function calling instruction placed recursive call executed per recursion instruction placed recursive call
The latter executed repeatedly maximum recursion reached
Consider example The recursive algorithm expressed
They usually simplified single term
If function form Then thus represents number recursive call level recursion represents factor smaller input next level recursion
number piece divide problem represents work function independent recursion
partitioning recombining level recursion

learn share knowledge build career
One topic seems come regularly mailing list online discussion merit lack thereof Computer Science Degree
An argument seems come time negative party coding number year never used recursion
So question This question exists historical significance please use evidence ask similar question
This question answer frozen changed
More info
There number good explanation thread answer use language
In majority major imperative language implementation
every major implementation C Basic Python Ruby Java C vastly preferable recursion
To see walk step language use call function Doing step take time usually little bit take iterate loop
However real problem step
When many program start allocate single chunk memory stack run memory often always due recursion program crash due
So language recursion slower make vulnerable crashing
There still argument using though
In general code written recursively shorter bit elegant know read
There technique language implementers use called eliminate class stack overflow
Put succinctly function return expression simply result function call need add new level onto stack reuse current one function called
Regrettably imperative optimization built
By way Mario typical name ArrangeString function join I surprised language choice already implementation
Simple english example recursion
In basic computer science sense recursion function call
Say linked list structure And want find long linked list recursion This could course done loop well useful illustration concept Whenever function call creating loop recursion
As anything good us bad us recursion
The simple example tail recursion last line function call However lame almost pointless example easily replaced efficient iteration
After recursion suffers function call overhead example could substantial compared operation inside function
So whole reason recursion rather iteration take advantage clever stuff
For example call function multiple time different parameter inside loop way accomplish
A classic example
You draw one simply recursion call stack branch direction If attempt thing iteration I think find take lot code accomplish
Other common use case might include traversing hierarchy
website crawler directory comparison etc
In practical term recursion make sense whenever need iterative branching
Recursion method solving problem based divide conquer mentality
The basic idea take original problem divide smaller easily solved instance solve smaller instance usually using algorithm reassemble final solution
The canonical example routine generate Factorial The Factorial n calculated multiplying number An iterative solution C look like There nothing surprising iterative solution make sense anyone familiar C
The recursive solution found recognising nth Factorial n Fact
Or put another way know particular Factorial number calculate next one
Here recursive solution C The first part function known sometimes Guard Clause prevents algorithm running forever
It return value whenever function called value le
The second part interesting known
Here call method slightly modified parameter decrement multiply result copy When first encountered kind confusing instructive examine work run
Imagine call FactRec
We enter routine picked base case end like If method parameter stopped guard clause end If substitute return value return value get This give clue final solution arrived fast track show step way That final substitution happens base case triggered
At point simple algrebraic formula solve equates directly definition Factorials first place
It instructive note every call method result either base case triggered call method parameter closer base case often called recursive call
If case method run forever
Recursion solving problem function call
A good example factorial function
Factorial math problem factorial example
This function solves C positive integer tested may bug
The canonical example factorial look like In general recursion necessarily fast function call overhead tends high recursive function tend small see suffer problem stack overflow anyone
Some say tend hard get case I really buy
In situation recursion make sense elegant clear way write particular function
It noted language favor recursive solution optimize much LISP come mind
Recursion refers method solves problem solving smaller version problem using result plus computation formulate answer original problem
Often time process solving smaller version method solve yet smaller version problem reach base case trivial solve
For instance calculate factorial number one represent
Thus method recurses find factorial multiplies whatever got give final answer
Of course find factorial first calculate factorial
The base case would case know return since
Consider In mathematics gcd two integer largest positive integer divide number without remainder
The definition gcd surprisingly simple mod remainder integer division
In English definition say greatest common divisor number zero number greatest common divisor two number greatest common divisor remainder dividing
If like know work see Wikipedia article
Let compute gcd example
Each step equal one In first step equal zero second part definition applies
mod go remainder
At step second part applies time mod divide remainder
At step second argument answer
Did notice gcd appears left right side equal sign
A mathematician would say definition recursive expression defining inside definition
Recursive definition tend elegant
For example recursive definition sum list first element list rest list
Note recurs inside definition end
Maybe prefer maximum value list instead You might define multiplication integer recursively turn series addition If bit transforming multiplication series addition make sense try expanding simple example see work
lovely recursive definition Recursive definition around know look
Notice definition simple base case gcd The recursive case whittle away problem get easy answer
With understanding appreciate algorithm
A recursive function one call
The common reason I found use traversing tree structure
For example I TreeView checkboxes think installation new program choose feature install page I might want check button would something like pseudocode So see checkRecursively first check node passed call node child
You need bit careful recursion
If get infinite recursive loop get Stack Overflow exception I ca think reason people use appropriate
It useful circumstance others
I think interesting technique coder perhaps end using often without real justification
This given recursion bad name circle
Recursion work best I like call fractal problem dealing big thing made smaller version big thing even smaller version big thing
If ever traverse search something like tree nested identical structure got problem might good candidate recursion
People avoid recursion number reason Most people included cut programming teeth procedural programming opposed functional programming
To people iterative approach typically using loop feel natural
Those u cut programming teeth procedural programming often told avoid recursion error prone
We often told recursion slow
Calling returning routine repeatedly involves lot stack pushing popping slower looping
I think language handle better others language likely dominant paradigm procedural
For least couple programming language I used I remember hearing recommendation use recursion get beyond certain depth stack deep
Recursion expression directly indirectly referencing
Consider recursive acronym simple example Here simple example many element set
better way count thing nice simple recursive example
First need two rule Suppose set like x x x
let count many item
We represent When applying recursive solution usually least rule If translate pseudocode get There lot useful example traversing tree example I sure people cover
For example take factorial But easy see factorial also So generally Of course tricky thing recursion want define thing term already done need place start
In example make special case defining factorial
Now see bottom Since defined factorial reach bottom
Generally speaking recursive procedure two part The recursive part defines procedure term new input combined already done via procedure

A base part make sure process repeat forever giving place start
It bit confusing get head around first look bunch example come together
If want much deeper understanding concept study mathematical induction
Also aware language optimize recursive call others
It pretty easy make insanely slow recursive function careful also technique make performant case
Hope help
I like definition In recursion routine solves small part problem divide problem smaller piece call solve smaller piece
I also like Steve McConnells discussion recursion Code Complete criticises example used Computer Science book Recursion
One problem textbook present silly example recursion
The typical example computing factorial computing Fibonacci sequence
Recursion powerful tool really dumb use either case
If programmer worked used recursion compute factorial hire someone else
I thought interesting point raise may reason recursion often misunderstood
EDIT This dig Dav answer I seen reply I posted
A method recursive call either directly indirectly
When use recursion
People use recursion complex write iterative code
For example tree traversal technique like preorder postorder made iterative recursive
But usually use recursive simplicity
To recurse solved problem nothing done
To recurse open problem next step recurse rest
Well pretty decent definition
And wikipedia good definition
So I add another probably worse definition
When people refer recursion usually talking function written call repeatedly done work
Recursion helpful traversing hierarchy data structure
An example A recursive definition staircase A staircase consists single step staircase recursion single step termination In plain English Assume thing The process repeating thing till done called recursion
I hope plain english answer looking
A recursive function function contains call
A recursive struct struct contains instance
You combine two recursive class
The key part recursive item contains
Consider two mirror facing
We seen neat infinity effect make
Each reflection instance mirror contained within another instance mirror etc
The mirror containing reflection recursion
A good programming example recursion
The structure recursive Node containing instance Node
Functions work binary search tree also recursive
This old question I want add answer logistical point view algorithm correctness point view performance point view
I use Java work Java support nested function
As I want recursion I might define external function exists code bump Java bureaucratic rule I might refactor code altogether I really hate
Thus I often avoid recursion use stack operation instead recursion essentially stack operation
You want use anytime tree structure
It useful reading XML
Recursion applies programming basically calling function inside definition inside different parameter accomplish task
Recursion strategy problem every step turn small thing one bigger thing time hammer
Suppose desk covered disorganized mess paper
How make one neat clean stack paper mess using recursion
Notice pretty intuitive aside counting everything strictly necessary
You might go way stack reality could would still work
The important part hammer With arm always put one stack top make bigger stack matter within reason big either stack
Recursion process method call iself able perform certain task
It reduces redundency code
Most recurssive function method must condifiton break recussive call
stop calling condition met prevents creating infinite loop
Not function suited used recursively
hey sorry opinion agrees someone I trying explain recursion plain english
suppose three manager Jack John Morgan
Jack manages programmer John Morgan going give every manager want know would cost
The answer obvious employee also manager
HERE come recursion
start top hierarchy
summery cost
start Jack Then check manager employee
find check manager employee
Add summery cost every time find manager
finished Jack go John employee Morgan
You never know much cycle go getting answer though know many manager many Budget spend
Recursion tree branch leaf called parent child respectively
When use recursion algorithm le consciously building tree data
In plain English recursion mean repeat someting
In programming one example calling function within
Look following example calculating factorial number Any algorithm exhibit recursion datatype basically consists case case datatype
example working type structural recursive algorithm would form really obvious way write algorith work data structure
look integer well natural number defined using Peano axiom see structural recursive algorithm integer look like factorial function trivial example form
function call use definition
asked viewed active site design logo Stack Exchange Inc user contribution licensed

Hamlet Othello Romeo Juliet Julius Caesar Share Sparknote page Page Page Page Page Imagine following scenario
You talented programmer Robot Works One day valuable customer Gene Roddenberry Star Trek fame come problem
He creating new TV show called Star Trek The Next Generation one character show Data android
At last minute actor supposed play Data canceled show could find another actor good enough fill part looking Robot Works build actual android
While rest company busily work getting Data built assigned task programming walk simple enough task human robot quite easy
After sorting manual produced group company many grueling hour finally produce function allow Data take single step
You call day
The next day come work bos Applegate asks much progress made
You tell done
I done say
But responds bos written one function
How done
Do need write function teach take two step
And three step
And step
You chuckle slightly knowing smile cross face smile person understands power recursion
What recursion
Sometimes problem difficult complex solve big
If problem broken smaller version may able find way solve one smaller version able build solution entire problem
This idea behind recursion recursive algorithm break problem smaller piece either already know answer solve applying algorithm piece combining result
Stated concisely recursive definition defined term
Recursion computer programming technique involving use procedure subroutine function algorithm call step termination condition successive repetition processed critical step condition met time rest repetition processed last one called first
Do worry detail definition
The main point defined term Recursion information see Recursion
Page Page Page Page Take Study Break
SparkNotes brought
Visit B N buy rent check tablet ereaders including
All Rights Reserved

Recursion This lecture finish discussion dictionary introduces inductive reasoning recursion
Examples include generating Fibonacci sequence solving Towers Hanoi problem
Flash JavaScript required feature
Flash JavaScript required feature
Lecture Recursion Topics covered Dictionaries modular abstraction divide conquer recursion tower Hanoi base case Fibonacci sequence
Flash JavaScript required feature
Flash JavaScript required feature
Recitation Lists Elements Sorting Recursion Topics covered Tuples list iteration list element sorting list mutability key dictionary chain method recursion base case Tower Hanoi
What recursion
Recursion allows u define function call solve problem breaking simpler case
What recursive case
A recursive case call recursive procedure simpler case usually part input
What base case
A base case necessary recursion determines procedure return value terminates rather continuing recursive process
Successive approximation method try guess right answer problem check guess
If guess good enough done
Otherwise keep improving guess small increment checking getting closer closer right answer determine guess good enough
For first problem problem set look Newton method us successive approximation find root function
Secondly fun Python get practice using string string operation
We would like implement word game Hangman game computer
Problem set assigned session
The instruction solution found session page due Lecture
These optional resource provided student wish explore topic fully
After watching lecture may want read following resource This one course OCW
Find material course page linked along left
free open publication material thousand MIT course covering entire MIT curriculum
Freely browse use OCW material pace
There signup start end date
Use OCW guide learning teach others
We offer credit certification using OCW

Download file later
Send friend colleague
Modify remix reuse remember cite OCW source
Learn MIT OpenCourseWare make material used teaching almost MIT subject available Web free charge
With course available OCW delivering promise open sharing knowledge
Massachusetts Institute Technology Your use MIT OpenCourseWare site material subject

Recursion programming contrast recur Oxford Advanced Learner Dictionary mean something happens number time
It situation function call modular programming method OBJ programming recall number time infinitely probably intentionally mostly unintentional due algorithmic error
But year recursion become useful complex situation programming mathematical calculation deserves good explanation importance application
Note This article elaborate extensively subject highlight importance application
I believe people learn faster way least I overwhelming people formula
If need generalized text recursion see
This series introduce recursion show useful application
For first part I discus iteration using recursion
I skip mathematical stuff go straight programming aspect
Try read till end remember rate article greatly influence next part
First let apologize article joke code hurt developer community
I mother tongue Yoruba Nigerian language
I decided write note share fraction God given idea
If I must say writing article strenuous programming
I decided write article I developed file manager phone using Symbian C API Application Programming Interface
A file manager Windows Explorer like application
You must PM full source
Recursion process procedure go one step procedure involves rerunning entire procedure
Most people misinterpret concept recursion loop
But I want see recursion spring yoyo stretching limit later returning back initial stretching
A loop hand pictured ceiling fan spinning one direction time forever till something interrupt
In programming however two indispensable loop used two
See recursion versus loop next To specific recursion computer science mathematics function defined function applied within function
Recursion simply mean something happen spontaneously mistakenly due error LAME recursive acronym LAME An Encoder
See
Recursion
If still see see Recursion
Recursion mostly employed breakdown large complex operation smaller simple step engineered accomplish task direct complex approach used like divide conquer approach
To use recursion satisfactorily well one first understand greatness part designed
If wondering solve factorial using programming mathematical problem please look coming part
Note The sample code clear heavily commented
But still find unclear PM clearer explanation
And rated article low due bad text formatting well I hope changed mind I rewritten whole thing
In order understand recursion one must first understand recursion
The sample program code accompanying article us recursive process search print file hidden starting root directory passed parameter last along directory path
The entire code written C programming language
Lets take look
The flowchart hopefully say
A single routine defined starting root directory us loop see loop going back circle folder process launch new instance routine directory encountered search see
As seen chart newly spawned routine end everything finally return parent routine
So matter many recursion make program terminates end main program go well
entire sample code written pure C language proprietary API used portability reason
And mailed program created file write anything might problem get another one look program might replace version
Although code short essence recursion compiled using Pelles C IDE Microsoft Windows ver Pelles Orinius download
But trying code another IDE MSVCPP GCC etc
probably give result
A friend compiled DEV error warning I use I ca say
D And finally I used prevent HTTP error I code skip step
Although sample code heavily commented people still prefer reading straight explanation
Well go Starting defined function function receives three parameter The code short
It really justifies nickname Divide Conquer recursion try code see
Not much explain except I used simple string operation method copy input path string buffer simultaneously directly far better using rest code us function loop search file directory folder MS Windows user
And finally I closed search handle allocated buffer
Done
We come end first part series
Subsequent part expose advanced mathematical topic recursion application software programming
Do remember rate article influence release article
And forget greeting report correction work greatly welcome appreciated
Look next installment
Thanks
This article along associated source code file licensed

Stack Exchange network consists Q A community including largest trusted online community developer learn share knowledge build career
The pretty easy But somehow I got stuck suggestion even hint
I need recursive algorithm solves
Please clarify specific problem add additional detail highlight exactly need
As currently written hard tell exactly asking
See page help clarifying question
Let look many multiplication necessary perform recursive method SQR MUL MUL MUL MUL MUL Where SQR Squares number MUL Usual Multiplication So Yuval pointed comment even small power would require n multiplication mean would slow practical use
However thing using SQR n operation
That SQR SQR SQR SQR Of course since power need use SQR
But alternate SQR MUL
This principle behind
Example Computing
SQR SQR SQR MUL SQR MUL We
Therefore If use arithmetic run O n
To avoid confusion example n would calculate
If use integer arithmetic overflow many value run O n
If use arithmetic time grows size number time basically time last squaring
asked viewed active site design logo Stack Exchange Inc user contribution licensed

New user
Existing user
Here second post week
As said recursion computer science
My first post using recursion solve math problem
However recursion also common method solve programming problem
I try present everything way I also post code Python Java language I familiar
For Java I simply post function run code paste class call main
There one large difference recursion math programming
In math using recursion find larger value work forward value calculated increasing
In programming recursion work backwards
Recursion used computer science break problem smaller case problem
This achieved function call seems first turn powerful
Recursion requires two part A base case A recursive call The base case conditional statement check whether recursion reached value already known
Without base case recursion never end program finish usually resulting stack overflow
The recursive call least one call function required actually implementing recursion
This may seem confusing first let u apply recursion simple problem
Given positive integer find n using recursion
The motivation apply recursion simple relationship factorial consecutive integer n So let u try
To use recursion write function taking one input calculates factorial
It simply return factorial
Python Java Run code environment input say
Does function return
No
In Python error message say Java throw What happened
You might notice missing piece function
The recursive call function base case
Try tracing function run
Here function end returning call factorial This seems fine
Continuing factorial Uhhh looking good anymore
In fact never stop maximum recursion depth exceeded stack overflow
Hopefully illustrated forgetting base case
Now let u try add base case
What value smallest possible one rely value
Since positive integer base case
If input function return
Simply
All take single
Python Java Try running function environment input
They return correct value
Okay problem solved next problem A board composed row square
A token start leftmost square move
Each move stay still move square left right
If token move board many way token end square move used
To use recursion problem try split problem smaller smaller problem problem becomes something like The answer course otherwise
The initial problem split three problem In many way token square end square move left
In many way token square end square move left
In many way token square end square move left
Now notice every possible problem split three part one left one le move one square one le move one right one le move
This motivates creating function take two parameter
We want parameter uniquely define problem
Think little two parameter
Okay got
If answer
We want one parameter tell u many move left
We want second parameter tell u square token
Adding total number square also possibility every one necessary
Now let u write function
First try write
Remember function take two parameter base case recursive call
The base case problem split anymore token fell board way move left answer determinable
The recursive call return sum possible position one le move
Take minute try write function
Python Java Both function return correct answer
Problems Write recursive program compute triangular number sum number
Write recursive program make certain number cent coin penny nickel dime quarter
Congratulations making far thanks reading
Please tell hard easy confusing anything like
Next week talk recurrence relation week probably recursion computer science
Note paragraph paragraph Sort How get answer last example
What tell print take python example
Log reply Oh yes good point
In python since move token start square
Log reply Thanks
That get confusing sometimes depending define function
For instance I solved similar problem I counted move instead I needed start token
Log reply Problem Loading
Note Loading Set Loading

A recursive function function call execution
This enables function repeat several time outputting result end iteration
Below example recursive function
The function Count us count number number
For example Count would return
Count would return
The result could used roundabout way subtract number
Recursive function common computer science allow programmer write efficient program using minimal amount code
The downside cause infinite loop unexpected result written properly
For example example function terminated number le greater
If proper case included function stop execution recursion repeat forever causing program crash worse yet hang entire computer system
Cite definition This page contains technical definiton Recursive Function
It explains computing terminology Recursive Function mean one many technical term TechTerms dictionary
All definition TechTerms website written technically accurate also easy understand
If find Recursive Function definition helpful reference using citation link
If think term updated added TechTerms dictionary please
Tech Factor

If seeing message mean trouble loading external resource website
If behind web filter please make sure domain unblocked
To log use feature Khan Academy please enable JavaScript browser

occurs thing defined term type
Recursion used variety discipline ranging
The common application recursion defined applied within definition
While apparently defines infinite number instance function value often done way loop infinite chain reference occur
In class object method exhibit recursive behavior defined two property For example following recursive definition person ancestor The classic example recursion Many mathematical axiom based upon recursive rule
For example formal definition described By base case recursive rule one generate set natural number
Recursively defined mathematical object include especially
There various definition recursion see
Recursion process procedure go one step procedure involves invoking procedure
A procedure go recursion said
To understand recursion one must recognize distinction procedure running procedure
A procedure set step based set rule
The running procedure involves actually following rule performing step
An analogy procedure like written recipe running procedure like actually preparing meal
Recursion related reference within specification procedure execution procedure
For instance recipe might refer cooking vegetable another procedure turn requires heating water forth
However recursive procedure least one step call new instance procedure like recipe calling dough left last time recipe made
This course immediately creates possibility endless loop recursion properly used definition step question skipped certain case procedure complete like sourdough recipe also tell get starter dough case never made
Even properly defined recursive procedure easy human perform requires distinguishing new old partially executed invocation procedure requires administration far various simultaneous instance procedure progressed
For reason recursive definition rare everyday situation
An example could following procedure find way
Proceed forward reaching either exit branching point dead end considered branching point branch
If point reached exit terminate
Otherwise try branch turn using procedure recursively every trial fails reaching dead end return path led branching point report failure
Whether actually defines terminating procedure depends nature maze must allow loop
In case executing procedure requires carefully recording currently explored branching point branch already exhaustively tried
Linguist among many others argued lack upper bound number grammatical sentence language lack upper bound grammatical sentence length beyond practical constraint time available utter one explained consequence recursion natural language
This understood term recursive definition syntactic category sentence
A sentence structure follows verb another sentence sentence occurs larger one
So sentence defined recursively roughly something structure includes noun phrase verb optionally another sentence
This really special case mathematical definition recursion
This provides way understanding creativity unbounded number grammatical immediately predicts sentence arbitrary length
Of course many structure apart sentence defined recursively therefore many way sentence embed instance one category inside another
Over year language general proved amenable kind analysis
Recently however generally accepted idea recursion essential property human language challenged basis claim
Andrew Nevins David Pesetsky Cilene Rodrigues among many argued
Literary case argued different kind mathematical logical recursion
Recursion play crucial role syntax also natural language semantics
The word example construed function apply sentence meaning create new sentence likewise noun phrase meaning verb phrase meaning others
It also apply intransitive verb transitive verb ditransitive verb
In order provide single denotation suitably flexible typically defined take different type meaning argument
This done defining simple case combine sentence defining case recursively term simple one
Recursion sometimes used humorously computer science programming philosophy mathematics textbook generally giving putative recursive step get closer base case instead lead
It unusual book include joke entry along line A variation found page edition book index entry recursively reference recursion
The earliest version joke Software Tools Kernighan Plauger also appears The UNIX Programming Environment Kernighan Pike
It appear first edition
Another joke To understand recursion must understand recursion
In version web search engine search recursion made site suggests Did mean
An alternative form following also example recursive humor
example stand PHP Hypertext Preprocessor stand WINE Is Not Emulator
stand GNU Unix
The canonical example recursively defined set given Another interesting example set true reachable proposition
This set called reachable proposition approach foundation mathematics set true proposition may larger set recursively constructed axiom rule inference
See also
Finite subdivision rule geometric form recursion used create image
A subdivision rule start collection polygon labelled finitely many label polygon subdivided smaller labelled polygon way depends label original polygon
This process iterated
The standard third technique creating subdivision rule
A may partly defined term
A familiar example sequence
For definition useful must lead defined value case
A famous recursive function Fibonacci easily expressed without recursion
Applying standard technique recursively defined set function preceding section yield powerful generalization widely used derive proof
approach restates multiperiod multistep optimization problem recursive form
The key result dynamic programming writes value optimization problem earlier time earlier step term value later time later step
In theorem guaranteeing recursively defined function exist
Given set element function theorem state unique function denotes set natural number including zero natural number
Take two function element
It proved natural number By induction
A common method simplification divide problem subproblems type
As technique called key design many important algorithm
Divide conquer serf approach problem solving problem solved solving smaller smaller instance
A contrary approach
This approach serf approach problem solved solving larger larger instance desired size reached
A classic example recursion definition function given C code The function call recursively smaller version input n multiplies result recursive call n reaching analogously mathematical definition factorial
Recursion computer programming exemplified function defined term simpler often smaller version
The solution problem devised combining solution obtained simpler version problem
One example application recursion programming language
The great advantage recursion infinite set possible sentence design data defined parsed produced finite computer program
equation define one sequence recursively
Some specific kind recurrence relation solved obtain definition
Use recursion algorithm advantage disadvantage
The main advantage usually simplicity
The main disadvantage often algorithm may require large amount memory depth recursion large
The Russian Doll physical artistic example recursive concept
Recursion used painting since made
Its central panel contains kneeling figure Cardinal Stefaneschi holding triptych offering
print depicts distorted city contains gallery contains picture

