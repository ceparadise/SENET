generic term computer science encompasses various approach producing computer program simplifying existing program enable formal verification
In transformation
allows process done stage
Logically refinement normally involves additional complication
The progressive preparation product backlog requirement list approach also commonly described refinement
used convert abstract data model term example implementable
Operation refinement convert operation system implementable
The strengthened weakened process
This reduces specification typically completely implementation
For example value operation could refined implemented
Implementations would equally acceptable case using different route refinement
However must careful refine equivalent since unimplementable impossible select
The term also sometimes used coined
alternative technique formal refinement possible
The opposite refinement
inspired promotes program refinement
The implementation refinement
The also extends refinement calculus component language used industrial development
In type endowed predicate assumed hold element refined type
Refinement type express used used instance type function accepts natural number return natural number greater may written
Refinement type thus related

Create initial backlog stay top
Here Continuous Backlog Refinement
In I talked compressed backlog refinement backlog taken crude matter day series intensive refinement meeting whole team
The drawback besides several day intensive meeting sometimes rush story
We enough party work depend take step back look big picture
The pressure get going cause u think clearly looking minimum viable product
In spite downside approach may necessary need quickly refine initial month backlog get team sprinting
However best approach refining estimating additional subsequent backlog
For employ continuous backlog refinement
Most client For company work sweet spot month
If product development organization reasonably hit month commitment least high level idea thing look like month something work
Mike Cottmeyer It incredibly difficult get well refined backlog month using compressed refinement approach
What I recommending planning ahead staying ahead
Sure need compressed approach get started go ahead refine first month backlog
Then immediately begin continuously refining backlog month
Here look like As story written someone else QA lead tech lead analyst review improve
Bring story next backlog refinement meeting sprint
Call backlog refinement call backlog grooming call story preview call story call regular standing meeting calendar invite
Come meeting assuming need update split story
However update meeting
Team member take split update story meeting
Stories undergo significant change go next backlog refinement meeting
Let keep meeting short offline whatever
Resist urge go detail story
Just minute le enough
Remember grooming story month
We need spend much time
Assume story ready estimated
Assume development QA might want go research story estimated
Encourage
Give team time
Estimate story
Refining story estimating different kind thinking
Estimate
This approach keep refining estimating meeting short mean may need detailed story start sprint planning part sprint planning
Those intensive compressed refinement meeting might able get abbreviated sprint planning meeting
To get started agile backlog yet create groom initial backlog short period time
We call compressed backlog refinement although favored approach sometimes use approach anyway
Once team sprinting backlog let dwindle
You least sprint worth well groomed story acceptance criterion ready team implement
Most client I work need additional sprint worth story refined perhaps without acceptance criterion
Stay top writing story continuously refine backlog
I put Project Management title give Glen Alleman There rule engagement need considered Product Lots written backlog refinement US used founding member
Currently Enterprise Transformation Consultant Andrew previously held position management product management software development company like Internet Security Systems Allure Global IBM
Andrew earned BS MS computer science MBA Duke University
Your email address published
Required field marked FOLLOW

Lots written backlog refinement US used call grooming lot good
There lot say practice
However I seen treatment whether differently initial backlog
Therefore I setting post next answer question Usually I spin new agile team initial backlog
Nevertheless parent organization always know want team The vision mission charter might communicated clearly
Sometimes documented requirement often called PRD MRD BRD
Whatever case backlog user story I typically hold story writing workshop get ball rolling
Now crude backlog need refined
This post idea come even convert already exists user story
The focus initial refinement meeting subsequent refinement session
For initial refinement I recommend compressed refinement
After I recommend continuous refinement
When refining initial backlog often spinning new agile team usually someone chain command wondering Why anyone coding yet There great deal pressure get started already
The team probably anxious get started unless still trying wrap prior project
At time want know expect get done new work get next release much backlog release date roll around
It sufficient client tell get get get

We also need refine backlog identify dependency risk item long lead time
Anyway take time create refine backlog form team stuff get rolling
We want good job refining backlog take forever get done
Therefore compressed approach backlog refinement
Stories written backlog crude story need refine quickly
In compressed refinement approach series refinement meeting
It could meeting better part week
The whole team attends
Please bring lunch preferably good lunch
You may find updating story agile management tool meeting
That generally unproductive strike right balance
Some edits might whole team collaboratively involved arguing wording meaning
Other edits done someone else room side
Of course edits made offline
This compressed approach tends detailed slow going crude story well refined story meeting
Since talked depth might well estimate go
Because story discussion detailed using approach might able get abbreviated sprint planning meeting first sprint
Organizations operate project mode rather product mode tend compressed refinement approach project come along
They spend little time getting backlog ready next project current project still underway
This backlog refinement done big batch
This rolling wave planning big tidal wave
That usually best approach
After compressed refinement let move continuous refinement
I talking even elaboration
Elaboration agile sense decomposing epic feature feature user story providing detail story acceptance criterion visual specification
Adding term Progressive Elaboration mean le time course time
Here may Progressive Elaboration Compressed Refinement We may still progressively elaborate epic feature intense period backlog refinement kick project yet still progressive elaboration user story acceptance criterion time
What I writing whether refine estimate story compressed period time say week maybe two whether refinement time advance
There downside
A compressed refinement allow long may necessary research figure thing learn new technology put necessary architectural place work contract party get group build dependent piece
Also sometimes need additional time thing soak
We need take step back look big picture
Because thing may end poorly refined backlog poor plan
For reason I recommend making switch project thinking punctuated refinement product thinking continuous refinement
That topic next post
I put Project Management title give Glen Alleman Create initial backlog stay top
Here There rule engagement need considered Product founding member
Currently Enterprise Transformation Consultant Andrew previously held position management product management software development company like Internet Security Systems Allure Global IBM
Andrew earned BS MS computer science MBA Duke University
Your email address published
Required field marked FOLLOW

Stack Exchange network consists Q A community including largest trusted online community developer learn share knowledge build career
So I seen happening especially online tool The backlog grows till see forest tree important feature drowns sea issue duplicate appear heard keep track backlog
Backlog refinement rescue seems undisputed best practice
But I see cure symptom rather cause
Beside time spent refinement backlog could save time elsewhere time still value adding activity
Would better approach prevent refinement
That practice follow reduce need spend time refinement
I think I read something subject blog post article
Ca find though anybody know please tell
I agree grooming wasteful
Spending time breaking request never implemented waste violates spirit Maximizing work done
Delay breaking thing last practical moment longer
need little grooming
get control backlog get point journey feasible
The best thing create user story relatively certain going implemented point near future
First I share vision team reality started got current stage journey
This delay work decision long possible leaning grooming process
You ca groom thing exist grooming need occur happen prioritization process
That feature important used think
Scrap
No big deal
We sunk cost yet
Capping number backlog keep ever growing large begin
It also highlight limited resource developer really facilitates prioritization process
It really force PO think important
You ca every feature come whim
We need focus effort brings u customer biggest value
But like I said ideal team actualized quite yet
Huge unorganized unprioritized garbage heap every thing anyone ever asked
All hundred stickies stuck bos office wall
I shit
Lots lot lot backlog grooming
The process I described taken u
We still way go able reduce backlog size convince POs breaking estimating Epics even Features may never actually implement
Added bonus infinitely better visibility team stakeholder much work queue done done
The backlog growing extremely large overflowing like unfortunately inevitable lot organization especially one mine tried turn multi billion dollar company IT shop free Agile shop
I agree premise Grooming value added task much like deferring payment later date pushing inevitable
There really best practice I hate term
There solution may may work
The control measure WIP Limits Kanban framework setting hard cap work could Backlog help team overcommitting giant backlog place
A lot setting project current organization stacked level Business want IT u shove Requests u PMO Delivery Team buffer u
If organization also open consider PM advisor getting attached Business whatever called get stop burying Teams make sure Teams commit work need done
tends get called day process making sure backlog good enough shape take Sprint Planning meeting
It came team realised leaving everything planning meeting dangerous approach
By backlog refinement previous sprint allowed time fix issue backlog entered planning meeting
A team might look top story backlog backlog refinement meeting
They talk Product Owner may even estimate fully understand story
But time discussion story reveals gap knowledge
For example say development team look story explain technical implication Product Owner
The Product Owner realises story complicated imagined decides break
They backlog refinement session
They might take away fix story day backlog refinement Sprint Planning
This described Product Backlog refinement act adding detail estimate order item Product Backlog
This ongoing process Product Owner Development Team collaborate detail Product Backlog item
During Product Backlog refinement item reviewed revised
The Scrum Team decides refinement done
Refinement usually consumes capacity Development Team
However Product Backlog item updated time Product Owner Product discretion
Note cap team time spent refinement
This ensure team get sucked excessive fiddling backlog
They refinement make Sprint Planning meeting go smoothly
By posting answer agree
asked viewed active site design logo Stack Exchange Inc user contribution licensed

Stack Exchange network consists Q A community including largest trusted online community developer learn share knowledge build career
So I seen happening especially online tool The backlog grows till see forest tree important feature drowns sea issue duplicate appear heard keep track backlog
Backlog refinement rescue seems undisputed best practice
But I see cure symptom rather cause
Beside time spent refinement backlog could save time elsewhere time still value adding activity
Would better approach prevent refinement
That practice follow reduce need spend time refinement
I think I read something subject blog post article
Ca find though anybody know please tell
I agree grooming wasteful
Spending time breaking request never implemented waste violates spirit Maximizing work done
Delay breaking thing last practical moment longer
need little grooming
get control backlog get point journey feasible
The best thing create user story relatively certain going implemented point near future
First I share vision team reality started got current stage journey
This delay work decision long possible leaning grooming process
You ca groom thing exist grooming need occur happen prioritization process
That feature important used think
Scrap
No big deal
We sunk cost yet
Capping number backlog keep ever growing large begin
It also highlight limited resource developer really facilitates prioritization process
It really force PO think important
You ca every feature come whim
We need focus effort brings u customer biggest value
But like I said ideal team actualized quite yet
Huge unorganized unprioritized garbage heap every thing anyone ever asked
All hundred stickies stuck bos office wall
I shit
Lots lot lot backlog grooming
The process I described taken u
We still way go able reduce backlog size convince POs breaking estimating Epics even Features may never actually implement
Added bonus infinitely better visibility team stakeholder much work queue done done
The backlog growing extremely large overflowing like unfortunately inevitable lot organization especially one mine tried turn multi billion dollar company IT shop free Agile shop
I agree premise Grooming value added task much like deferring payment later date pushing inevitable
There really best practice I hate term
There solution may may work
The control measure WIP Limits Kanban framework setting hard cap work could Backlog help team overcommitting giant backlog place
A lot setting project current organization stacked level Business want IT u shove Requests u PMO Delivery Team buffer u
If organization also open consider PM advisor getting attached Business whatever called get stop burying Teams make sure Teams commit work need done
tends get called day process making sure backlog good enough shape take Sprint Planning meeting
It came team realised leaving everything planning meeting dangerous approach
By backlog refinement previous sprint allowed time fix issue backlog entered planning meeting
A team might look top story backlog backlog refinement meeting
They talk Product Owner may even estimate fully understand story
But time discussion story reveals gap knowledge
For example say development team look story explain technical implication Product Owner
The Product Owner realises story complicated imagined decides break
They backlog refinement session
They might take away fix story day backlog refinement Sprint Planning
This described Product Backlog refinement act adding detail estimate order item Product Backlog
This ongoing process Product Owner Development Team collaborate detail Product Backlog item
During Product Backlog refinement item reviewed revised
The Scrum Team decides refinement done
Refinement usually consumes capacity Development Team
However Product Backlog item updated time Product Owner Product discretion
Note cap team time spent refinement
This ensure team get sucked excessive fiddling backlog
They refinement make Sprint Planning meeting go smoothly
By posting answer agree
asked viewed active site design logo Stack Exchange Inc user contribution licensed

âãÏÓ obj endobj obj stream hÞbbd k D Ããç IøS endstream endobj startxref EOF obj stream hÞb Ûn
ÆL õû endstream endobj obj endobj obj endobj obj stream Ã CR b Ú zªÀàÿHÃ Ó ã
qQ J n püv ðpú À

framework managing work emphasis
It designed team three nine developer break work action completed within timeboxed iteration called typically track progress called
Approaches coordinating work multiple scrum team larger organization include among others
Scrum iterative incremental framework managing product development
It defines flexible product development strategy development team work unit reach common goal challenge assumption traditional sequential approach product development enables team encouraging physical close online collaboration team member well daily communication among team member discipline involved
A key principle Scrum dual recognition customer change mind want need often called requirement volatility unpredictable predictive planned approach suited
As Scrum adopts problem fully understood defined front instead focusing maximize team ability deliver quickly respond emerging requirement adapt evolving technology change market condition
Many term used Scrum scrum master typically written leading capital Scrum Master conjoint word written ScrumMaster
To maintain encyclopedic tone however article us normal sentence case recognized mark
This occasionally seen written SCRUM
The word correct however likely arose due early paper Ken Schwaber capitalized SCRUM title
While term Scrum allowed lapse deemed owned wider community rather individual leading capital used word
Hirotaka Takeuchi introduced term scrum context article New New Product Development Game
Takeuchi Nonaka later argued The Knowledge Creating Company form organizational knowledge creation especially good bringing innovation continuously incrementally spirally
The author described new approach commercial product development would increase speed flexibility based case study manufacturing firm automotive photocopier printer
They called approach whole process performed one across multiple overlapping phase team try go distance unit passing ball back forth
In used restart play forward team interlock head attempt gain possession ball
In early used would become Scrum company Advanced Development Methods John Scumniotales Jeff McKenna developed similar approach Easel Corporation referring using single word Scrum
In Sutherland Schwaber jointly presented paper describing Scrum framework Business Object Design Implementation Workshop held part OOPSLA Austin Texas
Over following year Schwaber Sutherland collaborated combine experience evolving good develop became known Scrum
In Schwaber worked Mike Beedle describe method book
Scrum approach planning managing product development involves bringing authority level operation property certainty
In Schwaber others founded Scrum Alliance set accreditation series
Schwaber left Scrum Alliance late founded oversees parallel accreditation series
Since public document called defines sort official version Scrum occasionally revised
There three core role Scrum framework
These ideally deliver potentially shippable product increment every sprint
Together three role form scrum team
While many organization role involved defining delivering product Scrum defines three
The product owner represents product accountable ensuring team delivers value business
The product owner defines product term typically add based importance dependency
Scrum team one product owner
This role combined scrum master
The product owner focus business side product development spend majority time liaising stakeholder dictate team reach technical solution
This role equivalent role agile framework XP
Communication core responsibility product owner
The ability convey priority empathize team member stakeholder vital steer product development right direction
The product owner role bridge communication gap team stakeholder serving proxy stakeholder team team representative overall stakeholder community
As face team stakeholder following communication task product owner stakeholder Empathy key attribute product owner ability put one self another shoe
A product owner converse different stakeholder variety background job role objective
A product owner must able see different point view
To effective wise product owner know level detail audience need
The development team need thorough feedback specification build product expectation executive sponsor may need summary progress
Providing information necessary may lose stakeholder interest waste time
A direct mean communication preferred seasoned agile product owner
A product owner ability communicate effectively also enhanced skilled technique identify stakeholder need negotiate priority stakeholder interest collaborate developer ensure effective implementation requirement
The development team responsible delivering potentially shippable product increment every sprint sprint goal
The team three nine member carry task required build product increment analysis design development testing technical writing etc
Although several discipline represented team member referred generically
To avoid potential confusion refers programmer organization call member
The development team Scrum even though may interaction role outside team PMO
Scrum facilitated scrum master accountable removing impediment ability team deliver product goal deliverable
The scrum master traditional act buffer team distracting influence
The scrum master ensures Scrum framework followed
The scrum master help ensure team follows agreed process Scrum framework often facilitates key session encourages team improve
The role also referred team facilitator reinforce dual perspective
The core responsibility scrum master include limited One way scrum master role differs project manager latter may responsibility scrum master
Scrum formally recognise role project manager traditional command control tendency would cause difficulty
A sprint iteration basic unit development Scrum
The sprint effort restricted specific duration
The duration fixed advance sprint normally one week one month two week common
Each sprint start sprint planning event aim define sprint backlog identify work sprint make estimated forecast sprint goal
Each sprint end sprint review sprint retrospective review progress show stakeholder identify lesson improvement next sprint
Scrum emphasizes working product end sprint really done
In case software likely includes software fully integrated tested documented potentially shippable
At beginning sprint scrum team hold sprint planning event Each day sprint team hold daily scrum specific guideline Any impediment stumbling block risk issue delayed dependency assumption proved unfounded identified daily scrum captured scrum master displayed team scrum board shared risk board agreed person designated working toward resolution outside daily scrum
No detailed discussion happen daily scrum
At end sprint team hold two event sprint review sprint retrospective
At sprint review team Guidelines sprint review At sprint retrospective team Guidelines sprint retrospective The following activity commonly done although considered core part Scrum Backlog refinement called backlog grooming ongoing process reviewing product backlog item checking appropriately prioritised prepared way make clear executable team enter sprint via sprint planning activity
Product backlog item may broken multiple smaller one acceptance criterion may clarified dependency investigation preparatory work may identified agreed technical spike
Although originally core Scrum practice backlog refinement added scrum guide adopted way managing quality product backlog item entering sprint recommended investment team sprint capacity
The backlog also include technical debt also known design debt code debt
This concept software development reflects implied cost additional rework caused choosing easy solution instead using better approach would take longer
The product owner cancel sprint necessary
The product owner may input team scrum master management
For instance management may wish product owner cancel sprint external circumstance negate value sprint goal
If sprint abnormally terminated next step conduct new sprint planning reason termination reviewed
The product backlog comprises ordered list scrum team maintains
It consists must done successfully deliver viable product
The product owner prioritizes product backlog item PBIs based consideration risk business value dependency size date needed
Items added backlog commonly written story format
The product backlog delivered ordered sequence delivered
It visible everyone may changed consent product owner ultimately responsible ordering product backlog item development team choose
The product backlog contains product owner assessment business value development team assessment development effort often always stated using
These estimate help product owner gauge timeline may influence ordering product backlog item example two feature business value product owner may schedule earlier delivery one lower development effort higher one higher development effort complex riskier want retire risk earlier
The product backlog business value product backlog item responsibility product owner
The size
estimated complexity effort item however determined development team contributes sizing story point estimated hour
There common misunderstanding allowed product backlog
By contrast Scrum neutral requirement technique
As Scrum primer state product backlog item articulated way clear sustainable
Contrary popular misunderstanding product backlog contain user story simply contains item
Those item expressed user story requirement approach group find useful
But whatever approach item focus delivering value customer
Scrum advocate role product owner assigned
The product owner responsible maximizing value product
The product owner gather input take feedback lobbied many people ultimately make call get built
The product backlog Typically product owner scrum team come together write everything must prioritized becomes content first block time meant focused work selected item accommodated within timeframe
The product backlog evolve new information surface product customer later sprint may address new work
The following item typically comprise product backlog feature bug technical work knowledge acquisition
A feature wanted bug unintended unwanted may necessarily something defective
An example technical work could run virus check developer workstation
An example knowledge acquisition could research Wordpress plugin library making selection
A product backlog simplest form merely list item work
Having rule work added removed ordered help whole team make better decision change product
The product owner prioritizes product backlog item based needed soonest
The team chooses item complete coming sprint
On scrum board team move item product backlog sprint backlog list item build
Conceptually ideal team select think accomplish top list unusual see practice team able take item list along top one selected
This normally happens time left within sprint accommodate work
Items top backlog item work first broken story suitable development team work
The backlog go le refined item
As Schwaber Beedle put The lower priority le detail barely make backlog item
As team work backlog must assumed change happens outside team learn new market opportunity take advantage competitor threat arise feedback customer change way product meant work
All new idea tend trigger team adapt backlog incorporate new knowledge
This part fundamental mindset agile team
The world change backlog never finished
The sprint backlog list work development team must address next sprint
The list derived scrum team progressively selecting product backlog item priority order top product backlog feel enough work fill sprint
The development team keep mind past performance assessing capacity new sprint use guide line much complete
The product backlog item may broken task development team
Tasks sprint backlog never assigned rather task signed team member needed according set priority skill team
This promotes development team developer
The sprint backlog property development team included estimate provided development team
Often accompanying task board used see change state task current sprint like progress done
Once sprint backlog committed additional work added sprint backlog except team
Once sprint delivered product backlog analyzed reprioritized necessary next set functionality selected next sprint
The increment potentially shippable increment PSI sum product backlog item completed sprint integrated work previous sprint
At end sprint increment must complete according scrum team definition done DoD fully functioning usable condition regardless whether product owner decides actually release
The following artifact commonly used although considered core part Scrum The sprint chart public displayed chart showing remaining work sprint backlog
Updated every day give simple view sprint progress
It also provides quick visualization reference
The horizontal axis sprint chart show day sprint vertical axis show amount work remaining day typically representing estimate hour work remaining
During sprint planning ideal burndown chart plotted
Then sprint member pick task sprint backlog work
At end day update remaining hour task completed
In way actual burndown chart updated day day
It confused
The release chart way team provide visibility track progress toward release
Updated end sprint show progress toward delivering forecast scope
The horizontal axis release chart show sprint release vertical axis show amount work completed end sprint typically representing cumulative story point work completed
Progress plotted line grows meet horizontal line represents forecast scope often shown forecast based progress date indicates much scope might completed given release date many sprint take complete given scope
The release chart make easy see much work completed much work added removed horizontal scope line move much work left done
The determine whether product backlog item complete
In many case DoD requires successful
The definition done may vary one scrum team another must consistent within one team
The total effort team capable sprint
The number derived evaluating work typically point completed last sprint
The collection historical velocity data guideline assisting team understanding much work likely achieve future sprint
A period used research concept create simple prototype
Spikes either planned take place sprint larger team spike might accepted one many sprint delivery objective
Spikes often introduced delivery large complex product backlog item order secure budget expand knowledge produce proof concept
The duration objective spike agreed product owner development team start
Unlike sprint commitment spike may may deliver tangible shippable valuable functionality
For example objective spike might successfully reach decision course action
The spike time necessarily objective delivered
Also called drone spike tracer bullet spike current architecture current technology set current set best practice result production quality code
It might narrow implementation functionality throwaway code
It production quality rest iteration build code
The name military origin make path bullet visible allowing correction
Often implementation shot layer application connecting single form input field prove layer connect expected
Scrum work le well following circumstance From business perspective Scrum many virtue one designed yield best business solution
However efficiency given organization vary widely largely dependent ability organization adhere implementation guideline article
Every company distinct organizational structure culture set business practice naturally amenable methodology others
Like agile method effective adoption Scrum supported wide range tool
Many company use universal tool spreadsheet build maintain artifact sprint backlog
There also proprietary software package either dedicated product development using Scrum framework support multiple product development approach including Scrum
Other organization implement Scrum without software tool maintain artifact form paper whiteboards sticky note
Scrum empirical approach like empirical process control underpinned three pillar transparency inspection adaptation
All work within Scrum framework visible responsible outcome process workflow progress etc
In order make thing visible scrum team need frequently inspect product developed well team working
With frequent inspection team spot work deviate outside acceptable limit adapt process product development
These three pillar require trust openness team following five value Scrum enable The hybridization Scrum software development methodology common Scrum cover whole therefore organization find need add additional process create comprehensive implementation
For example start product development organization commonly add process guidance business case requirement gathering prioritization initial design budget schedule forecasting
Various author community people use Scrum also suggested detailed technique apply adapt Scrum particular problem organization
Many refer methodological technique analogy architecture software
Such pattern extended Scrum outside software development domain Manufacturing Finance
Scrumban software production model based Scrum
Scrumban especially suited frequent unexpected work item programming error
In case sprint Scrum framework may perceived le benefit although Scrum daily event practice still applied depending team situation hand
Visualization work stage limitation simultaneous unfinished work defect familiar Kanban model
Using method team directed way allows minimum completion time work item programming error hand ensures team member constantly employed
To illustrate stage work team working space often use note large whiteboard
In case decentralized team software
The major difference Scrum Kanban Scrum work divided sprint last fixed amount time whereas Kanban flow work continuous
This visible work stage table Scrum emptied sprint whereas Kanban task marked table
Scrum focus team multifaceted whereas Kanban make specialized functional team possible
The scrum scrum technique operate Scrum scale multiple team working product allowing discus progress interdependency focusing coordinate delivering software especially area overlap integration
Depending cadence timing scrum scrum relevant daily scrum scrum team end designating one member ambassador participate scrum scrum ambassador team
Depending context ambassador may technical contributor team scrum master
Rather simply progress update scrum scrum focus team collectively working resolve mitigate accept risk impediment dependency assumption RIDAs identified
The scrum scrum track RIDAs via backlog risk board sometimes known initial resolved owned accepted mitigated typically lead greater coordination collaboration team
This run similar daily scrum ambassador answering following four question As commented Since I originally defined Scrum Scrums Ken Schwaber IDX working I definitively say Scrum Scrums meta Scrum
The Scrum Scrums I used responsible delivering working software team Definition Done end sprint release sprint
PatientKeeper delivered production four time per Sprint
delivers production time per Sprint
Hubspot delivers live software time day
The Scrum Scrums Master held accountable making work
So Scrum Scrums operational delivery mechanism
scrum LeSS product development framework extends Scrum scaling rule guideline without losing original purpose Scrum
There two level framework first LeSS level designed team second level known LeSS Huge introduces additional scaling element development hundred developer
Scaling Scrum start understanding able adopt standard real Scrum
Scrum requires examining purpose Scrum element figuring reach purpose staying within constraint standard Scrum rule
Bas Vodde evolved LeSS framework experience working product development especially telecom finance industry
It evolved taking Scrum trying many different experiment discover work
In experiment solidified LeSS framework rule
The intention LeSS descale organization complexity dissolving unnecessary complex organizational solution solving simpler way
Less role le management le organizational structure

