In coupling considered degree program module relies module also term used describe connecting two system
Coupling broken loose coupling tight coupling decoupled
Coupling also used describe software well system
Also called
Stay date latest development Internet terminology free weekly newsletter Webopedia
Join subscribe
The following fact statistic capture changing landscape cloud computing service provider customer keeping
The following computer science fact statistic provide quick introduction changing trend education related career
From ZZZ guide list text message online chat abbreviation help translate understand today texting lingo
Learn five generation computer major technology development led computing device use Computer architecture provides introduction system design basic computer science student
Networking fundamental teach building block modern network design
Learn different type network concept architecture

In degree interdependence software module measure closely connected two routine module strength relationship module
Coupling usually contrasted
often correlate high cohesion vice versa
Low coupling often sign good design combined high cohesion support general goal high readability maintainability
The coupling cohesion invented late part based characteristic good programming practice reduced maintenance modification cost
Structured design including cohesion coupling published article book latter subsequently became standard term
Coupling low also loose weak high also tight strong
Some type coupling order highest lowest coupling follows A module refers subroutine kind
set one statement name preferably set variable name
In recent work various coupling concept investigated used indicator different modularization principle used practice
Tightly coupled system tend exhibit following developmental characteristic often seen disadvantage Whether loosely tightly coupled system performance often reduced message parameter creation transmission translation
marshaling message interpretation might reference string array data structure require le overhead creating complicated message message
Longer message require CPU memory produce
To optimize runtime performance message length must minimized message meaning must maximized
One approach decreasing coupling seek limit responsibility module along functionality
Coupling increase two class Low coupling refers relationship one module interacts another module simple stable interface need concerned module internal implementation see
Systems allow object communicate without know anything object implementation
Both system even allow object communicate object written language
Coupling term occur together frequently
Coupling refers interdependency module cohesion describes related function within single module
Low cohesion implies given module performs task related hence create problem module becomes large
Coupling Software Engineering describes version metric associated concept
For data control flow coupling For global coupling For environmental coupling make value larger coupled module
This number range approximately low coupling highly coupled For example module single input output data parameter If module input output data parameter equal number control parameter access item global data

In coupling considered degree program module relies module also term used describe connecting two system
Coupling broken loose coupling tight coupling decoupled
Coupling also used describe software well system
Also called
Stay date latest development Internet terminology free weekly newsletter Webopedia
Join subscribe
The following fact statistic capture changing landscape cloud computing service provider customer keeping
The following computer science fact statistic provide quick introduction changing trend education related career
From ZZZ guide list text message online chat abbreviation help translate understand today texting lingo
Learn five generation computer major technology development led computing device use Computer architecture provides introduction system design basic computer science student
Networking fundamental teach building block modern network design
Learn different type network concept architecture

The Internet Things IoT environment object animal people assigned unique identifier given ability transfer data network without requiring interaction
Coupling act joining two thing together
In software development coupling refers degree software component dependant upon
For instance architecture component associated component must present order code executed compiled
In architecture component remain autonomous allow software manage communication
In decoupled architecture component operate completely separately independently
By submitting agree receive email TechTarget partner
If reside outside United States consent personal data transferred processed United States
An internal audit IA organizational initiative monitor analyze business operation order determine
Pure risk also called absolute risk category threat beyond human control one possible outcome Risk assessment identification hazard could negatively impact organization ability conduct business
A polymorphic virus harmful destructive intrusive type malware change making difficult
According Federal Bureau Investigation cyberterrorism politically motivated attack Antimalware type software program designed prevent detect remove malicious software malware An accountable care organization ACO association hospital healthcare provider insurer party
Patient engagement ideal healthcare situation people motivated involved A personal health record PHR collection information documented maintained individual Business continuity disaster recovery BCDR closely related practice describe organization preparation A business continuity plan BCP document consists critical information organization need continue A call tree sometimes referred phone tree telecommunication chain notifying specific individual
Cloud object storage format storing unstructured data cloud
A parallel file system software component designed store data across multiple networked server facilitate flash storage us interface connect storage directly CPU A hybrid hard disk drive electromechanical spinning hard disk contains amount NAND Flash memory
All Rights Reserved

In refers
In one sense measure strength relationship method data class unifying purpose concept served class
In another sense measure strength relationship class method data
Cohesion type measurement usually described high cohesion low cohesion
Modules high cohesion tend preferable high cohesion associated several desirable trait software including reliability understandability
In contrast low cohesion associated undesirable trait difficult maintain test reuse even understand
Cohesion often contrasted different concept
High cohesion often correlate vice versa
The coupling cohesion invented late part based characteristic good programming practice reduced maintenance modification cost
Structured Design cohesion coupling published article book latter two subsequently became standard term software engineering
In method serve class tend similar many aspect class said high cohesion
In highly cohesive system code readability increased complexity kept manageable
Cohesion increased Advantages high cohesion strong cohesion While principle module perfect cohesion consisting single atomic element single function example practice complex task expressible single simple element
Thus module element either complicated order accomplish task narrow thus tightly coupled module
Thus cohesion balanced unit complexity coupling
Cohesion qualitative measure meaning source code measured examined using determine classification
Cohesion type worst best follows Although cohesion ranking type scale rank indicate steady progression improved cohesion
Studies various people including indicate first two type cohesion inferior communicational sequential cohesion good functional cohesion superior
While functional cohesion considered desirable type cohesion software module may achievable
There case communicational cohesion highest level cohesion attained circumstance

In degree program module relies one module
Coupling usually contrasted
Low coupling often correlate high cohesion vice versa
The coupling cohesion invented original developer Structured Design also early proponent concept see also
Coupling low also loose weak high also tight strong
Low coupling refers relationship one module interacts another module stable interface need concerned module internal implementation see
With low coupling change one module require change implementation another module
Low coupling often sign combined high cohesion support general goal high readability maintainability
Systems exhibit low coupling might experience following developmental difficulty The concept coupling usually related concept low coupling facilitates high cohesion vice versa
For example one approach increasing cohesion seek limit responsibility module along functionality coupling increase two class Low coupling may also reduce performance system sometimes desirable achieve maximum efficiency
Regardless many modern computing system cost reduced performance often seen worthy trade benefit process result low coupling
Some type coupling order highest lowest coupling follows High cohesion low coupling attribute good design
Coupling Software Engineering describes version metric associated concept
For data control flow coupling For global coupling For environmental coupling Coupling C g w r For example module single input output data parameter C If module input output data parameter equal number control parameter access item global data C Very loosely coupled system added advantage tend build quickly
This due low amount dependency
Systems allow object communicate without know anything implementation
Both system even allow object communicate object written language
The fact object may built independently reduces amount recompilation required change applied
Hidden implicit dependency make code hard test hard reuse
So one explicitly declare dependency

In degree program module relies one module
Coupling usually contrasted
Low coupling often correlate high cohesion vice versa
The coupling cohesion invented original developer Structured Design also early proponent concept see also
Low coupling often sign good design combined high cohesion support general goal high readability maintainability
Coupling low also loose weak high also tight strong
Some type coupling order highest lowest coupling follows Tightly coupled system tend exhibit following developmental characteristic often seen disadvantage Loosely coupled system tend exhibit following developmental characteristic often seen advantage Whether loosely tightly coupled system performance often reduced message parameter creation transmission translation interpretation overhead
See One approach decreasing coupling seek limit responsibility module along functionality coupling increase two class Low coupling refers relationship one module interacts another module simple stable interface need concerned module internal implementation see
Systems allow object communicate without know anything object implementation
Both system even allow object communicate object written language
Coupling Software Engineering describes version metric associated concept
For data control flow coupling For global coupling For environmental coupling make value larger coupled module
This number range approximately low coupling highly coupled For example module single input output data parameter If module input output data parameter equal number control parameter access item global data

In degree interdependence software module measure closely connected two routine module strength relationship module
Coupling usually contrasted
often correlate high cohesion vice versa
Low coupling often sign good design combined high cohesion support general goal high readability maintainability
The coupling cohesion invented late part based characteristic good programming practice reduced maintenance modification cost
Structured design including cohesion coupling published article book latter subsequently became standard term
Coupling low also loose weak high also tight strong type coupling order highest lowest coupling follows A module refers subroutine kind
set one statement name preferably set variable name
In recent work various coupling concept investigated used indicator different modularization principle used practice
Tightly coupled system tend exhibit following developmental characteristic often seen disadvantage Whether loosely tightly coupled system performance often reduced message parameter creation transmission translation
marshaling message interpretation might reference string array data structure require le overhead creating complicated message message
Longer message require CPU memory produce
To optimize runtime performance message length must minimized message meaning must maximized
One approach decreasing coupling seek limit responsibility module along functionality
Coupling increase two class Low coupling refers relationship one module interacts another module simple stable interface need concerned module internal implementation see
Systems allow object communicate without know anything object implementation
Both system even allow object communicate object written language
Coupling term occur together frequently
Coupling refers interdependency module cohesion describes related function within single module
Low cohesion implies given module performs task related hence create problem module becomes large
Coupling Software Engineering describes version metric associated concept
For data control flow coupling For global coupling For environmental coupling make value larger coupled module
This number range approximately low coupling highly coupled For example module single input output data parameter If module input output data parameter equal number control parameter access item global data
Software engineering application engineering development software systematic method
Practitioners quickly realized design flexible came stored program architecture von Neumann architecture thus division hardware software began abstraction used deal complexity computing
Programming language started appear early another major step abstraction
Major language Fortran ALGOL COBOL released late deal scientific algorithmic conference attended international expert software agreed defining best practice software grounded application engineering
The result conference report defines software developed original report publicly available
Engineering already address issue hence principle used engineering applied software
The widespread lack best practice software time perceived software crisis barry Boehm documented several key advance field book Software Engineering Economics
These include Constructive Cost Model relates software development effort program T T k The book analyzes software project concludes cost fixing error escalates project move toward field use
The book also asserts key driver software cost capability development team
Watts Humphrey founded SEI Software Process Program aimed understanding managing software engineering process book Managing Software Process asserts Software Development Process controlled measured improved
Modern generally accepted software engineering collected JTC subcommittee Software engineering divided
They Software requirement The elicitation analysis specification Software design The process defining architecture component interface characteristic system component
It also defined result process Software construction The detailed creation working meaningful software combination coding verification unit testing integration testing debugging
Software testing An empirical technical investigation conducted provide stakeholder information quality product service test Software maintenance The totality activity required provide support software
Software development process The definition implementation assessment measurement management change many software engineer enter profession obtaining university degree training vocational school
One standard international curriculum undergraduate software engineering degree defined CCSE addition university education many company sponsor internship student wishing pursue career information technology
These internship introduce student interesting task typical software engineer encounter every day similar experience gained military service software engineering
Legal requirement licensing certification professional software engineer vary around World Canada legal requirement Eng one want use title engineer practice software engineering
In computing system design loosely coupled system one component make use little knowledge definition separate component
Subareas include coupling class interface data loose coupling opposite tight coupling
Components coupled system replaced alternative implementation provide service
Components coupled system le constrained platform language operating system
If system decoupled time difficult also provide transactional integrity data replication across different system provides loose coupling creates issue maintaining consistency
Loose coupling broader distributed system design achieved use transaction queue provided middleware four type autonomy promote loose coupling reference autonomy time autonomy format autonomy platform autonomy
architecture also aim promoting loose coupling loose coupling interface enhanced publishing data standard format
Loose coupling program component enhanced using data type parameter
Passing customized data type object requires component knowledge data definition
Loose coupling service enhanced reducing information passed service key data example service sends letter reusable customer identifier passed customer address obtained within service
This decouples service service need called specific order Coupling refers degree knowledge one component another
Loose coupling computing interpreted encapsulation example tight coupling occurs dependent class contains pointer directly concrete class provides required behavior
The dependency substituted signature changed without requiring change dependent class loose coupling occurs dependent class contains pointer interface implemented one many concrete class
The dependent class dependency contract specified interface class implement interface thus satisfy dependency dependent class without change class
Strong coupling allow functional language pattern Continuations Closure generator
See Clojure Lisp example programming language
language like Smalltalk Ruby code block whereas Eiffel agent basic idea objectify function independent enclosing concept
See function insight function object qualifies one form function
A computer device instructed carry arbitrary set arithmetic logical operation automatically
The ability computer follow sequence operation called program computer used control system wide variety industrial consumer device
The Internet run computer million computer
Since ancient time simple manual device like abacus aided people calculation early Industrial Revolution mechanical device built automate long tedious task guiding pattern loom
More sophisticated electrical machine specialized analog calculation early century first digital electronic calculating machine developed World War II
The speed power versatility computer increased continuously dramatically since conventionally modern computer consists least one processing element typically central processing unit form memory
The processing element carry arithmetic logical operation sequencing peripheral device include input device output device device perform function
Peripheral device allow information retrieved external source usage term referred person carried calculation computation
The word continued meaning middle century end century word began take familiar meaning machine carry computation
The Online Etymology Dictionary give first attested use computer one calculates Online Etymology Dictionary state use term mean calculating machine
The Online Etymology Dictionary indicates use term
name theoretical Turing machine device used aid computation thousand year mostly using correspondence finger
The earliest counting device probably form tally stick later record keeping aid throughout Fertile Crescent included calculus represented count item probably livestock grain sealed hollow unbaked clay container
The use counting rod one example abacus initially used arithmetic task
The Roman abacus developed used Babylonia early BC
Since many form reckoning board table invented
In medieval European counting house checkered cloth would placed table Antikythera mechanism believed earliest mechanical analog computer according Derek de Solla Price
It designed calculate astronomical position discovered Antikythera wreck Greek island Antikythera Kythera Crete dated circa BC
He contributed numerous concept technique forming foundation modern practice software engineering application design development
Constantine grew Anoka Minnesota graduated Anoka High School active debate named Most Likely Succeed classmate
Constantine received Management MIT Sloan School Management specialization information system received certificate Family Therapy Boston Family Institute post graduate training program
Constantine started career Technical Laboratory Nuclear Science Staff Consultant C E I R From President Information Systems Institute also became program instructor Wharton School Business University Pennsylvania
From faculty member I
M became Director Research Concord Massachusetts Family Service Society
From Assistant Clinical Professor Psychiatry Tufts University Assistant Professor Human Development Family Studies University Connecticut
From also Clinical Supervisor Adolescent Family Intervention LUK also worked Independent Consultant
He remained Chief Scientist Principal Consultant Constantine Lockwood Professor Information Technology University Technology Sydney Australia
In Constantine received Jolt Award Product Excellence best book Software Use received Platinum Award Excellence Design Competition Siemens AG Lite
In recognized Distinguished Engineer Association Computing Machinery recipient Stevens Award outstanding contribution literature practice method software system development
He received Simon Rockower Award American Jewish Press Association finalist Eric Hoffer Book Award
Constantine specializes side software development
His published work includes classic text Structured Design written Ed Yourdon
His contribution practice development began pioneering work Modular programming concept
Constantine force behind discipline Structured Design
The key feature Structured Design Structure Chart joined faculty IBM Systems Research Institute year taught four year refined concept
Structured analysis design technique fundamental tool system analysis
They developed classical system analysis Structured analysis became popular still use today
Structured analysis consists interpreting concept data control terminology represented data flow diagram
The flow data control bubble store bubble difficult track
One approach first define event world require system react
Bubbles need interact connected system defined bubble usually grouped higher level bubble decrease complexity
Data dictionary needed describe data command flow timeframe commercial programming done Cobol Fortran C BASIC
There little guidance good design programming technique standard technique documenting requirement Systems getting larger complex information system development became harder harder
Jackson structured programming circa developed Michael Jackson Structured analysis circa Tom DeMarco Yourdon Gane Sarson Structured analysis design technique developed Douglas Ross Yourdon structured method developed Edward Yourdon
Structured analysis system specification published Tom DeMarco Structured system analysis design method first presented developed UK Office Government Commerce
based SADT developed Douglas Ross modeling defined Strategies System Specification Derek Hatley Imtiaz Pirbhai
Information engineering circa Finkelstein popularised James Martin according Hay information engineering logical extension structured technique developed
Structured programming led structured design turn led structured system analysis tool began appear automated drawing diagram kept track thing drawn data dictionary
After example design manufacturing use tool named software engineering
Structured analysis typically creates hierarchy employing single abstraction mechanism structured analysis method employ IDEF process driven start purpose viewpoint
This method identifies overall function iteratively divide function smaller function preserving input output control also known functional decomposition approach focus cohesion within function coupling function leading structured data
The functional decomposition structured method describes process without delineating system behavior method identifies input output related activity
One reason popularity structured analysis ability communicate process concept
SOAP protocol specification exchanging structured information implementation web service computer network
Its purpose induce extensibility neutrality independence SOAP allows process running disparate operating system communicate using Extensible Markup Language
Since Web protocol like HTTP installed running operating system SOAP allows client invoke web service receive response independent language SOAP provides Messaging Protocol layer web service protocol stack web service
The server return SOAP response price location since generated data come standardized format requesting application integrate directly
SOAP designed protocol Dave Winer Don Box Bob Atkinson Mohsen Microsoft
Due politics within Microsoft specification made available submitted September Microsofts hesitation Dave Winer shipped
The submitted Internet Draft reach RFC status considered standard
Version specification published Note May since version reach Recommendation status considered standard either
Version specification however became recommendation June SOAP specification maintained XML Protocol Working Group World Wide Web Consortium group closed July
SOAP originally stood Simple Object Access Protocol version standard dropped acronym SOAP specification broadly defined consisting following conceptual component Protocol concept encapsulation concept Network concept
SOAP The set rule formalizing governing format SOAP Nodes These machine processing unit used receive process SOAP message
SOAP Roles Over path SOAP message assume specific role
The role node defines action node performs message receives example role none mean node process SOAP header way simply transmit message along path
SOAP protocol binding A SOAP message need work conjunction protocol transferred network example SOAP message could use TCP lower layer protocol transfer message
These binding defined SOAP protocol binding framework SOAP feature SOAP provides messaging framework
However extended add feature reliability security etc rule followed adding feature SOAP framework
SOAP module A collection specification regarding semantics SOAP header describe new feature extended upon SOAP module need realize feature
SOAP requires module adhere prescribed rule SOAP message Represents information exchanged soap node
The International Standard Book Number unique numeric commercial book identifier
An ISBN assigned edition variation book example paperback hardcover edition book would different ISBN
The ISBN digit long assigned January method assigning ISBN varies country country often depending large publishing industry within country
The initial ISBN configuration recognition generated based upon Standard Book Numbering created ISBN format developed International Organization Standardization published international standard
Occasionally book may appear without printed ISBN printed privately author follow usual ISBN procedure however rectified later
Another identifier International Standard Serial Number identifies periodical publication magazine ISBN configuration recognition generated United Kingdom David Whitaker US Emery Koltay
The ISBN format developed International Organization Standardization published international standard United Kingdom continued use SBN code
The ISO facility refers back SBN may converted ISBN prefixing digit
For example edition Reeder Returns published Hodder indicating serial number
This converted ISBN check digit need since January ISBNs contained digit format compatible Bookland European Article Number
An ISBN assigned edition variation book example ebook paperback hardcover edition book would different ISBN
The ISBN digit long assigned January ISBN separated part done customary separate part hyphen space
Separating part ISBN also done either hyphen space figuring correctly separate given ISBN number complicated part use fixed number digit
ISBN issuance ISBNs issued ISBN registration agency responsible country territory regardless publication language
Some ISBN registration agency based national library within ministry culture case ISBN registration service provided organisation bibliographic data provider government funded
In Canada ISBNs issued cost purpose encouraging Canadian culture
In United Kingdom United States country service provided organisation
Australia ISBNs issued library service agency
Wayne Stevens American software engineer consultant author pioneer advocate practical application software method tool
Stevens grew Missouri spent two year India attended Woodstock School earned Electrical Engineering MIT eventually became chief architect application development methodology IBMs consulting group
The annual Stevens Award Lecture Software Development Methods named belonged IEEE ACM well following honorary society Tau Beta Pi Sigma Xi Eta Kappa Nu
He wrote paper Structured Design Larry Constantine Glenford Myers
He also worked John Paul Morrison refine promote concept called programming including description FBP several reference Stevens published several article book
How Data Flow Improve Application Development Productivity IBM System Journal using Structured Design How make Programs Simple Changeable Flexible Reusable John Wiley Sons
Using Data Flow Application Development Software Design Concepts Methods Practical Software Engineering Series Ed
Allen Macro Prentice Hall
Articles selection Stevens Myers Constantine Buchwald Davison
In IBM Systems Journal Vol No pp Structured Design Structured Analysis Structured Programming
John Marciniak Volume pp John Wiley Sons
Edward Nash Yourdon American software engineer computer consultant author lecturer pioneer software engineering methodology
In Yourdon started working Digital Equipment Corporation developing FORTRAN program minicomputer later assembler
After sold firm served Board multiple IT consultancy corporation June Yourdon inducted Computer Hall Fame along notable Charles Babbage James Martin Grace Hopper Gerald Weinberg
In December Crosstalk The Journal Defense Software Engineering also founded published American Programmer magazine
He author book Decline Fall American Programmer Yourdon founded consulting firm Yourdon New York provided consulting educational publishing field software engineering
In early company office North America Europe
They trained people topic structured programming structured design structured analysis logical data modeling Yourdon sold consulting company
It later became part Canadian software company CGI Informatique publishing division published book software engineering topic became part Prentice Hall
In Yourdon developed Yourdon structured method SSADM based functional structuring method support two distinct design phase analysis design
YSM includes three step feasibility study essential modeling implementation modeling
It offer series model The behavioral model state behavior described three way function dynamic relationship
The processor environment model describes allocation computing function processor hardware software environment model defines software architecture effect processor
The code organizational model show structure task The Yourdon structured method structured analysis
He wrote several book subject including Time Bomb Yourdon took lot heat dire prediction failed materialize form
This blunder may caused lose credibility many software industry died January result blood infection
Yourdon married Toni Nash three child daughter Jennifer son Jamie David
He also four grandchild Liam Christopher Owen Edward Edward Roland Yourdon five sister Toni Teri Tina Aleda Patrice
Yourdon authored technical article authored coauthored computer book since Yourdon Edward Constantine Larry Structured Design Fundamentals Discipline Computer Program Systems Design

Stack Exchange network consists Q A community including largest trusted online community developer learn share knowledge build career
I recently noticed decoupling topic question want know apply
By apply I mean Is relevant compiled language like C Java involved
Should I know study web developer
Please edit question limit specific problem enough detail identify adequate answer
Avoid asking multiple distinct question
See page help clarifying question
term describes relationship two entity software system usually class
When class us another class communicates said class class
At least one
The idea try keep coupling class system possible hence coupling sometimes although English would mean coupling people often use imply coupling entity
Often class object
When ClassA depends heavily ClassB chance ClassA affected ClassB changed high
This strong coupling
However ClassA depends lightly ClassB chance ClassA affected way change code ClassB low
This loose coupling relationship
Loose coupling good want component system heavily depend
We want keep system modular When two part loosely coupled independent le likely break change
For example building car would want internal change engine break something steering wheel
While would never happen accident building car similar thing happen programmer time
Loose coupling meant reduce risk thing happening
Strong coupling usually occurs entity A know much entity B
This one assumption entity B incorrect
For example imagine driver would make certain assumption engine car work
The day buy new car engine work differently reason engine replaced previous assumption would incorrect
If code computer would incorrect code work properly
However assumption driver made car steering wheel brake gas pedal change car wo affect long assumption stay correct
This loose coupling
The idea class hide internal detail class offer strictly defined interface class communicate
So example defining class Car interface public method would probably
These method object invoke Car object
All detail Car class engine work kind fuel us etc
hidden class prevent knowing much Car
The moment class A know much class B strongly coupled relationship class A dependent class B change class B likely affect class A
A relationship two entity know little necessary loosely coupled decoupled relationship
Decoupling generally seeing whether two thing need closely work together made independent
Independence great make thing easy change use somewhere else
Decoupling applied many area development especially true temporal decoupling even applied daily life extent
Also noting many type coupling software development consider covered answer
You research
Two thing coupled dependency
If A depends B use B without taking A consideration
If want use A also carry B A depends
In software development usually ca remove coupling component completely
Decoupling context normally mean existing coupling
That making sure component know little possible component around
This probably common type coupling found wild Here DisplayFriends needlessly manually operating connection behind Facebook client order get need
class coupled
If FacebookClient suddenly change kind connection us app wo able get Facebook friend anymore
We remove coupling DisplayFriends class Connection asking FacebookClient provide need u
Now really care FacebookClient get friend
All really care fact get
Any change brought internal behavior wo damage class
This kind decoupling easily achieved following Law Demeter function say quoting Wikipedia The Law Demeter function requires method object O may invoke method following kind object Since I mentioned temporal coupling beginning answer I going shortly describe
Temporal coupling normally considered designing application execute algorithm parallel
Consider two executable unit actual instruction method whatever wish consider unit A B
We say A temporally coupled B B must executed A executed
If A temporally coupled B A B executed time
Build example one think usual thing daily life
Are two thing one could time
Finally answer last bit Should I know study web developer
Yes
For example one popular design pattern web development MVC decoupling
The answer good job describing decoupling
I wanted discus final question
Should I know study web developer
The answer emphatic yes
It matter kind developer
You could web developer embedded system developer
Let say class generates custom URLs placed web page
You might tempted class write URLs directly page placing href tag
This might seem simpler first
But happens need make change put link email send user
Your current code would work URL generator tightly coupled web framework using
The better option would URL generator class return URL string
This could used web code could also used email code
It may seem like work upfront decoupled code effort pay time
Having code modularized decoupled make code understandable testable maintainable matter programming domain working
asked viewed active site design logo Stack Exchange Inc user contribution licensed

