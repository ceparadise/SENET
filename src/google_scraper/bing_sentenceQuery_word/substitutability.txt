principle stating S T object T may object type S
object type T may object subtype S without altering desirable property T correctness task performed etc
More formally particular definition relation called initially introduced conference address titled
It rather merely syntactic relation intends guarantee semantic interoperability hierarchy particular
Barbara Liskov formulated principle succinctly paper follows Let property provable object type
Then true object type subtype
In paper Liskov Wing detailed notion behavioral subtyping extension bear certain resemblance considers interaction subtyping
Liskov notion behavioral subtype defines notion substitutability object subtype object type program may replaced object type without altering desirable property program

Behavioral subtyping stronger notion typical defined relies argument type return type
Behavioral subtyping provably general property method impossible program
compiler verify hold true subtype even hold
Nonetheless principle useful reasoning design class hierarchy
Liskov principle imposes standard requirement adopted newer programming language usually level class rather type see distinction In addition signature requirement subtype must meet number behavioral condition
These detailed terminology resembling methodology leading restriction contract interact The rule postconditions identical introduced Bertrand Meyer book
Both Meyer later Pierre America first use term gave definition behavioral subtyping notion definition take account may occur programming language support reference pointer
Taking aliasing account major improvement made Liskov Wing key ingredient history constraint
Under definition Meyer America MutablePoint would behavioral subtype ImmutablePoint whereas LSP forbids

In based another object class using implementation
Inheritance language mechanism one object acquires property behaviour parent object
Inheritance allows programmer create class built upon existing class specify new implementation maintain behaviour realizing interface independently extend original software via public class interface
The relationship object class inheritance give rise
An inherited class called parent class super class
The term inheritance loosely used programming narrow use reserved programming one class another corresponding technique programming instead called one object another
Inheritance
In language inheritance subtyping agree whereas others differ general subtyping establishes relationship whereas inheritance reuses implementation establishes syntactic relationship necessarily semantic relationship inheritance ensure
To distinguish concept subtyping also known whereas inheritance defined known
Still inheritance commonly used mechanism establishing subtype relationship
Inheritance contrasted one object another object object one class contain object another class see
Composition implement relationship contrast relationship subtyping
Inheritance invented
There various type inheritance based paradigm specific language
Multiple Inheritance programming widely supposed difficult implement efficiently
For example summary book actually claimed adding Multiple inheritance impossible
Thus multiple inheritance seemed challenge
Since I considered multiple inheritance early found simple efficient implementation technique
I could resist challenge
I suspect case fashion affected sequence event
In JDK Java support multiple inheritance
A derived class multilevel inheritance declared follows This process extended number level
A derived class derivative class inherits one entity one class called
The semantics class inheritance vary language language commonly subclass automatically inherits superclass
The general form defining derived class Some language support construct also
For example define specification class also inherited heir
The superclass establishes common interface foundational functionality specialized subclass inherit modify supplement
The software inherited subclass considered subclass
A reference instance class may actually referring one subclass
The actual class object referenced impossible predict
A uniform interface used invoke member function object number different class
Subclass may replace superclass function entirely new function must share
In language class may declared adding certain class declaration
Examples include final keyword onwards sealed keyword
Such modifier added class declaration class keyword class identifier declaration
Such sealed class restrict particularly developer access precompiled
The sealed class subclass easily deduced reference pointer object class actually referencing instance class instance subclass exist instance superclass reference type violates type system

Because exact type object referenced known execution used instead also called requires one lookup depending whether supported programming language used
Just class may method declaration may contain method modifier prevent method overridden
replaced new function name type signature subclass
A method unoverridable simply accessible class class member function true though
A sealed method frozen feature overridden
If superclass method invocation superclass method
Some language require method specifically declared virtual
others method virtual

An invocation method always statically dispatched
address function call determined
Static dispatch faster dynamic dispatch allows optimisation
Inheritance used two class
Many permit class object replace implementation inherited
This process usually called
Overriding introduces complication version behavior instance inherited class one part class one parent base class
The answer varies programming language language provide ability indicate particular behavior overridden behave defined base class
For instance base method property overridden subclass marked virtual abstract override modifier
An alternative overriding inherited code
Implementation inheritance mechanism whereby subclass code base class
By default subclass retains operation base class subclass may operation replacing implementation
In following Python example subclass override method base class
The base class comprises operation compute sum two integer
The subclass functionality base class exception operation transforms number square replacing operation transforms number respectively
The subclass therefore compute sum two integer
In quarter class inheritance sole purpose code reuse fallen favor
The primary concern implementation inheritance provide assurance instance reusing class necessarily substituted instance inherited class
An alternative technique explicit requires programming effort avoids substitutability issue
In private inheritance used form without substitutability
Whereas public inheritance represents relationship delegation represents relationship private protected inheritance thought implemented term relationship
Another frequent use inheritance guarantee class maintain certain common interface implement method
The parent class combination implemented operation operation implemented child class
Often interface change supertype child implement behavior described instead parent class
Inheritance similar distinct
Subtyping enables given type substituted another type abstraction said establish relationship subtype existing abstraction either implicitly explicitly depending language support
The relationship expressed explicitly via inheritance language support inheritance subtyping mechanism
For example following code establishes explicit inheritance relationship class subclass subtype used wherever specified via reference pointer object
In programming language support inheritance relationship base class derived class relationship implementation mechanism code reuse compared relationship
Inheritance even programming language support inheritance subtyping mechanism necessarily entail
It entirely possible derive class whose object behave incorrectly used context parent class expected see
Compare
In OOP language notion code reuse subtyping coincide way declare subtype define new class inherits implementation another
Using inheritance extensively designing program imposes certain constraint
For example consider class contains person name date birth address phone number
We define subclass called contains person grade point average class taken another subclass called contains person employer salary
In defining inheritance hierarchy already defined certain restriction desirable The alternative inheritance
This technique support polymorphism code reuse separating behavior primary class hierarchy including specific behavior class required business domain class
This approach avoids static nature class hierarchy allowing behavior modification run time allows one class implement behavior instead restricted behavior ancestor class
Implementation inheritance controversial among programmer theoretician programming since least
Among author advocate interface inheritance instead favor
For example mentioned proposed overcome static nature inheritance class
As fundamental solution problem introduces distinct relationship combining property inheritance composition new concept
According main problem implementation inheritance introduces unnecessary form modification base class implementation cause inadvertent behavioral change subclass
Using interface avoids problem implementation shared API
Another way stating inheritance break
The problem surface clearly open system client code expected inherit class substituted system class algorithm
Reportedly Java inventor spoken implementation inheritance stating would include redesign Java
Language design decouple inheritance subtyping interface inheritance appeared early modern example programming language
Complex inheritance inheritance used within insufficiently mature design may lead
Another issue inheritance subclass must defined code mean program user add new subclass
Other design pattern allow program user define variation entity runtime

All content website including dictionary thesaurus literature geography reference data informational purpose
This information considered complete date intended used place visit consultation advice legal medical professional

Software Engineering CBSE increasingly used develop large scale software
In context complex software composed many software component developed independently considered black box
Furthermore assembled often dependent
In setting component upgrading key issue since enables software component evolve
To support component upgrading deal component dependency need expressed precisely
In paper consider component upgrade requires managing substitutability new old component
The substitutability check based dependency context description
It involves maintaining availability previously used service making sure effect new provided service disrupt system context invariant still preserved
We present formal definition verification algorithm safe component substitutability

âãÏÓ obj endobj obj stream hÞbbd ÒrH c X ã ãª endstream endobj startxref EOF obj stream hÞb q W
á h Õ àà N Aõ èW ÚË S Ã endstream endobj obj endobj obj endobj obj endobj obj stream hÞì V ÊxKg uë T õ vÎl vÊÜë óÚ R
õãN Ôføôuy ÁÂ ÑX H ëõ BY Èz SÏ OÕ ù ð V í W Xl tì VS G k g g Ç WMÜ ýþÝõÖ ÊIÍj
Ä Ëõ þLÈý zy K Ò ïÜóVoüÃÓ ö WE l çta stream C ï Ùl W YÄE ß H ït Ó îp

Substitutability property software application allows user system fine grained choice control way computing environment work without
This marked contrast existing healthcare application particularly electronic health record typically monolithic allow substitution function vendor without extensive technical support possible
I review early question follow adoption substitutability model health care information technology
Published Version Last edited Oct Exported Aug Original URL http In fall electoral victory Obama administration became apparent going large investment promised campaign implementation electronic health record
With colleague I wondered single bit guidance would insure investment would durable create condition necessary growth richness capability electronic health record broadly automation health care
The obvious idea bandied enforcement interoperability
This technical capacity one system talk another system data preserved accurately seemed like obvious stipulation
On reflection seemed insufficient
After standardization effort underway include huge academic industrial establishment including committee meeting national meeting regulatory meeting last thirty year also many commercial vendor already undergone extensive expensive technical compliance certification effort
Yet obvious anybody involved purchase implementation deployment health automation system sharing data across different vendor application system difficult best
Despite certified interoperability existing standard achieving true data liquidity untrammeled flow data across application different vendor required least extensive collaboration cooperation vendor better yet extensive onsite expertise system integration
It occurred interoperability necessary precondition quite different property could eventually lead interoperability
That property substitutability
Substitutability capability inherent system replacing one application another similar functionality
A deep commitment substitutability enforces necessity several important feature
Most importantly put consumer purchaser application driver seat defining constitutes appropriate substitution
That substitutability come define requires purchaser application replace one application another without technically expert without requiring application using without consult require assistance vendor previously installed currently installed application
It matter application substituted previous one mirror functionality perfectly
In fact lack equivalence might virtue allowed true innovation
Importantly main guiding principle substitutability purchaser user new application substitute prior one without special technical assistance
Just importantly could revert old application without additional technological investment
It coincidental time discussing concept substitutability commercial realm remarkable successful example substitutability
The iPhone fall le application Summer iPhone app store showed easy consumer substitute one application another
It also showed virtuous cycle allowing relatively easy access modulo Apple tax vetting process innovative developer user community
It small leap recognize providing
Of course insisted health care lot complicated iPhone richness iPhone platform increased particular concern diminished
Nonetheless iPhone one several platform allow easy substitutability
Computer operating system long allowed one application substituted another without requiring extensive none vetting process required iPhone
Yet date electronic health record vendor require significant IT investment allow new function implemented third party within application
This lead well known health automation
It certainly allow thousand creative developer opportunity developing ware healthcare automation without either sizable salesforce formal relationship existing healthcare IT vendor
Do need regulation around substitutable application
For example let suppose medication management application substituted another patient provider provided assurance new application create new risk disclosure
What flow liability two application two vendor interact way result harmful medical
Are technical approach reduce regulatory burden
Do platform substitutable application health work better open closed
If closed government IT company healthcare provider consumer consortium
Should set software service made available substitutable health IT application
patient data selection communication consumer communication public health authority common service allowed evolve organically
On iPhone example application access common service
GPS contact list time directly share data short cut paste
Should enforcement data standard leading application determine standard
In short term lack standard mean little data liquidity popular application demonstrate value liquidity
Are societal imperative trump expediency
Conversely utility determined user limited pronouncement standard organization
Should competitor free create platform capable case iPhone Android platform owner platform prevent compatibility legally technically
Should nurture development one market alternative application similar function much like Apple iPhone App Store
Should commercial federal subsidy market
Will personal health record application populate market healthcare institution
What better mechanism certifying safety quality efficacy substitutable application
Is purchaser feedback marketplace App Store third party evaluator

Kibbe DC
Toward modular EHR
Fam Pract Manag

PubMed PMID
New admin account replace original security purpose default admin prone attack

Stack Exchange network consists Q A community including largest trusted online community developer learn share knowledge build career
Suppose n player joint production produce common output v individual action
Does convexity concavity v action say something substitutability complementarity action
In problem like complementarity substitutability often defined respect
Write derivative v respect th argument
Thus measure much output increase increase effort slightly
Now let think derivative respect ij
If ij extra unit effort yield output high
We say j effort complement extra effort j make effort effective vice versa
Conversely ij extra effort j make effort le often taken definition substitutability
By posting answer agree
asked viewed active site design logo Stack Exchange Inc user contribution licensed

learn share knowledge build career
I heard Liskov Substitution Principle LSP fundamental principle object oriented design
What example use
A great example illustrating LSP given Uncle Bob podcast I heard recently sometimes something sound right natural language quite work code
In mathematics
Indeed specialization rectangle
The make want model inheritance
However code made derive usable anywhere expect
This make strange behavior
Imagine method base class seems perfectly logical
However reference pointed make sense setting one would change match
In case fails Liskov Substitution Test abstraction inherit bad one
check priceless
The Liskov Substitution Principle LSP concept Object Oriented Programming state Functions use pointer reference base class must able use object derived class without knowing
At heart LSP interface contract well decide extend class use another strategy composition achieve goal
The effective way I seen illustrate point
They present scenario developer project build framework strategy game
They present class represents board look like All method take X Y coordinate parameter locate tile position array
This allow game developer manage unit board course game
The book go change requirement say game frame work must also support game board accommodate game flight
So class introduced extends
At first glance seems like good decision
provides property provides Z axis
Where break look member inherited
The method take X Y parameter class need Z parameter well
So must implement method Z parameter
The Z parameter context class inherited method class lose meaning
A unit code attempting use class base class would luck
Maybe find another approach
Instead extending composed object
One object per unit Z axis
This allows u use good object oriented principle like encapsulation reuse violate LSP
LSP concern invariant
Your board example broken outset interface simply match
A better example would following implementation omitted Now problem although interface match
The reason violated invariant stemming mathematical definition square rectangle
The way getters setter work satisfy following invariant However invariant violated correct implementation therefore valid substitute
Robert Martin excellent
It discus subtle way principle may violated
Some relevant part paper note second example heavily condensed One glaring violation principle use Type Information RTTI select function based upon type object

Clearly function badly formed
It must know every possible derivative class must changed whenever new derivative created
Indeed many view structure function anathema Object Oriented Design
However far subtle way violating LSP
Consider application us class described Imagine one day user demand ability manipulate square addition rectangle
Clearly square rectangle normal intent purpose
Since ISA relationship hold logical model class derived
inherit function
These function utterly inappropriate since width height square identical
This significant clue problem design
However way sidestep problem
We could override But consider following function If pas reference object function object corrupted height changed
This clear violation LSP
The function work derivative argument
LSP necessary code think calling method type may unknowingly call method type
inherits derives subtype supertype
For example occurs function input parameter type called
invoked argument value type
Or identifier type assigned value type
LSP requires expectation
invariant method type
violated method type
called instead
Even type still invariant
Rectangle setter expect dimension independently modified Square setter violate expectation
LSP requires method subtype must contravariant input parameter covariant output
Contravariant mean variance contrary direction inheritance
type input parameter method subtype must type corresponding input parameter corresponding method supertype
Covariance mean variance direction inheritance
type output method subtype must type corresponding output corresponding method supertype
This caller think type think calling method supply argument type assigns output type
When actually calling corresponding method input argument assigned input parameter output assigned type
Thus contravariant
subtype would subtype assigned
Additionally language
Scala Ceylon variance annotation type polymorphism parameter
generic direction variance annotation type parameter type must direction respectively every input parameter output every method type type parameter
Additionally input parameter output function type variance direction required reversed
This rule applied recursively
invariant enumerated
There much ongoing research model invariant enforced compiler
see page declares enforces state invariant orthogonal type
Alternatively invariant enforced
For example assert file open closing could return OpenFile type contains close method available File
A another example employing typing enforce invariant
The type system may even

language theorem provers formalize model typing
Because need semantics I expect employing typing model invariant
unified denotational semantics superior Typestate
mean unbounded permuted composition uncoordinated modular development
Because seems antithesis unification thus two model
type Typestate expressing shared semantics ca unified extensible composition
For example extension unified subtyping function overloading parametric typing domain
My theoretical position see section blind general model enforce coverage possible invariant computer language
For knowledge exist unexpected possibility much exist
disorder entropy must always increasing
This entropic force
To prove possible computation potential extension compute priori possible extension
This Halting Theorem exists
undecidable whether every possible program programming language terminates
It proven specific program terminates one possibility defined computed
But impossible prove possible extension program terminates unless possibility extension program Turing complete
via
Since fundamental requirement intuitive understand incompleteness theorem Russell paradox apply extension
An interpretation theorem incorporates generalized conceptual understanding entropic force Functions use pointer reference base class must able use object derived class without knowing
When I first read LSP I assumed meant strict sense essentially equating interface implementation casting
Which would mean LSP either ensured language
For example strict sense ThreeDBoard certainly substitutable Board far compiler concerned
After reading concept though I found LSP generally interpreted broadly
In short mean client code know object behind pointer derived type rather pointer type restricted
Adherence LSP also testable probing object actual behavior
That examining impact object state method argument result method call type exception thrown object
Going back example Board method made work fine ThreeDBoard
In practice however difficult prevent difference behavior client may handle properly without hobbling functionality ThreeDBoard intended add
With knowledge hand evaluating LSP adherence great tool determining composition appropriate mechanism extending existing functionality rather inheritance
The LSP rule contract clases base class satisfies contract LSP derived class must also satisfy contract
In satisfies LSP every time call Foo Derived object give exactly result calling Foo Base object long arg
Strangely one posted original described lsp
It easy read Robert Martin one worth
An important example LSP
If I class A subclass B I reuse test suite B test A
To fully test subclass A I probably need add test case minimum I reuse superclass B test case
A way realize building McGregor call Parallel hierarchy testing My class inherit
Some form injection needed ensure test case work object type A rather type B simple template method pattern
Note reusing suite subclass implementation fact way test subclass implementation
Thus one also argue one run superclass test suite context subclass
See also answer Stackoverflow question Substitutability principle programming stating computer program S subtype T object type T may replaced object type S let simple example Java The duck fly bird But Ostrich bird But ca fly Ostrich class subtype class Bird But ca use fly method mean breaking LSP principle
There check list determine whether violating Liskov
Check list When overriding method allowed modify property base class
Take look code see Name defined private set SubType introduces new method allows modifying reflection There others item
But possible C I C developer I dont care
Reference I guess everyone kind covered LSP technically You basically want able abstract away subtype detail use supertypes safely
So Liskov underlying rule Signature Rule There valid implementation every operation supertype subtype syntactically
Something compiler able check
There little rule throwing fewer exception least accessible supertype method
Methods Rule The implementation operation semantically sound
Properties Rule This go beyond individual function call
All property need preserved extra subtype functionality violate supertype property
If three thing taken care abstracted away underlying stuff writing loosely coupled code
Source Program Development Java Barbara Liskov This formulation LSP way strong If object type S object type T program P term T behavior P unchanged substituted S subtype Which basically mean S another completely encapsulated implementation exact thing And I could bold decide performance part behavior P
So basically use violates LSP
It whole point OO obtain different behavior substitute object one kind one another kind
The formulation cited better since property depends context necessarily include whole behavior program
Some addendum I wonder anybody write Invariant precondition post condition base class must obeyed derived class
For derived class D completely sustitutable Base class B class D must obey certain condition So derived must aware three condition imposed base class
Hence rule subtyping
Which mean A relationship shall obeyed certain rule obeyed subtype
These rule form invariant precoditions postcondition decided formal
Further discussion available blog A square rectangle width equal height
If square set two different size width height violates square invariant
This worked around introducing side effect
But rectangle setSize height width precondition height width
The derived subtype method requires height width stronger precondition violates lsp
This show though square rectangle valid subtype precondition strengthened
The work around general bad thing cause side effect weakens post condition violates lsp
setWidth base post condition width
The derived weakens height width
Therefore resizable square resizable rectangle
story short let leave rectangle rectangle square square practical example extending parent class either PRESERVE exact parent API EXTEND IT
Let say ItemsRepository
And sub class extending Then could working Base ItemsRepository API relying
The broken class
Let say use rectangle code In geometry class learned square special type rectangle width length height
Let make class well based info If replace first code break This new precondition class
According LSP instance substitutable subclass instance
This instance pas type check instance cause unexpected error code
This example part
So sum violating LSP probably cause error code point
Would implementing ThreeDBoard term array Board useful
Perhaps may want treat slice ThreeDBoard various plane Board
In case may want abstract interface abstract class Board allow multiple implementation
In term external interface might want factor Board interface TwoDBoard ThreeDBoard although none method fit
I encourage read article
You find explanation Liskov Substitution Principle general clue helping guess already violated example approach help make class hierarchy safe
The clearest explanation LSP I found far The Liskov Substitution Principle say object derived class able replace object base class without bringing error system modifying behavior base class
The article give code example violating LSP fixing
LISKOV SUBSTITUTION PRINCIPLE From Mark Seemann book state able replace one implementation interface another without breaking either client principle enables address requirement occur future even foresee today
If unplug computer wall Implementation neither wall outlet Interface computer Client break fact laptop computer even run battery period time
With software however client often expects service available
If service removed get NullReferenceException
To deal type situation create implementation interface This design pattern known Null Object corresponds roughly unplugging computer wall
Because using loose coupling replace real implementation something nothing without causing trouble
In simple sentence say The child class must violate base class characteristic
It must capable
We say subtyping
Likov Substitution Principle state Intent Derived type must completely substitute able base type
Example return type java
By posting answer agree
asked viewed active site design logo Stack Exchange Inc user contribution licensed

learn share knowledge build career
I read summary always use definition principle substitution talk inheritance
But It explain meaning principle
What principle
Thank
You probably know name
It say If S T reference T changed reference It mean plainly subclass must honor contract set super class
If extend super class read document implement dictate
That
If I hear one time Liskov substitution I going kill kitten
Functions use pointer reference base class must able use object derived class without knowing also known liskov substitution Basically say class implement determined interface replaced implementing inteface
You found information quoting definition If program module using reference Base class able replace Base class Derived class without affecting functioning program
The principle substitution Liskov Substitution Principle LSP basically state object hierarchy every scenario object used parent
For concrete example By posting answer agree
asked viewed active site design logo Stack Exchange Inc user contribution licensed

