In process input data produce output used input another program
The output said form input data often used subsequent program like
The amount kind processing done depends nature preprocessor preprocessors capable performing relatively simple textual substitution expansion others power
A common example processing performed next step compilation
In phase known
It also include macro processing file inclusion language extension
Lexical preprocessors preprocessors require operate source text prior performing simple substitution character sequence tokenized character sequence according rule
They typically perform file conditional compilation inclusion
The common example take line beginning
Because know nothing underlying language use criticized many feature built directly language
For example macro replaced aggressive inlining template includes import requires preservation type information object code making feature impossible retrofit language effectively accomplished dead code elimination language
However key point remember preprocessor directive start new line
Other lexical preprocessors include commonly used build system open source macro processor operates pattern context
Syntactic preprocessors introduced family language
Their role transform syntax tree according number rule
For programming language rule written language program reflection
This case
Some language rely fully external language define transformation preprocessor statically typed counterpart
Syntactic preprocessors typically used customize syntax language extend language adding new primitive embed DSL inside general purpose language
A good example syntax customization existence two different syntax programming language
Programs may written indifferently using normal syntax revised syntax may either syntax demand
Similarly number program written customize syntax language addition new operator
The best example language extension macro found family language
While language simple dynamically typed functional core standard distribution permit imperative programming well static typing
Almost feature implemented syntactic preprocessing although bear noting macro expansion phase compilation handled compiler Lisp
This still considered form preprocessing since take place phase compilation
One unusual feature family language possibility using macro create internal DSL
Typically large project module may written variety one perhaps using dialect another written dialect specialized etc
standard library contains example level syntactic abstraction form LOOP macro implement minilanguage describe complex iteration still enabling use standard Lisp operator
The provides similar feature external DSLs
This preprocessor take description semantics language
interpreter combining interpretation code generation turn definition compiler programming language either bytecode native code
Most preprocessors specific particular data processing task C language
A preprocessor may promoted meaning aimed specific usage programming language intended used wide variety text processing task
probably well known example general purpose preprocessor although C preprocessor sometimes used specific role
Examples

learn share knowledge build career
Can someone please explain software framework
Why need framework
What framework make programming easier
It difficult tell asked
This question ambiguous vague incomplete overly broad rhetorical reasonably answered current form
For help clarifying question reopened
I late answer
But I would like share one example I thought today
If I told cut piece paper dimension surely would
But suppose I ask cut piece paper dimension
In case wo measuring time obviously would make frame help would able cut piece paper le time
So make framework would specific type task
Instead performing type task type application create framework facility together one nice packet hence providing abstraction application importantly many application
Technically framework
If making really really simple site think web back HTML CSS
And want make modern webapp actually use framework either
You instead choose write logic need every time
You write layer busy write custom SQL every single database access
You write authentication session handling layer
And template rending logic
And logic
And security function
And unit test framework make sure work fine
And go quite long time able benefit good usually well tested work dozen hundred developer may well better
You get build want rapidly without spend time building worrying much infrastructure item listed
You get done le time know framework code using extending likely done better
And cost
Investing time learning framework
But virtually every web dev attest definitely worth time spent learning get massive really massive benefit using whatever framework choose
first google hit btw explains quite well A software framework computer programming abstraction common code providing generic functionality selectively overridden specialized user code providing specific functionality
Frameworks special case software library reusable abstraction code wrapped Application programming interface API yet contain key distinguishing feature separate normal library
Software framework distinguishing feature separate library normal user application You may need may provide great shortcut developing application since contains lot already written tested functionality
The reason quite similar reason use software library
A lot good answer already let see I give another viewpoint
Simplifying thing quite bit view framework application complete except actual functionality
You plug functionality PRESTO
application
Consider say GUI framework
The framework contains everything need make application
Indeed often trivially make minimal application line source absolutely nothing give window management management menu button bar etc
That framework side thing
By adding application functionality plugging right place framework turn empty app nothing window management etc
real application
There similar type framework web apps apps etc
In case framework provides bulk tedious repetitive code hopefully provide actual problem domain functionality
This ideal
In reality course success framework highly variable
I stress simplified view framework
I using scary term like Inversion Control like although framework scary concept
Since beginner I thought I spare jargon go easy simile
I sure definition framework
Sometimes large set library called framework I think typical use word closer definition aioobe brought
This sum difference set library framework A framework defined set library say call u call How framework help
Because instead writing something scratch basically extend given working application
You get lot productivity way sometimes resulting application far elaborate could done time frame usually trade lot flexibility
A simple explanation A framework scaffold build application around
A framework generally provides base functionality use extend make complex application framework sort thing
Microsofts MVC framework good example
It provides everything need get ground building website using MVC pattern handle web request route like
All implement Controllers provide Views two construct defined MVC framework
The MVC framework handle calling controller rendering view
Perhaps best wording I hope help lowest level framework environment given set tool work tool come form library configuration file etc
environment provides basic setup error reporting log file language setting etc modified extended built upon
People actually need framework matter wanting save time others matter personal preference
People justify framework code scratch
But people confusing library framework
I biased I actually using framework right
A framework provides particular problem area
Definition A software framework computer programming abstraction common code providing generic functionality selectively overridden specialized user code providing specific functionality
Frameworks special case software library reusable abstraction code wrapped Application programming interface API yet contain key distinguishing feature separate normal library
A framework help u using already created metaphore like think earth material programming language example camera program decided create notebook
You need recreate camera everytime use earth framework example technology store take camera integrate notebook
A framework function may need
maybe need sort array inbuilt sorting mechanism
Or maybe need window want place control find framework
kind WORK span FRAME around work
EDIT OK I dig guy trying tell perhaps havent noticed information line WORK span FRAME around getting fallen deeper n deeper
I try give floor hoping gracfully good explanation question Difference Library Framework I found Beyond definition sometimes understandable already understand example helped
I think I got glimmer understanding loooking sorting list example framework providing functionality tailored user code providing specific functionality
Take IComparer
The sort algorithm resides framework Sort method need series compare object A come object B
But Sort clue compare type sorted know
You could write comparison sort algorithm reused many user anticipate various type called upon sort
You got leave bit work user
So sort aka framework call back method user code type sorted compare
Or delegate used point
Did I get right
In General A frame Work real Conceptual structure intended serve support Guide building thing expands structure something useful asked viewed active Get In get see By subscribing agree
site design logo Stack Exchange Inc user contribution licensed

This paper concerned technique translating array expression found FORTRAN efficient vector expression machine long vector needed high performance
It describes application technique precompiler CYBER requires vector length achieve asymptotic speed
The precompiler vectorize FORTRAN DO loop instead vectorizes optimizes program written explicit array syntax proposed FORTRAN standard FORTRAN
The optimization vector code intended effective algorithm commonly used approximation partial differential equation
scheme frequently evaluate expression interior multidimensional rectangular array
In computation precompiler able vectorize arithmetic operation entire array rather individual dimension thus generating relatively long vector
This vectorization done whenever possible without using expensive gather operation
When gather operation must used precompiler attempt minimize making one gather serve several operand use mask offset
Check access login credential institution

learn share knowledge build career
What symbol mean Load Symbol List
Or example MSDN let begin conditional directive testing symbol symbol see evaluate true
Where symbol defined declared
For Load Symbol List symbol defined element syntax programming language
A local variable name symbol
A class type identifier symbol
PDB file contain symbol information debugger know thing reside name original source code
For symbol mean preprocessor conditionally defined C symbol
C preprocessor phase term little confusing
You define conditional symbol using define You test whether symbol defined using Preprocessor symbol typeless generally intersect type identifier actually part program code
The preprocessor sits source code
Preprocessor symbol exist compiled output take memory space runtime
Logically speaking compiler never see preprocessor syntax removed text reach compiler proper
Symbol fairly broad term computer science
Wikipedia article
However case looking preprocessor precompiler directive affect result compiling
In case symbol variable one symbol used like The Debug symbol evaluate code compiled Debug mode case code within block sent compiler
You also use creates symbol le set value
So undefined symbol evaluates whereas defined symbol evaluates You also add symbol use code remove built symbol
If use Visual Studio Properties project build tab
If use Visual Studio I would suspect symbol added command line compile program
By posting answer agree
asked viewed active site design logo Stack Exchange Inc user contribution licensed

MyNAP member online
Not MyNAP member yet
start saving receiving special member perk
Computer science younger academic discipline partitioning experimental theoretical component occurred recently still
As used report experimental computer science engineering ECSE refers building experimentation nontrivial hardware software system
ECSE field constituent intellectual revolution begun invention electronic computer subsequent commercialization
Although building first experimental computer fit definition given field emerge perhaps identifiable research discipline distinct either numerical computation since become known theoretical computer science
With need ECSE faculty greatly exceeding supply Feldman report identified limited availability computer hardware principal constraint production field
The National Science Foundation NSF initiated highly successful Coordinated Experimental Research CER program remedy
Today many school Feldman Jerome William Sutherland

Rejuvenating Experimental Computer Science September
Forsythe list one experimentalists half member department ECSE faculty
Experimental computer science engineering program university differ significantly
Some school typically large group experimentalists quite able build maintain faculty infrastructure necessary conduct significant experimental research
Highly trained graduate produced technology created valuable national competitiveness well important scholarly content
Junior faculty mentored successful promotion time
At school tenure promotion process seems accommodate particular characteristic enumerated experimental research complicate academic ECSE career
However much larger number characterized smaller size accident experimentalists little experimental activity way
These school include otherwise strong reputation
Many school present career environment new assistant professor ECSE often perceive difficult hostile
Many ECSE faculty nonexperimental tenured committee difficulty creating maintaining research environment appropriate need reported strong belief promotion required theoretical research assistant professor order gain respect senior faculty produce enough publication meet test paper counter within department college university
To extent latter view valid several major implication
In absence fair balanced academic reward system ECSE faculty promising talented experimental computer scientist engineer may well forsake academic life disproportionate number leaving academic community unduly weighted toward theoretical work increasingly irrelevant computing practice
Such shift would serve student poorly since balanced education includes instruction technology essential productive career
Such instruction effectively provided faculty engaged experimental research
Moreover academic research ECSE critical continued technological preeminence United States The set academic department offering doctorate computer science computer engineering known field Forsythe list late George Forsythe professor Computer Science Stanford University originally compiled
computer hardware software competitive advantage derive research may dulled research infrastructure weakened
The remainder chapter set experimental computer science engineering context defines describes defining characteristic research methodology elaborates need conduct ECSE research university
describes requirement academic career development ECSE along infrastructure support need experimental computer scientist engineer
deal educational dimension academic ECSE
address philosophy evaluating ECSE research practicality related evaluation
describes committee judgment characteristic positive environment academic ECSE
describes special need concern le recognized institution
provides key finding recommendation report
The scope report limited committee charge resource available committee
In particular systematic attempt made survey entire computer science engineering community characterize institution ECSE research undertaken
Rather committee developed insight deliberation informal although extensive contact experimental computer scientist engineer
As check insight conclusion committee made substantial use several informal survey sent ECSE community cooperation Computing Research Association CRA survey referred collectively throughout report survey
describes survey instrument detail
provides quantitative comparison two mode publication journal conference
The committee examine detail analogous problem discipline
It may many problem real perceived discussed report also encountered biotechnologists The Computing Research Association service organization computer science engineering CS E research community
It supported primarily academic CS E department whether doctorate granting
material scientist academic researcher scientific engineering discipline closely linked practice
Some comparison field given later chapter
To set context defining computer science engineering detail see following section necessary consider field computer science engineering CS E whole
Defining computer science engineering trivial matter multiple definition exist
Two considered point view experimentation
A recent CSTB report characterizes CS E field
Although explicitly identify CS E experimental component experimentation indeed important aspect many field subdisciplines
defines essential intellectual content field following term C omputer scientist engineer focus information way representing processing information machine system perform task
It identifies key intellectual theme field algorithmic thinking information representation computer program
Furthermore report cite accomplishment five subdisciplines system architecture programming language compiler software engineering artificial intelligence computer graphic user interface algorithm computational complexity
Although subdisciplines experimental theoretical component last domain intensive experimental research
Another description field Discipline also known Denning report take different approach defining field strength flaw respect experimental research
The report enumerates subareas field inclusive respectful natural partitioning discipline
The report classifies content Computer Science Telecommunications Board

National Academy Press Washington Denning Peter Douglas Comer David Gries Michael Mulder Allen Tucker Joe Turner Paul Young

Computing Discipline
Algorithms data structure Programming language Computer architecture Numeric symbolic computation Operating system Software engineering Databases information retrieval Artificial intelligence robotics interaction SOURCE Denning Peter Douglas Comer David Gries Michael Mulder Allen Tucker Joe Turner Paul Young

Computing Discipline
subareas via three basic abstraction used disciplinary subareas accomplish goal
However tripartite classification ignores role experimentation
For example either dictionary definition common usage field performance activity understanding well hardware software system described theory abstraction design
It experimentation important subdiscipline ECSE
This experimental topic found taxonomy
Indeed constructing artifact defining property ECSE explained included trinity
The Denning report must continually append design component phrase implementational issue make connection constructing artifact
A formulation recognizing experimental theoretical component topic area might descriptive field
For purpose report CS E defined representing processing information definition
The topic area Denning report broadly construed serve decomposition field
Further phenomenon CS E studied using theoretical experimental methodology
Partitioning field experimental theoretical topic therefore difficult
To extent research meet definition ECSE next section finding report apply
Experimental computer science engineering defined opening paragraph chapter building experimentation nontrivial hardware software system
Although sufficient introduction definition precise enough describe field exactly
Better definition would use term presuppose understanding field would obviate need definition
Moreover would assume appreciation subtle distinction difference nature experimentation ECSE experimentation physic biology
Thus detailed description ECSE characterizing feature presented returning matter succinct definition end section
In addition subtle distinction appreciated overall context understood discussion artifact presented general fashion additional fine still important point raised section immediately following
Experimental computer science engineering defined term six essential characteristic unique individually collectively define unique field intellectual depth directed toward understanding diverse phenomenon
Perhaps critical property ECSE focus computational artifact hardware software system
However introduce artifact properly requires synthetic nature discipline treated first
After synthetic nature discussed artifact introduced four property experimental research complexity artifact dependence technology universality phenomenon nonreliance theory
In definition theoretical computer science discussed A Note Terminology
Although assertion theory usually construed narrowly certainly true revised definition nonexperimental work CS E intended build mathematical foundation model describing explaining understanding various aspect computing somewhat vague experimentation could equally defined nontheoretical work In fact formulating model describing explaining understanding various aspect computing whatever form fundamental field whole whether research experimental theoretical nature
Experimental computer science engineering share branch CS E fact largely synthetic discipline
That phenomenon studied practitioner created person rather given nature
There fundamental truth mathematics computer information processing entirely creation human being
This synthetic quality come contact physical phenomenon extreme field semiconductor MOS technology chip property light reflectance graphic generally subject matter synthetic
With direct physical constraint practitioner wide latitude creative
This possibility imaginative implementing one idea working computer system one exciting reward ECSE
However synthetic property also introduces complication field may encountered researcher field
Examples described include difficulty conveying intangible quality creative research complication assessing contribution embodied artifact interrelatedness experimental system
The le constrained quality synthetic discipline liberating imagination odds sometimes traditional assumption academic career development science
In later chapter point discussed
An ECSE instance implementation one computational phenomenon
Because phenomenon studied process algorithm mechanism like manipulate transform information artifact embody manipulation transformation
Examples artifact hardware sys Computer science engineering synthetic sense
Another sense synthetic composition part applies field engineering discipline describe focus organizing principle system
The sense significant term characterizing field
See Simon Herbert

MIT Press Cambridge Mass
Additionally committee recognizes philosophical debate whether mathematics invented discovered
However resolution detailed discussion subject appropriate report
tems computer software system text editor
The artifact subject study apparatus conduct study
It often embodies substantial portion intellectual contribution experimental research creation represents significant intellectual effort
The term often used field synonymously electronic hardware software system construed much broadly
Thus addition hardware system computer chip circuit board software system including compiler editor expert system design CAD tool experimentalists would likely include graphic image animation robot certain data file including multiprocessor execution trace test benchmark suite International Symposium Circuits Systems ISCAS suite structural description Utah Tea Pot
Other thing experimentalists build study might classified artifact practitioner would agree
Programming language architecture protocol methodology programming spiral approach software development domino logic example
The definitional issue case derives fact certain artifact interpreter Pascal implementation abstraction Pascal programming language turn could thought implementation still abstract concept procedural imperative programming language
What concept instance
It may depend abstractly one think illustrates one mapping idea artifact
However unnecessary purpose report perfectly definitive problem outlined pertaining creation study artifact apply narrow broad interpretation
Artifacts central ECSE phenomenon algorithm mechanism information describe particular behavior response input generally complex term total number constituent part
Such characteristic almost always overwhelm ability understand direct analysis
They simply complex
Moreover often important interaction part The ISCAS suite set circuit designed used test tool chip design
The Utah Tea Pot geometric description china teapot lid used standard picture algorithm
TABLE Mapping Ideas Artifacts Idea Artifact Extra register speed context saving procedure call Microprocessor chip register window compiler generates code use Avoiding global clock synchronization speed simulation parallel machine A conservative simulation advance individual clock independently earlier event completed An optimistic simulation advance individual clock independently roll back clock turn clock advance inappropriate Better software engineering methodology Tools enforce methodology Building program using methodology dynamic behavior
Both large number program hardware state temporal characteristic interaction exacerbate problem predicting well given computational idea perform basis purely logical theoretical analysis
Consequently process algorithm mechanism must implemented behavior system interaction component observed action
Artifacts serve three easily identifiable role ECSE research although probably others
The somewhat cumbersome perhaps suggestive name proof performance proof concept proof existence used role
Examples given discussion role follows
An artifact acting role provides apparatus testbed direct measurement experimentation
The artifact exists constructed result produced usually quantitative
This perhaps typical artifact ECSE research
A good example artifact role peephole code optimizer
Fraser observed compiler Fraser Christopher
A Compact Peephole Optimizer pp
Association Computing Machinery New York
e The built demonstrate performance implementation advantage became known reduced instruction set computer
These implementation critical verifying claimed advantage approach
The designed demonstrate several improved technique implementing parallel distributed operating system efficiency new method caching effectiveness file system
one first successful multiprocessor computer using microprocessor
This machine demonstrated range open problem building type multicomputer surmountable resulting machine could used computational engine several important scientific problem
demonstrated possible use large scale integration VLSI technology build much lower cost implementation expensive graphic hardware
demonstrated feasibility building local area network good performance low cost
demonstrated improvement modularity program internal structure program completely concealed inaccessible programmer responsible structure
The demonstrated usefulness thousand application nonprogrammers drawing close analogy computer manipulation information familiar operation text
first personal unify several technology screen mouse local computer local area network
This integrated machine truly different computer built profound impact development workstation personal computer
first language introduce idea encapsulation data abstraction
As created new set language feature demonstrated usefulness
The idea Simula profound impact language design
program translate computer language binary instruction executed computer often generate redundant instruction loading data register register already contains data
This redundancy result compiler strategy translating language statement one time
He conjectured examining generated instruction time peephole program optimizer could eliminate many redundancy thus speed processing time
Fraser added optimizer existing compiler discovered enormous improvement possible
Indeed optimizer successful removing unnecessary instruction time saved perform type processing instruction exceeded time needed perform optimization saving exceeded cost optimization introduced negative overhead
An artifact acting role demonstrates behavior complex assembly component accomplish particular set activity behavior could argued simply logical reasoning abstract argument first principle
To illustrate analogy role helping ECSE researcher understand complex system imagine frog exist created first time
Could credible case frog made without exhibiting one
The capability frog eye might describable muscle structure mouth tongue actuation nervous system could comprehensible mechanism nervous system brain could explained
Yet using logical argument alone convince skeptic standard science collection mechanism process could catch passing fly would inconceivable
The dynamic behavior system whose interacting part exhibit multitude state configuration complex defended convincingly direct analysis
Proof term demonstration necessary
The working system artifact witness proving concept least one configuration correct
Experimental computer good example artifact
A key problem solved parallel computing processor avoid long delay accessing referencing memory
Solutions problem motivated many different computer design serving role
One design us cache small memory local processor various method keeping cache coherent
A second design us multithreading ability execute instruction several process simultaneously order perform useful work waiting memory reference complete
A third design dispenses hiding memory latency emphasizes fast interprocess communication
All design focus memory reference one basic operation machine affect component system
Understanding effect different design philosophy first principle essentially impossible
An artifact playing role conveys essence entirely new phenomenon
Because computation synthetic human creativity produce phenomenon never imagined often explained better demonstration description
A good example artifact computer mouse used pointing device interaction
A verbal description mouse used simply convey useful input device
The mouse created Douglas Engelbart SRI International one several communication device
Although described full technical detail careful study made utility many computer scientist recall first appreciating significance invention published record film Engelbart produced showing mouse action
The demonstration device conveyed essence new phenomenon beyond amount description well worked
The three role artifact described order frequency likely appear ECSE research role mentioned last rare The contemporaneous complete technical description mouse contained following Engelbart
Design Considerations Knowledge Workshop Terminals
It interesting compare paper retrospective look mouse describing impact interface Engelbart
The Augmented Knowledge Workshop pp
Adele Goldberg ed

Association Computing Machinery New York
This article also good resource wishing know experimentation like
formance role mentioned first common
As noted artifact act multiple role perhaps frequently might expected
For example peephole optimizer first kind might seem meet definition artifact serving role actual mechanism optimizer sufficiently simple practitioner ability optimize program would dispute
The question effective could Fraser showed
Other engineering discipline also focused artifact indeed ECSE share certain characteristic discipline
However artifact engineering discipline typically constrained physical phenomenon gravity conductance metal compressibility gas
This limit variety artifact present criterion evaluating merit
An aircraft take arbitrary form one test success Does fly
By contrast synthetic property ECSE artifact underconstrains explained complicating creation evaluation
Computing artifact often exceedingly complex
Both artifact construction dynamic behavior complicated
Consequently creating understanding artifact require considerable intellectual effort
Complexity construction take several form including large number component high component specialization
An illustration property prototype designed built team Massachusetts Institute Technology
It contains chip copy custom processor chip designed team requiring page specify
The processor required million transistor resulting computer contained billion transistor devoted active logic memory
Although project may le complex superconducting super collider array telescope kept mind supporting entire field
It experiment single research typical contemporary machine design project several ongoing time
Daily William et al

The Processor A Multicomputer Processing Node Efficient Mechanisms
Software least complex hardware prototype requiring line code
There given time many software project way hardware project probably software implementation medium choice problem see discussion universality although also lower infrastructure cost
Unlike hardware frequently benefit replication line software distinct requires intellectual action compose
For program task getting program work perfectly roughly analogous writing manuscript without single grammatical spelling plot error
Also software development le advanced hardware term utilizing standard part building block construction tool although software development work higher level abstraction
Complex system rarely composed multitude undifferentiated part rather subdivided specialized component
These component often substantial system right requiring extensive specialized knowledge understand create
This property artifact illustrated database system optimizing compiler operating system many example
The core typical database design example includes least five major subsystem file manager database manager query processor data manipulation language precompiler data definition language compiler
The subsystem vary size depending sophistication design average size ten thousand line code
Many subsystem must added produce modern database system
Researchers studying database routinely create experiment system magnitude
A dominant theme ECSE reducing complexity using strategy generalization unification abstraction
Indeed reducing complexity may creative accomplishment significance
Yet ECSE researcher successful reducing complexity allure ambitious goal reintroduces additional complexity complicates creation artifact new way
ECSE intimate relationship technology
The technology artifact implemented incidental aspect artifact construction
Indeed availability given technology may well determine feasibility good innovative idea
For example application data compression might fail computer perform operation slow would faster simply transmit data uncompressed however computer speed improve faster data transmission rate approach might pay
In high cost individual logic gate made logic gate minimization important problem circuit design advent integrated circuit made gate cheap minimization became unnecessary
Then early chip area premium area minimization became hot theoretical topic subsequent submicron feature size semiconductor render problem negligible importance
The use technology project potentially subject hazard posed technology instability error delay whereas using stable mature technology carry risk obsolescence project finished
Reliance technology probably obvious many area ECSE hardware architecture graphic communication
Indeed advance technology often open new research opportunity ECSE
Examples include small disk redundant array independent disk large scale integration VLSI technology reduced instruction set computer RISCs
Software critical often form CAD tool facility aid managing complexity
Experimental software artifact require significant software technology infrastructure although widely appreciated
Such software take different form including developmental tool advanced programming language tool kit subsystem performing sophisticated kind analysis dependence analysis symbolic expression transformer standard part symbol table YACC window system
Such dependence technology mean nearly experimental software system rely many component module subsystem peripheral specific experiment corresponding increase system complexity
It possible wise experimentalist create software new yet experiment complete component essential
So ECSE researcher must acquire peripheral software build interface rest system
The quality resulting experiment depends availability quality software much relies ingenuity experimentalist
The side relationship ECSE technology fact recent year ECSE research increasingly responsible technological advancement computer field
Whereas product development team large computer manufacturer may responsible innovation many widely known computer advancement trace origin ECSE research
Examples known average processor networking window system UNIX relational many hidden inside system making faster efficient functional part technological infrastructure support rapid innovation characteristic computer field
A fifth characteristic ECSE concern fact computer malleable versatile
Unlike machine computer universal mean within broad limit whatever one machine machine
Whereas washing machine wash coffee grinder grind virtually computer capable word processing circuit optimization processing spreadsheet simulating galaxy
The speed processor memory size suitability peripheral device monitor may make performance task impractically slow cumbersome possible principle
Although property extremely convenient many respect introduces serious complication priori limit functionality computer lead expectation capability artifact
Because reason principle functionality previous artifact incorporated used conjunction artifact currently development expectation generally must
A familiar computing application document preparation illustrates phenomenon occurs widely technical situation original text editor simply allowed easy creation file character soon became processor addition sophisticated formatting laser printing capability
Then added creation incorporation graphic
Tools check grammatical error poor writing style
All system something predecessor treating text document footnote formatting English word meaningful English sentence grammar checker collection line region plane graphic
Such demand increasing functionality result steady increase complexity new computer system stand sharp contrast tion improved utility new word processor might simply better done text editor make smaller file compressed text allows sophisticated text substitution
There second consequence well
Expectations increasing functionality affect system serve similar purpose
For example standard feature word processor today
This lead expectation system text editing used slide presentation system also incorporate
However slide presentation system may use internal representation word different used word processor conceptually simple addition slide presentation system may difficult implement
Experimental computer science engineering depend elaborate formalized theoretical foundation way example experimental physic draw theoretical physic
In physic interplay coupling experiment theory rather tight
Theoretical explanation found experimental phenomenon evaluated ability predict phenomenon
Experiments physic designed basis theory predicts phenomenon observed
Theory computer science tradition close mathematics
That theoretician computer science tend prove theorem standard demonstrating correctness similar traditionally used mathematics
A good deal modeling work engineering discipline might considered theoretical nature conducted experimentalists
In word good experimentalists create model test reject accept hypothesis might considered theoretical work accident history
However complexity system built ECSE underlying model theory mean experimental implementation necessary evaluate idea model theory behind
Consequently experiment ECSE usually verify prediction theoretical computer science rely heavily model developed theoretician although noted good experimental work grounded testable model hypothesis
Experiments often conducted validate informal thesis derived computational model informed rigorously specified theory may developed expressly experiment
A useful analogy might ECSE today experimental aeronautical engineering information used design airframe came wind tunnel study rather computational fluid dynamic
Although many subareas within CS E studied theoretically research theoretical computer science coupled experimental work certain specialized topic idealized problem aligns well practical problem
For example language theory underpins parsing component compilation complexity theory underpins data encryption
Experimentalists use theoretical technique conduct work
For example rough estimate algorithmic complexity routinely made recognition problem directs experimentalists examine heuristic solution redirects attack toward alternate approach
These tool valuable reinforce theoretical component academic curriculum
Theoretical work occasionally motivates experimental work
A particularly nice example Manber application technique exact string matching algorithm create extremely fast powerful approximate string matching software
Although artifact new idea cast theoretical term key accomplishment work largely engineering required achieve high performance experiment large database performance characteristic program
Experimental work may motivate theoretical work CS E
For example first routing protocol used Arpanet attempted use routing based distributed routing algorithm
In practice algorithm led oscillatory behavior owing property protocol method used measuring load selection parameter
In retrospect computer scientist able explain theoretically reason oscillation implementation experimentation led identify address question
The complexity computational system make An problem one take long time solve function input size
More specifically computationally tractable problem solved polynomial time time increase function input size faster power input size
problem believed computationally intractable solution problem believed require time increase rapidly polynomially
Wu Manber

Fast Text Searching Allowing Errors
experimentation critical often infeasible anticipate important interaction behavior
Overall ECSE tightly coupled heavily reliant theoretical computer science although two intermingle point along boundary
Experimental exploration crucial understanding terrain field seems precondition building permanent foundation
One conclusion draw contrary widely held assumption within field well outside physic good model relationship experimentation theory CS E
The fact experimentation theory today largely independent area little interplay introduces possibility computer science engineering faculty member might well acquainted research methodology specialty
That possibility raise serious concern professional accomplishment evaluated purpose promotion see
With foregoing background succinct definition ECSE formulated implementation one computational phenomenon generally take form hardware software system term broadly construed
Artifacts usually complex term number integration component creation often requires considerable intellectual effort
An artifact subject study apparatus study
ECSE early exploratory stage well supported theory therefore carry different connotation ECSE physic biology medicine
One would imagine point known least computer science faculty testimony received committee asserted departmental chair experimentalists verifying prediction theory random access machine
They
Indeed experiment proposed
Because theorem PRAMs assert property asymptotic behavior unclear prediction finite set experiment could confirm
Not incidentally fact also explains department computer science thriving intellectual program without significant representation experimentalists
Artifacts computational phenomenon embody fundamental CS E
Yet perhaps recently since World War II become subject academic study well treated term scientific content secondary school college science literacy class popular scientific press artifact may widely understood say biological phenomenon
This section elaborates artifact role ECSE
Artifacts often quality either component functioning device work suitable experimentation one component working device used
Examples include computer robot operating system kernel like
Most highly integrated artifact run essentially complete
This property concern question whether working part bug concern component many artifact require complete
Rather concern fact highly integrated system basic operating cycle may rely large number component
An analogy would aircraft test flight airframe power control element must operational although galley need
Because computation synthetic human creativity produce phenomenon never imagined phenomenon often explained better demonstration description
Early computer Anatasoff machine ENIAC proof existence
Yet much embodied role concern conveying intangible
Much significance mouse animated graphic image knowable nonverbal channel
It virtually impossible write intangible knowledge easily archived
Computer graphic research area relies heavily artifact convey intangible
The channel visual perception course
In instance subject concern single image artifact namely program graphic workstation creates still picture
However dynamic image program running graphic workstation film image These among first computer developed early day electronic computing
essential illustrating accomplished
It obvious example demonstration flight simulator convey information beyond provided paper simulator
Seeing image develop time simply powerful convincing inclusive describing would look like
Another instance world graphic would natural light reflectance graphic image
Notice intangible need always concern matter perception
Because better could matter personal taste reasonable observer could disagree whether use artifact contribution
artifact sometimes employed illustrate creation hardware software using new methodology
An example classic work Parnas information hiding
Here artifact used chiefly exhibit property claimed methodology
A human us methodology produce artifact artifact assessed
In CAD system artifact assist production artifact methodology may carried combination human computer activity
Synthesis system produce circuit layout silicon chip example
The challenge use artifact often determining proper metric ass artifact inference drawn methodology
Simulation powerful methodology ECSE researcher use simulation extensively
Occasionally asked Why create artifact
Why simply simulate
Such question often apply computer chip expensive build physically
Generally answer simulator must account behavior many part simulated artifact run much slowly real artifact would simulation computer may run time slowly computer chip require hour simulate nanosecond activity
Thus creating artifact essential getting quantity experience
Usually first second hardware artifact run exhibit behavior month simulation used design
For example computer simulation airplane flight used train pilot fly real aircraft mere verbal description fly airplane would clearly suffice
Parnas David

On Criteria Be Used Decomposing Systems Modules
The performance artifact serving role measured order understand well perform precise numerical value result measurement rarely constant way melting point zinc constant
The reason different artifact serving function expected different performance characteristic
For example Fraser used different compiler different suite test program number would different different host compiler generate code different redundancy characteristic different program optimized different amount
Nor relative property negative overhead outcome must necessarily occur reproduction Fraser experiment although could indeed case
The significance measurement among thing quantified compiler writer effectiveness optimization showing thing sensitivity peephole size optimization type
Experimental computer science engineering share much field engineering
Engineering discipline ultimately concerned creation artifact computer system airplane power plant automobile provide significant practical utility functionality human user
A considerable amount engineering research devoted improving artifact thus aerospace engineer try build better plane civil engineer try build better road experimental computer scientist engineer try build better computing system
However despite importance end user great deal engineering research devoted improving artifact way necessarily obvious end user artifact made easier manufacture
Economics matter engineering artifact useful human being must also affordable practical construct
Thus one type achievement engineering discipline design artifact consumes significantly fewer resource provide functionality predecessor
In case engineer try create better artifact artifact offer greater utility functionality computational setting utility smaller investment resource
Because better root human judgment ECSE involves degree creativity insight artifact made better
ECSE also marked similarity specific field
Most obviously ECSE share synthetic property part CS E field mathematics
The universality computer influence research theoretical computer science although quite different way ECSE
Yet similarity dimension well
For example material science biotechnology technical discipline share ECSE close coupling rapidly changing technology
This say area science engineering profit advance technology
They clearly
However advance frontier discipline tied closely technology basis field
An important difference ECSE engineering discipline previously discussed difference functionality utility
Experimental computer scientist engineer subject demand functionality
By contrast aircraft designer strives greater utility improved fuel economy greater safety quieter operation greater functionality never issue
An airplane carry passenger air
It need example navigate city task reserved taxi obvious physical constraint
Although distinction greater functionality greater utility may matter degree rather one kind indeed flying car built designer computing artifact nearly always greater functionality design option principally physical constraint prevent
Because industrial product grow quite naturally artifact ECSE could asked Why ECSE exclusive province industry
The committee identified several reason conduct ECSE research university
Perhaps significant reason conduct ECSE research university ensure adequate intellectual diversity
For technical concept reach maturity injected technology base thousand flower must bloom
As explained difficult predict well process algorithm mechanism work practice well work together
Artifacts must built understand behavior
Of research prototype system perhaps worthy advanced development
Of advanced development system perhaps worthy product development production
The number exact course rather intended suggest commercial benefit result fittest survivor diverse environment technical competition
A concept survives technical merit justifies increased cost next level development perhaps factor greater previous level
Although research artifact become product far influence research community idea become incorporated way subsequent research
If performing experimental research university add diversity expanding number university experimental research CS E enriches intellectual environment
The theory community computer science strengthened diversity participant glance list participant conference Foundations Computer Science Symposium Theory Computing reveal wide variety institutional home participant
Although may unrealistic expect comparable diversity ECSE infrastructure resource constraint discussed would clearly undesirable academic institution perform ECSE research
Individual institution develop research style focus institution research important avenue investigation may overlooked
Many university become competitive ECSE research past dozen year program NSF Coordinated Experimental Research program Defense Department University Research Instrumentation program corporate equipment donation
The success program demonstrates direct intervention expand number competitive school
An additional reason performing ECSE research university environment enrichment give educational mission
Faculty engaged research keep curriculum fresh vitalize content design course
They must offer graduate student advanced seminar research area prepares conduct research topic educates others
For lowerlevel class frequently possible select example problem encountered research enliven topic student teacher
However valuable benefit may conducting research keep faculty member current
Given strong connection technology CS E evolves rapidly degree program quickly become antiquated obsolete without continual refreshment
Still another reason discipline CS E close tie industry
The majority undergraduate computer science major find employment industry half new CS E well
Without exposure ECSE formal education student would even le prepared engage meaningful career industry
As associate professor large private university noted response survey see The practical aspect compiler optimization passed verbally occasional oriented compiler text text focus different grammar parsing algorithm considered pure
Likewise practical software testing methodology often given far le discussion impractical theoretically elegant method
In architecture text issue signal delay noise loading power cost usually take back seat intellectually important issue organization instruction set theoretical simulated performance analysis
This bias contributing factor common complaint among industrial employer graduate retrained practical experience
Obviously academe recast training ground industrial employer increased amount practical genuine experimentation would benefit discipline
Finally strong experimental component research teaching program CS E department necessary aspect reaching academic discipline
As articulated future discipline demand part attention problem relevance society intellectual domain
None argues university industrial research laboratory equivalent research environment
Industrial laboratory AT T Bell Laboratories generally better resource fewer distraction effort funded parent corporation specifically hope expectation lead competitive advantage marketplace
Sometimes offer unique advantage proprietary technology access profile parent company customer work load
Universities offer different advantage including enthusiasm imagination graduate student wide freedom select topic study
Despite difference setting produced important experimental research idea recent year
Gries David Dorothy Marsh

The Taulbee Survey January
The information age grown work experimental computer science dedicated development new hardware software graphic interface computer system technology
While important society larger sense experimental computer science found awkward fit university environment
This volume examines special experimental computer science done achieve better fit practitioner academic context
You looking OpenBook online reading room since
Based feedback user made improvement make easier ever read thousand publication website
Do want take quick tour OpenBook feature
Show book jump chapter name
use button go back chapter skip one
Jump page one
Also type page number press go directly page book
Switch read report appeared print web version highlight search text
To entire text book type search term press
link book page preferred social network via email
View chapter
Ready take reading offline
Click book print free PDF available
Do enjoy reading report Academies online
Sign email notification let know new publication area interest released

Stack Exchange network consists Q A community including largest trusted online community developer learn share knowledge build career
I reading Bootstrap Getting Started doc I came across Source feature
Upon downloading package I found image file
What
Does compile browser upon page load
I guessing mean compiled tested shipping I understand would need advertised
us file generate CSS file
The version contains output LESS
If want modify Bootstrap need source compile LESS file CSS
The term word LESS us website
Does compile browser upon page load
I guessing mean compiled tested shipping I understand would need advertised
No Bootstrap run browser without CSS compiled using LESS
Precompiled relates Javascript CSS misnomer
When Javascript CSS library framework say precompiled usually mean minified obfuscated
I think term popularized use framework give impression compiled somehow make efficient performant another term misuse word
What referring use LESS produce CSS compatible browser
By posting answer agree
asked viewed active site design logo Stack Exchange Inc user contribution licensed

noun compiler From Old French
A computing science term compiler transforms human readable source code binary code computer understand
See Also Code Source Code
Software convert set language statement representation
For example help compiler convert text document embedded appropriate command online help system
A dictionary compiler convert term definition dictionary lookup system
Software translates program written programming language COBOL etc
machine language
A compiler usually generates assembly language first translates assembly language machine language
A utility known linker combine required machine language module executable program run computer
See
The following conceptual example source code converted assembly language machine code compiler IF GOTO ELSE GOTO ENDIF Compare A B Compare If equal go C If go Go D Go Create save customized flash card
Sign today start improving vocabulary
Please set username
People see Author Name public flash card

This action might possible undo
Are sure want continue
Algorithm A Precompiler Autogeneration Multiprecision Programs available

What would like
Would like merge question
Would like make primary merge question
What would like
What would like
What would like
What would like
What would like
What would like
Supervisor CONTRIBUTIONS What would like
What would like

All DBMS two basic set Languages Data Definition Language DDL set command needed define format data stored Data Manipulation Language DML tell set command modify process data make user definable output
The DML statement well written application program
The DML precompiler change DML statement SELECT FROM Structured Query Language SQL covered Block embedded application program normal procedural call host language
The precompiler relate query processor order produce appropriate code
Â

