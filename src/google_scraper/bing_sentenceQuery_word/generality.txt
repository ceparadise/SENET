I reasoned function implemented calculating length would make generic
The function would work correctly size changed using different situation one originally intended
In sense generic function fewer property likely feature correct
Being generic make function easy understand fewer thing aware also restrict behavior exclude extra information length used function part behavior described type corner case
An extreme example Parametric Polymorphism even derivable law function must satisfy seems like concept occurs level design
In end size
This also form correctness function one one thing used one way
The main reason way show throughout project size used consistent way nowhere size get misused
This mean see bug size calculated incorrectly end overwriting memory getting memory access exception taking huge amount time process structure appears larger
On hand function specific single use difficult make global change needed
In particular case okay make maintenance difficult
The main thing I learned tradeoff I work one I used
We build small reusable component many mechanism abstraction specification
Documentation becomes extremely important often subtle bug code included involving memory management
Yes agreed
I also seen trend
In academic pursuit one create scenario thing modularized easily maintainable
In real world solution elegant
Good discussion keep good work

Name binding abstract definition declaration variable parameter argument formal actuals
Modularity encapsulation function procedure abstract type generic library object class inheritance partition package unit separate compilation linking import export instance scope
block garbage collection static dynamic link display static dynamic binding activation record environment Static Dynamic Scope aliasing variable value result reference name unification eager evaluation lazy evaluation strict overloading polymorphism monomorphism coercion transfer function
The ability abstract generalize essential part intellectual activity
Abstraction generalization fundamental mathematics philosophy essential computer science well
The importance abstraction derived ability hide irrelevant detail use name reference object
Programming language provide abstraction procedure function module permit programmer distinguish program implemented
The primary concern user program
This contrast writer program whose primary concern implemented
Abstraction essential construction program
It place emphasis object rather represented work
Thus primary mean managing complexity large program
Of le importance generalization
While abstraction reduces complexity hiding irrelevant detail generalization reduces complexity replacing multiple entity perform similar function single construct
Programming language provide generalization variable parameterization generic polymorphism
Generalization essential construction program
It place emphasis similarity object
Thus help manage complexity collecting individual group providing representative used specify individual group
Abstraction generalization often used together
Abstracts generalized parameterization provide greater utility
In parameterization one part entity replaced name new entity
The name used parameter
When parameterized abstract invoked invoked binding parameter argument
Figure summarizes notation used abstraction generalization
When abstraction fully parameterized free variable bound parameter abstraction may understood without looking beyond abstraction
Abstraction generalization depend principle referential transparency
denote name abstract
Declarations definition instance use abstraction programming language In addition naming second aspect abstraction
It abstract encapsulated detail abstract hidden name sufficient represent entity
This aspect abstraction considered detail later chapter
An object said understood without reference thing external object
We could equally well say instead name
A entity whose value fixed may vary
Names bound variable declaration statement
Among various term abstract found text
A perform binding independently combine binding produce completed set binding
Nether binding reference name used binding
Collateral binding common occur Scheme ML
The common way composing binding sequentially
A perform binding sequence occur
The effect allow later binding use binding produced earlier sequence
It must noted sequential binding permit mutually recursive definition
In Pascal constant variable procedure function binding sequential
To provide mutually recursive definition function procedure Pascal provide separation signature function procedure body mean function prototype forward declaration mutually recursive definition may constructed
A one name bound used directly indirectly binding
Programming language require declaration reference invent special mechanism handle forward reference
For dynamic data type rule relaxed permit definition pointer type
For function procedure separate declaration signature function procedure body
Pascal forward declaration function prototype typical
The declaration reference often chosen simplify construction compiler
In Java choice made simplify programmer task rather compiler permit forward reference
A module system provides way writing large program various piece program interfere another name clash also provides way hiding implementation detail
A module generally consists two part export part local part
The export part module consists language declaration symbol available use either part module module import module declaration giving symbol module available use either part module module import
The local part module consists language declaration symbol avaliable use part
The work constructing large program divided among several people must produce part whole
Each part called module programmer must able construct module without knowing internal detail part
This possible module separated interface part implementation part
The interface part describes information required use module implementation part describes implementation
This idea already present programming language manner function procedure defined
Function procedure definition usually separated two part
The first part give subprogram name parameter requirement second part describes implementation
A module generalization concept abstraction module permitted contain collection definition
An additional goal module confine change module rather throughout program
While concept module useful abstraction full advantage module gained module may written compiled possibly executed separately
In many case module able tested independently module
EXPANDTHIS
Advantages called lambda abstraction denote generalization called replacing number occurrence part The parameter said expression said
The symbol
Quantifiers used replace constant variable
The specialization elaboration generic called application take form It denotes expression B obtained lambda expression free occurences replaced name parameter abstract
The invocation abstract take form occaisionally name called whose value substituted parameter
Upon invocation abstract argument bound parameter
Figure summarizes variety notation used denote elaboration generalization
Most programming language permit implicit form generalization variable may introduced without providing invocation procedure replaces parameter argument
For example consider following psudocode program computes circumference circle The Principle Generalization make restriction parameter part entity may parameterized
Neither programming language
This emphasized following principle We use notation denote substitution
The notation read E p expression obtained E replacing free occurrence p
formed two similar factor
The factor generalize common expression The lambda expression use rewrite product The lambda expression abstracted name three argument used replace lambda expression name get expression clearly indicates similarity factor
Figure present two style block first requires definition proceed body second requires definition follow body
A program block structure consists one block
This structure typical BASIC early version COBOL
The monolithic structure suitable small program
The scope every definition entire program
Typically definition grouped one place even used different part program
A program block structure partitioned distinct block outer inclosing block one inner block body may contain additional block inner block may contain block
This structure typical FORTRAN In language subprogram procedure function separate act block
Variables declared inside subprogram local subprogram
Subprogram name part outer block thus scope entire program along global variable
All subprogram name global variable must unique
If variable local subprogram must global accessable subprogram even though used couple subprogram
A program block structure block may nested inside block restriction nesting block within body
This typical block structure language
A block located close point use
In block visibility controlled nesting
All name visible implicitly exported internally nested block
No name visible exported enclosing block
In block name visible declared enclosing block declared block declared nested block
D A name referenced within block refers name declared outside block
An block time interval block executed
The three basic block structure sufficient called PITS
These program comprehensible entirety individual programmer
However general enough large program
Large program written many individual must consist module developed tested independently module
Such programming called PITL
The scope rule module define relationship among name within partition
There four choice
implementation ease cheap generalization parameterless function
Scope range visibility name
For example national boundary may encapsulate natural language
However word used within boundary native word
They word borrowed language defined foreign language
So program
A definition introduces name boundary object
The object may contain name local definition assuming definition may nested
These name said free
The meaning assigned name found outside definition
The rule followed determining meaning free name called scope rule
It concerned name control
X X A program may composed main program execution may call subprogram turn may call subprogram
When subprogram called calling subprogram wait called subprogram terminate
Each subprogram expected eventually terminate return control calling subprogram
The execution calling subprogram resume point immediately following point call
Each subprogram may local data found
An activation record consists association variable value assigned
An activation record may created time subprogram called destroyed subprogram terminates
DYNAMIC STATIC ALLOCATION The run time environment must keep track current instruction referencing environment active waiting program subprogram terminates proper instruction data environment may selected calling subprogram
The current instruction calling subprogram maintained stack
When subprogram called address instruction following call calling program pushed stack
When subprogram terminates instruction pointer set address top stack address popped stack
The stack often called
The address current environment also maintained stack
The top stack always point current environment
When subprogram called address new environment pushed stack
When subprogram terminates stack popped revealing previous environment
The stack often called stack contains link pointer reveal dynamic history program
When programming language permit recursive procedure data structure size independent computed input data maximum storage requirement program determined compile time
This simplifies run time support required program possible statically allocate storage used program execution
argument must evaluated determine value arithmetic expression conditional expression strict second third argument since selection second third argument dependent value boolean condition first argument
Most programming language assume abstract strict parameter therefore parameter evaluated function called
This evaluation scheme called
This always desirable language provide mechanism programmer inform function evaluate parameter
Scheme provides quote operator prevent evaluation argument
Logic language like Prolog functional language language like Haskell Miranda language argument evaluated value required
This evaluation scheme called often implemented using argument evaluated first needed
Most language use strict evaluation efficient simplifies implementation parameter passing imperative programming language
evaluation coupled found imperative langauges produce unexpected result
provides parameter passing mechanism pas name based provide generality required imperative model following example show
The requires value copied generic entered copied generic generic exited
This form parameter passing often referred
The formal parameter local variable argument copied local variable entry generic copied local variable argument exit generic
The Pascal Ada example parameter may passed using copy mechanism
The value argument copied parameter entry value formal parameter copied actual parameter exit
In imperative language copying unnecessary language prohibits assignment formal parameter
In case parameter may passed reference
Ada function result example parameter may passed using copy mechanism
The value argument actual parameter copied formal parameter entry value parameter copied argument upon exit
In Pascal function name used parameter assignment may made function name
This form parameter passing often referred
When passing value result combined passing mechanism referred
Ada example parameter may passed form copy mechanism
The value actual parameter copied formal parameter entry value formal parameter copied actual parameter upon exit
The copy mechanism disadvantage
The copying large composite value array etc expensive parameter must assignable
expression file type Pascal assignable
The effect abstact surrounded block definition bind parameter argument
An parameter said passed argument address
References parameter reference argument
Assignments parmeter assignment argument
The Pascal array structure parameter passed using mechanism
A toster provides illustration effect passing reference
If argument A parameter said passed effect argument replaces parameter throughout body subroutine textual substitution suitable renaming local variable avoid conflict local variable variable occuring argument subprogram reference parameter result evaluation argument calling environment
In addition problem mechanism imperative language reference parameter present possibility
Aliasing occurs two name reference object
For example following procedure call ALLOCATION When subprogram called new uninitialized stack element pushed stack corresponding variable block
A reference variable involves inspection updating top element appropriate stack
This provides access variable closest block respect dynamic calling sequence
When subprogram terminates stack corresponding variable block popped restoring calling environment
The may implemented follows
The data section procedure associated
The activation record dynamically allocated space stack
Each recursive call associated activation record
Associated activation record point previous activation record address instruction executed upon return procedure provides access referencing environment
An activation record consists storage local variable static dynamic link return address
The runtime stack activation record local data static dynamic link
Global data value found following static chain appropriate activation record
An alternative method implementation static scope rule display
A set register hardware software contain pointer current environment
On procedure call current display pushed onto runtime stack new display constructed containing revised environment
On procedure exit display restored copy stack
There number mechanism partitioning program text
Functions procedure among common
However result still single file
When partition program text arranged separate file partition called module
Here several program partitioning mechanism
There number mechanism combining partition single program purpose compilation execution
The statement provided number language
It compiler directive directs compiler textually include named file source program
In system partition may separately compiled linking phase compiled program module linked together execution
In system missing function procedure result search missing module found executed found result error
In program construction module designer must answer following question
Modules must provide answer two question Functions procedure simple module
Their signature description body describes achieved
More typically module group component type constant variable procedure function
To present narrow interface module module make component visible outside
Such component said module
The component said inside module
The hidden component used implement exported component
Access component often qualified name
When strong safety consideration important module using component another module may required explicitly required module desired component

Stack Exchange network consists Q A community including largest trusted online community developer learn share knowledge build career
A Turing machine one replace symbol blank unless symbol read head blank
I trying understand whether loss generality restriction
My guess loss generality restriction merely restricts replacing character blank easily replace symbol construct rule might used blank use new symbol
I think simple solution though
Can anyone give insight show whether generality lost special case Turing machine
The purpose blank symbol differentiate tape alphabet language alphabet
It useful typically trying formulate decision problem
From abstract point view clearly realize machine whose tape alphabet least two symbol still exactly Turing machine
So erring towards generality speak away
Your definition Turing machine common one
early definition result Turing machine Turing machine restriction Turing machine permitted overwrite blank symbol
Moore mention Shannon proved Turing machine simulate Turing machine however result never published
Shortly Shannon proved Turing machine universal Wang proved erasing Turing machine universal
Later Minsky proved result Wang using different technique
Minsky proved writing Turing machine universal showed Turing machine simulate machine
So say overwrite blank symbol wrote replace symbol blank unless symbol read head blank
In general seems serious restriction one reference result point opposite direction By posting answer agree
asked viewed active site design logo Stack Exchange Inc user contribution licensed

Stack Exchange network consists Q A community including largest trusted online community developer learn share knowledge build career
I learned tradeoff machine learning context applied simple regression model
Now I wondering tradeoff general universal principle applicable every conceivable learning algorithm specific particular algorithm like regression
By posting answer agree
asked viewed site design logo Stack Exchange Inc user contribution licensed

Send

My Turing Award Lecture entitled Generality Artificial Intelligence
The topic turned overambitious I discovered I unable put thought subject satisfactory written form time
It would better reviewed previous work rather attempt something new custom time
I grateful ACM opportunity try
Unfortunately science although perhaps fortunately project problem generality AI almost unsolved ever although many idea available
This paper relies heavily idea far full survey approach achieving generality
Ideas discussed length proportional familiarity rather according objective criterion
It obvious even AI program suffered lack generality
It still obvious many detail
The first gross symptom small addition idea program often involves complete rewrite beginning data structure
Some progress made modularizing data structure small modification search strategy even le likely accomplished without rewriting
Another symptom know make general database common sense knowledge could used program needed knowledge
Along information database would contain robot would need know effect moving object around person expected know family fact buying selling
This depend whether knowledge expressed logical language formalism
When take logic approach AI lack generality show axiom devise express common sense knowledge restricted applicability general common sense database
In opinion getting language expressing general common sense knowledge inclusion general database key problem generality AI
Here idea achieving generality proposed
I repeat disclaimer comprehensiveness

obj stream ïV
Üæõb ã ïÔÏÜÝÆ HÒå lmÊýìÔ ç ëÑËvªÍxìºD Y JëlhìõëÁ DÁ E G ã Ù À ñ ø ã V iq ÃóÉú ÙSÙ

Computers dramatically changed practice many discipline including engineering medicine science
For example possible test thousand product design run thousand trial without first building prototype product conducting elaborate experiment trial
The impact new ability power simulate real thing revolutionizing practice engineering science
Reliability flexibility efficiency often attractive cost placed scientific computation keystone theory application
Basic research scientific computing conducted Yale applied wide range application
Currently emphasis problem originating biomedical science
These range high throughput genomic search engine simulation biological cell
Active collaboration place several researcher Yale Biology Departments Yale Medical School
It clear high performance scientific computing essential component genomic Scientific computing research Yale emphasizes algorithm development theoretical analysis system computer architecture modeling programming consideration
Algorithm development concerned finding new fast parallel method
Theoretical analysis evaluates question rate convergence stability optimality operation count
Systems modeling research examines performance implication interaction computationally intensive algorithm operating system multiprocessor machine
Programming consideration include coding efficiency numerical accuracy generality application data structure machine independence
One focus work scientific computing Yale today adaptation fast serial algorithm parallel multiprocessor environment
Clusters LANS workstation PCs commonly used virtual multiprocessor
Underlying scientific computing applied mathematical technique modeling physical system
Mathematical model widely used throughout science engineering field diverse theoretical physic bioinformatics robotics image processing finance
In spite broad range application essential technique used attacking problem
Research applied mathematics Yale comprises mathematics application computer science statistic engineering science
The area conveniently divided two general area discrete mathematics discrete algorithm combinatorics combinatorial optimization graph algorithm continuous mathematics comprising many traditional area linear nonlinear partial differential equation numerical analysis harmonic analysis geometric algorithm
Faculty member Scientific Computing area include
Copyright Yale University All right reserved Send question comment

